// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: appguard.proto
#ifndef GRPC_appguard_2eproto__INCLUDED
#define GRPC_appguard_2eproto__INCLUDED

#include "appguard.pb.h"

#include <functional>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/client_context.h>
#include <grpcpp/completion_queue.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/rpc_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/support/stub_options.h>
#include <grpcpp/support/sync_stream.h>

namespace appguard {

class AppGuard final {
 public:
  static constexpr char const* service_full_name() {
    return "appguard.AppGuard";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // TCP
    virtual ::grpc::Status HandleTcpConnection(::grpc::ClientContext* context, const ::appguard::AppGuardTcpConnection& request, ::appguard::AppGuardTcpResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::appguard::AppGuardTcpResponse>> AsyncHandleTcpConnection(::grpc::ClientContext* context, const ::appguard::AppGuardTcpConnection& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::appguard::AppGuardTcpResponse>>(AsyncHandleTcpConnectionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::appguard::AppGuardTcpResponse>> PrepareAsyncHandleTcpConnection(::grpc::ClientContext* context, const ::appguard::AppGuardTcpConnection& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::appguard::AppGuardTcpResponse>>(PrepareAsyncHandleTcpConnectionRaw(context, request, cq));
    }
    // HTTP
    virtual ::grpc::Status HandleHttpRequest(::grpc::ClientContext* context, const ::appguard::AppGuardHttpRequest& request, ::appguard::AppGuardResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::appguard::AppGuardResponse>> AsyncHandleHttpRequest(::grpc::ClientContext* context, const ::appguard::AppGuardHttpRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::appguard::AppGuardResponse>>(AsyncHandleHttpRequestRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::appguard::AppGuardResponse>> PrepareAsyncHandleHttpRequest(::grpc::ClientContext* context, const ::appguard::AppGuardHttpRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::appguard::AppGuardResponse>>(PrepareAsyncHandleHttpRequestRaw(context, request, cq));
    }
    virtual ::grpc::Status HandleHttpResponse(::grpc::ClientContext* context, const ::appguard::AppGuardHttpResponse& request, ::appguard::AppGuardResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::appguard::AppGuardResponse>> AsyncHandleHttpResponse(::grpc::ClientContext* context, const ::appguard::AppGuardHttpResponse& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::appguard::AppGuardResponse>>(AsyncHandleHttpResponseRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::appguard::AppGuardResponse>> PrepareAsyncHandleHttpResponse(::grpc::ClientContext* context, const ::appguard::AppGuardHttpResponse& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::appguard::AppGuardResponse>>(PrepareAsyncHandleHttpResponseRaw(context, request, cq));
    }
    // SMTP
    virtual ::grpc::Status HandleSmtpRequest(::grpc::ClientContext* context, const ::appguard::AppGuardSmtpRequest& request, ::appguard::AppGuardResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::appguard::AppGuardResponse>> AsyncHandleSmtpRequest(::grpc::ClientContext* context, const ::appguard::AppGuardSmtpRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::appguard::AppGuardResponse>>(AsyncHandleSmtpRequestRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::appguard::AppGuardResponse>> PrepareAsyncHandleSmtpRequest(::grpc::ClientContext* context, const ::appguard::AppGuardSmtpRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::appguard::AppGuardResponse>>(PrepareAsyncHandleSmtpRequestRaw(context, request, cq));
    }
    virtual ::grpc::Status HandleSmtpResponse(::grpc::ClientContext* context, const ::appguard::AppGuardSmtpResponse& request, ::appguard::AppGuardResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::appguard::AppGuardResponse>> AsyncHandleSmtpResponse(::grpc::ClientContext* context, const ::appguard::AppGuardSmtpResponse& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::appguard::AppGuardResponse>>(AsyncHandleSmtpResponseRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::appguard::AppGuardResponse>> PrepareAsyncHandleSmtpResponse(::grpc::ClientContext* context, const ::appguard::AppGuardSmtpResponse& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::appguard::AppGuardResponse>>(PrepareAsyncHandleSmtpResponseRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      // TCP
      virtual void HandleTcpConnection(::grpc::ClientContext* context, const ::appguard::AppGuardTcpConnection* request, ::appguard::AppGuardTcpResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void HandleTcpConnection(::grpc::ClientContext* context, const ::appguard::AppGuardTcpConnection* request, ::appguard::AppGuardTcpResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // HTTP
      virtual void HandleHttpRequest(::grpc::ClientContext* context, const ::appguard::AppGuardHttpRequest* request, ::appguard::AppGuardResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void HandleHttpRequest(::grpc::ClientContext* context, const ::appguard::AppGuardHttpRequest* request, ::appguard::AppGuardResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void HandleHttpResponse(::grpc::ClientContext* context, const ::appguard::AppGuardHttpResponse* request, ::appguard::AppGuardResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void HandleHttpResponse(::grpc::ClientContext* context, const ::appguard::AppGuardHttpResponse* request, ::appguard::AppGuardResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // SMTP
      virtual void HandleSmtpRequest(::grpc::ClientContext* context, const ::appguard::AppGuardSmtpRequest* request, ::appguard::AppGuardResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void HandleSmtpRequest(::grpc::ClientContext* context, const ::appguard::AppGuardSmtpRequest* request, ::appguard::AppGuardResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void HandleSmtpResponse(::grpc::ClientContext* context, const ::appguard::AppGuardSmtpResponse* request, ::appguard::AppGuardResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void HandleSmtpResponse(::grpc::ClientContext* context, const ::appguard::AppGuardSmtpResponse* request, ::appguard::AppGuardResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::appguard::AppGuardTcpResponse>* AsyncHandleTcpConnectionRaw(::grpc::ClientContext* context, const ::appguard::AppGuardTcpConnection& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::appguard::AppGuardTcpResponse>* PrepareAsyncHandleTcpConnectionRaw(::grpc::ClientContext* context, const ::appguard::AppGuardTcpConnection& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::appguard::AppGuardResponse>* AsyncHandleHttpRequestRaw(::grpc::ClientContext* context, const ::appguard::AppGuardHttpRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::appguard::AppGuardResponse>* PrepareAsyncHandleHttpRequestRaw(::grpc::ClientContext* context, const ::appguard::AppGuardHttpRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::appguard::AppGuardResponse>* AsyncHandleHttpResponseRaw(::grpc::ClientContext* context, const ::appguard::AppGuardHttpResponse& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::appguard::AppGuardResponse>* PrepareAsyncHandleHttpResponseRaw(::grpc::ClientContext* context, const ::appguard::AppGuardHttpResponse& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::appguard::AppGuardResponse>* AsyncHandleSmtpRequestRaw(::grpc::ClientContext* context, const ::appguard::AppGuardSmtpRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::appguard::AppGuardResponse>* PrepareAsyncHandleSmtpRequestRaw(::grpc::ClientContext* context, const ::appguard::AppGuardSmtpRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::appguard::AppGuardResponse>* AsyncHandleSmtpResponseRaw(::grpc::ClientContext* context, const ::appguard::AppGuardSmtpResponse& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::appguard::AppGuardResponse>* PrepareAsyncHandleSmtpResponseRaw(::grpc::ClientContext* context, const ::appguard::AppGuardSmtpResponse& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status HandleTcpConnection(::grpc::ClientContext* context, const ::appguard::AppGuardTcpConnection& request, ::appguard::AppGuardTcpResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::appguard::AppGuardTcpResponse>> AsyncHandleTcpConnection(::grpc::ClientContext* context, const ::appguard::AppGuardTcpConnection& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::appguard::AppGuardTcpResponse>>(AsyncHandleTcpConnectionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::appguard::AppGuardTcpResponse>> PrepareAsyncHandleTcpConnection(::grpc::ClientContext* context, const ::appguard::AppGuardTcpConnection& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::appguard::AppGuardTcpResponse>>(PrepareAsyncHandleTcpConnectionRaw(context, request, cq));
    }
    ::grpc::Status HandleHttpRequest(::grpc::ClientContext* context, const ::appguard::AppGuardHttpRequest& request, ::appguard::AppGuardResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::appguard::AppGuardResponse>> AsyncHandleHttpRequest(::grpc::ClientContext* context, const ::appguard::AppGuardHttpRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::appguard::AppGuardResponse>>(AsyncHandleHttpRequestRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::appguard::AppGuardResponse>> PrepareAsyncHandleHttpRequest(::grpc::ClientContext* context, const ::appguard::AppGuardHttpRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::appguard::AppGuardResponse>>(PrepareAsyncHandleHttpRequestRaw(context, request, cq));
    }
    ::grpc::Status HandleHttpResponse(::grpc::ClientContext* context, const ::appguard::AppGuardHttpResponse& request, ::appguard::AppGuardResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::appguard::AppGuardResponse>> AsyncHandleHttpResponse(::grpc::ClientContext* context, const ::appguard::AppGuardHttpResponse& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::appguard::AppGuardResponse>>(AsyncHandleHttpResponseRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::appguard::AppGuardResponse>> PrepareAsyncHandleHttpResponse(::grpc::ClientContext* context, const ::appguard::AppGuardHttpResponse& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::appguard::AppGuardResponse>>(PrepareAsyncHandleHttpResponseRaw(context, request, cq));
    }
    ::grpc::Status HandleSmtpRequest(::grpc::ClientContext* context, const ::appguard::AppGuardSmtpRequest& request, ::appguard::AppGuardResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::appguard::AppGuardResponse>> AsyncHandleSmtpRequest(::grpc::ClientContext* context, const ::appguard::AppGuardSmtpRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::appguard::AppGuardResponse>>(AsyncHandleSmtpRequestRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::appguard::AppGuardResponse>> PrepareAsyncHandleSmtpRequest(::grpc::ClientContext* context, const ::appguard::AppGuardSmtpRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::appguard::AppGuardResponse>>(PrepareAsyncHandleSmtpRequestRaw(context, request, cq));
    }
    ::grpc::Status HandleSmtpResponse(::grpc::ClientContext* context, const ::appguard::AppGuardSmtpResponse& request, ::appguard::AppGuardResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::appguard::AppGuardResponse>> AsyncHandleSmtpResponse(::grpc::ClientContext* context, const ::appguard::AppGuardSmtpResponse& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::appguard::AppGuardResponse>>(AsyncHandleSmtpResponseRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::appguard::AppGuardResponse>> PrepareAsyncHandleSmtpResponse(::grpc::ClientContext* context, const ::appguard::AppGuardSmtpResponse& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::appguard::AppGuardResponse>>(PrepareAsyncHandleSmtpResponseRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void HandleTcpConnection(::grpc::ClientContext* context, const ::appguard::AppGuardTcpConnection* request, ::appguard::AppGuardTcpResponse* response, std::function<void(::grpc::Status)>) override;
      void HandleTcpConnection(::grpc::ClientContext* context, const ::appguard::AppGuardTcpConnection* request, ::appguard::AppGuardTcpResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void HandleHttpRequest(::grpc::ClientContext* context, const ::appguard::AppGuardHttpRequest* request, ::appguard::AppGuardResponse* response, std::function<void(::grpc::Status)>) override;
      void HandleHttpRequest(::grpc::ClientContext* context, const ::appguard::AppGuardHttpRequest* request, ::appguard::AppGuardResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void HandleHttpResponse(::grpc::ClientContext* context, const ::appguard::AppGuardHttpResponse* request, ::appguard::AppGuardResponse* response, std::function<void(::grpc::Status)>) override;
      void HandleHttpResponse(::grpc::ClientContext* context, const ::appguard::AppGuardHttpResponse* request, ::appguard::AppGuardResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void HandleSmtpRequest(::grpc::ClientContext* context, const ::appguard::AppGuardSmtpRequest* request, ::appguard::AppGuardResponse* response, std::function<void(::grpc::Status)>) override;
      void HandleSmtpRequest(::grpc::ClientContext* context, const ::appguard::AppGuardSmtpRequest* request, ::appguard::AppGuardResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void HandleSmtpResponse(::grpc::ClientContext* context, const ::appguard::AppGuardSmtpResponse* request, ::appguard::AppGuardResponse* response, std::function<void(::grpc::Status)>) override;
      void HandleSmtpResponse(::grpc::ClientContext* context, const ::appguard::AppGuardSmtpResponse* request, ::appguard::AppGuardResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::appguard::AppGuardTcpResponse>* AsyncHandleTcpConnectionRaw(::grpc::ClientContext* context, const ::appguard::AppGuardTcpConnection& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::appguard::AppGuardTcpResponse>* PrepareAsyncHandleTcpConnectionRaw(::grpc::ClientContext* context, const ::appguard::AppGuardTcpConnection& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::appguard::AppGuardResponse>* AsyncHandleHttpRequestRaw(::grpc::ClientContext* context, const ::appguard::AppGuardHttpRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::appguard::AppGuardResponse>* PrepareAsyncHandleHttpRequestRaw(::grpc::ClientContext* context, const ::appguard::AppGuardHttpRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::appguard::AppGuardResponse>* AsyncHandleHttpResponseRaw(::grpc::ClientContext* context, const ::appguard::AppGuardHttpResponse& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::appguard::AppGuardResponse>* PrepareAsyncHandleHttpResponseRaw(::grpc::ClientContext* context, const ::appguard::AppGuardHttpResponse& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::appguard::AppGuardResponse>* AsyncHandleSmtpRequestRaw(::grpc::ClientContext* context, const ::appguard::AppGuardSmtpRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::appguard::AppGuardResponse>* PrepareAsyncHandleSmtpRequestRaw(::grpc::ClientContext* context, const ::appguard::AppGuardSmtpRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::appguard::AppGuardResponse>* AsyncHandleSmtpResponseRaw(::grpc::ClientContext* context, const ::appguard::AppGuardSmtpResponse& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::appguard::AppGuardResponse>* PrepareAsyncHandleSmtpResponseRaw(::grpc::ClientContext* context, const ::appguard::AppGuardSmtpResponse& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_HandleTcpConnection_;
    const ::grpc::internal::RpcMethod rpcmethod_HandleHttpRequest_;
    const ::grpc::internal::RpcMethod rpcmethod_HandleHttpResponse_;
    const ::grpc::internal::RpcMethod rpcmethod_HandleSmtpRequest_;
    const ::grpc::internal::RpcMethod rpcmethod_HandleSmtpResponse_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // TCP
    virtual ::grpc::Status HandleTcpConnection(::grpc::ServerContext* context, const ::appguard::AppGuardTcpConnection* request, ::appguard::AppGuardTcpResponse* response);
    // HTTP
    virtual ::grpc::Status HandleHttpRequest(::grpc::ServerContext* context, const ::appguard::AppGuardHttpRequest* request, ::appguard::AppGuardResponse* response);
    virtual ::grpc::Status HandleHttpResponse(::grpc::ServerContext* context, const ::appguard::AppGuardHttpResponse* request, ::appguard::AppGuardResponse* response);
    // SMTP
    virtual ::grpc::Status HandleSmtpRequest(::grpc::ServerContext* context, const ::appguard::AppGuardSmtpRequest* request, ::appguard::AppGuardResponse* response);
    virtual ::grpc::Status HandleSmtpResponse(::grpc::ServerContext* context, const ::appguard::AppGuardSmtpResponse* request, ::appguard::AppGuardResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_HandleTcpConnection : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_HandleTcpConnection() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_HandleTcpConnection() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status HandleTcpConnection(::grpc::ServerContext* /*context*/, const ::appguard::AppGuardTcpConnection* /*request*/, ::appguard::AppGuardTcpResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestHandleTcpConnection(::grpc::ServerContext* context, ::appguard::AppGuardTcpConnection* request, ::grpc::ServerAsyncResponseWriter< ::appguard::AppGuardTcpResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_HandleHttpRequest : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_HandleHttpRequest() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_HandleHttpRequest() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status HandleHttpRequest(::grpc::ServerContext* /*context*/, const ::appguard::AppGuardHttpRequest* /*request*/, ::appguard::AppGuardResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestHandleHttpRequest(::grpc::ServerContext* context, ::appguard::AppGuardHttpRequest* request, ::grpc::ServerAsyncResponseWriter< ::appguard::AppGuardResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_HandleHttpResponse : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_HandleHttpResponse() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_HandleHttpResponse() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status HandleHttpResponse(::grpc::ServerContext* /*context*/, const ::appguard::AppGuardHttpResponse* /*request*/, ::appguard::AppGuardResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestHandleHttpResponse(::grpc::ServerContext* context, ::appguard::AppGuardHttpResponse* request, ::grpc::ServerAsyncResponseWriter< ::appguard::AppGuardResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_HandleSmtpRequest : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_HandleSmtpRequest() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_HandleSmtpRequest() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status HandleSmtpRequest(::grpc::ServerContext* /*context*/, const ::appguard::AppGuardSmtpRequest* /*request*/, ::appguard::AppGuardResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestHandleSmtpRequest(::grpc::ServerContext* context, ::appguard::AppGuardSmtpRequest* request, ::grpc::ServerAsyncResponseWriter< ::appguard::AppGuardResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_HandleSmtpResponse : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_HandleSmtpResponse() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_HandleSmtpResponse() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status HandleSmtpResponse(::grpc::ServerContext* /*context*/, const ::appguard::AppGuardSmtpResponse* /*request*/, ::appguard::AppGuardResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestHandleSmtpResponse(::grpc::ServerContext* context, ::appguard::AppGuardSmtpResponse* request, ::grpc::ServerAsyncResponseWriter< ::appguard::AppGuardResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_HandleTcpConnection<WithAsyncMethod_HandleHttpRequest<WithAsyncMethod_HandleHttpResponse<WithAsyncMethod_HandleSmtpRequest<WithAsyncMethod_HandleSmtpResponse<Service > > > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_HandleTcpConnection : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_HandleTcpConnection() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::appguard::AppGuardTcpConnection, ::appguard::AppGuardTcpResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::appguard::AppGuardTcpConnection* request, ::appguard::AppGuardTcpResponse* response) { return this->HandleTcpConnection(context, request, response); }));}
    void SetMessageAllocatorFor_HandleTcpConnection(
        ::grpc::MessageAllocator< ::appguard::AppGuardTcpConnection, ::appguard::AppGuardTcpResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::appguard::AppGuardTcpConnection, ::appguard::AppGuardTcpResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_HandleTcpConnection() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status HandleTcpConnection(::grpc::ServerContext* /*context*/, const ::appguard::AppGuardTcpConnection* /*request*/, ::appguard::AppGuardTcpResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* HandleTcpConnection(
      ::grpc::CallbackServerContext* /*context*/, const ::appguard::AppGuardTcpConnection* /*request*/, ::appguard::AppGuardTcpResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_HandleHttpRequest : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_HandleHttpRequest() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::appguard::AppGuardHttpRequest, ::appguard::AppGuardResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::appguard::AppGuardHttpRequest* request, ::appguard::AppGuardResponse* response) { return this->HandleHttpRequest(context, request, response); }));}
    void SetMessageAllocatorFor_HandleHttpRequest(
        ::grpc::MessageAllocator< ::appguard::AppGuardHttpRequest, ::appguard::AppGuardResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::appguard::AppGuardHttpRequest, ::appguard::AppGuardResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_HandleHttpRequest() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status HandleHttpRequest(::grpc::ServerContext* /*context*/, const ::appguard::AppGuardHttpRequest* /*request*/, ::appguard::AppGuardResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* HandleHttpRequest(
      ::grpc::CallbackServerContext* /*context*/, const ::appguard::AppGuardHttpRequest* /*request*/, ::appguard::AppGuardResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_HandleHttpResponse : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_HandleHttpResponse() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::appguard::AppGuardHttpResponse, ::appguard::AppGuardResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::appguard::AppGuardHttpResponse* request, ::appguard::AppGuardResponse* response) { return this->HandleHttpResponse(context, request, response); }));}
    void SetMessageAllocatorFor_HandleHttpResponse(
        ::grpc::MessageAllocator< ::appguard::AppGuardHttpResponse, ::appguard::AppGuardResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::appguard::AppGuardHttpResponse, ::appguard::AppGuardResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_HandleHttpResponse() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status HandleHttpResponse(::grpc::ServerContext* /*context*/, const ::appguard::AppGuardHttpResponse* /*request*/, ::appguard::AppGuardResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* HandleHttpResponse(
      ::grpc::CallbackServerContext* /*context*/, const ::appguard::AppGuardHttpResponse* /*request*/, ::appguard::AppGuardResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_HandleSmtpRequest : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_HandleSmtpRequest() {
      ::grpc::Service::MarkMethodCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::appguard::AppGuardSmtpRequest, ::appguard::AppGuardResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::appguard::AppGuardSmtpRequest* request, ::appguard::AppGuardResponse* response) { return this->HandleSmtpRequest(context, request, response); }));}
    void SetMessageAllocatorFor_HandleSmtpRequest(
        ::grpc::MessageAllocator< ::appguard::AppGuardSmtpRequest, ::appguard::AppGuardResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::appguard::AppGuardSmtpRequest, ::appguard::AppGuardResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_HandleSmtpRequest() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status HandleSmtpRequest(::grpc::ServerContext* /*context*/, const ::appguard::AppGuardSmtpRequest* /*request*/, ::appguard::AppGuardResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* HandleSmtpRequest(
      ::grpc::CallbackServerContext* /*context*/, const ::appguard::AppGuardSmtpRequest* /*request*/, ::appguard::AppGuardResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_HandleSmtpResponse : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_HandleSmtpResponse() {
      ::grpc::Service::MarkMethodCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::appguard::AppGuardSmtpResponse, ::appguard::AppGuardResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::appguard::AppGuardSmtpResponse* request, ::appguard::AppGuardResponse* response) { return this->HandleSmtpResponse(context, request, response); }));}
    void SetMessageAllocatorFor_HandleSmtpResponse(
        ::grpc::MessageAllocator< ::appguard::AppGuardSmtpResponse, ::appguard::AppGuardResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(4);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::appguard::AppGuardSmtpResponse, ::appguard::AppGuardResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_HandleSmtpResponse() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status HandleSmtpResponse(::grpc::ServerContext* /*context*/, const ::appguard::AppGuardSmtpResponse* /*request*/, ::appguard::AppGuardResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* HandleSmtpResponse(
      ::grpc::CallbackServerContext* /*context*/, const ::appguard::AppGuardSmtpResponse* /*request*/, ::appguard::AppGuardResponse* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_HandleTcpConnection<WithCallbackMethod_HandleHttpRequest<WithCallbackMethod_HandleHttpResponse<WithCallbackMethod_HandleSmtpRequest<WithCallbackMethod_HandleSmtpResponse<Service > > > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_HandleTcpConnection : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_HandleTcpConnection() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_HandleTcpConnection() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status HandleTcpConnection(::grpc::ServerContext* /*context*/, const ::appguard::AppGuardTcpConnection* /*request*/, ::appguard::AppGuardTcpResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_HandleHttpRequest : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_HandleHttpRequest() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_HandleHttpRequest() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status HandleHttpRequest(::grpc::ServerContext* /*context*/, const ::appguard::AppGuardHttpRequest* /*request*/, ::appguard::AppGuardResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_HandleHttpResponse : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_HandleHttpResponse() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_HandleHttpResponse() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status HandleHttpResponse(::grpc::ServerContext* /*context*/, const ::appguard::AppGuardHttpResponse* /*request*/, ::appguard::AppGuardResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_HandleSmtpRequest : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_HandleSmtpRequest() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_HandleSmtpRequest() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status HandleSmtpRequest(::grpc::ServerContext* /*context*/, const ::appguard::AppGuardSmtpRequest* /*request*/, ::appguard::AppGuardResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_HandleSmtpResponse : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_HandleSmtpResponse() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_HandleSmtpResponse() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status HandleSmtpResponse(::grpc::ServerContext* /*context*/, const ::appguard::AppGuardSmtpResponse* /*request*/, ::appguard::AppGuardResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_HandleTcpConnection : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_HandleTcpConnection() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_HandleTcpConnection() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status HandleTcpConnection(::grpc::ServerContext* /*context*/, const ::appguard::AppGuardTcpConnection* /*request*/, ::appguard::AppGuardTcpResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestHandleTcpConnection(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_HandleHttpRequest : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_HandleHttpRequest() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_HandleHttpRequest() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status HandleHttpRequest(::grpc::ServerContext* /*context*/, const ::appguard::AppGuardHttpRequest* /*request*/, ::appguard::AppGuardResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestHandleHttpRequest(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_HandleHttpResponse : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_HandleHttpResponse() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_HandleHttpResponse() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status HandleHttpResponse(::grpc::ServerContext* /*context*/, const ::appguard::AppGuardHttpResponse* /*request*/, ::appguard::AppGuardResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestHandleHttpResponse(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_HandleSmtpRequest : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_HandleSmtpRequest() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_HandleSmtpRequest() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status HandleSmtpRequest(::grpc::ServerContext* /*context*/, const ::appguard::AppGuardSmtpRequest* /*request*/, ::appguard::AppGuardResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestHandleSmtpRequest(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_HandleSmtpResponse : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_HandleSmtpResponse() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_HandleSmtpResponse() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status HandleSmtpResponse(::grpc::ServerContext* /*context*/, const ::appguard::AppGuardSmtpResponse* /*request*/, ::appguard::AppGuardResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestHandleSmtpResponse(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_HandleTcpConnection : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_HandleTcpConnection() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->HandleTcpConnection(context, request, response); }));
    }
    ~WithRawCallbackMethod_HandleTcpConnection() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status HandleTcpConnection(::grpc::ServerContext* /*context*/, const ::appguard::AppGuardTcpConnection* /*request*/, ::appguard::AppGuardTcpResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* HandleTcpConnection(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_HandleHttpRequest : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_HandleHttpRequest() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->HandleHttpRequest(context, request, response); }));
    }
    ~WithRawCallbackMethod_HandleHttpRequest() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status HandleHttpRequest(::grpc::ServerContext* /*context*/, const ::appguard::AppGuardHttpRequest* /*request*/, ::appguard::AppGuardResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* HandleHttpRequest(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_HandleHttpResponse : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_HandleHttpResponse() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->HandleHttpResponse(context, request, response); }));
    }
    ~WithRawCallbackMethod_HandleHttpResponse() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status HandleHttpResponse(::grpc::ServerContext* /*context*/, const ::appguard::AppGuardHttpResponse* /*request*/, ::appguard::AppGuardResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* HandleHttpResponse(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_HandleSmtpRequest : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_HandleSmtpRequest() {
      ::grpc::Service::MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->HandleSmtpRequest(context, request, response); }));
    }
    ~WithRawCallbackMethod_HandleSmtpRequest() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status HandleSmtpRequest(::grpc::ServerContext* /*context*/, const ::appguard::AppGuardSmtpRequest* /*request*/, ::appguard::AppGuardResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* HandleSmtpRequest(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_HandleSmtpResponse : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_HandleSmtpResponse() {
      ::grpc::Service::MarkMethodRawCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->HandleSmtpResponse(context, request, response); }));
    }
    ~WithRawCallbackMethod_HandleSmtpResponse() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status HandleSmtpResponse(::grpc::ServerContext* /*context*/, const ::appguard::AppGuardSmtpResponse* /*request*/, ::appguard::AppGuardResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* HandleSmtpResponse(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_HandleTcpConnection : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_HandleTcpConnection() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::appguard::AppGuardTcpConnection, ::appguard::AppGuardTcpResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::appguard::AppGuardTcpConnection, ::appguard::AppGuardTcpResponse>* streamer) {
                       return this->StreamedHandleTcpConnection(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_HandleTcpConnection() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status HandleTcpConnection(::grpc::ServerContext* /*context*/, const ::appguard::AppGuardTcpConnection* /*request*/, ::appguard::AppGuardTcpResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedHandleTcpConnection(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::appguard::AppGuardTcpConnection,::appguard::AppGuardTcpResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_HandleHttpRequest : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_HandleHttpRequest() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::appguard::AppGuardHttpRequest, ::appguard::AppGuardResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::appguard::AppGuardHttpRequest, ::appguard::AppGuardResponse>* streamer) {
                       return this->StreamedHandleHttpRequest(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_HandleHttpRequest() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status HandleHttpRequest(::grpc::ServerContext* /*context*/, const ::appguard::AppGuardHttpRequest* /*request*/, ::appguard::AppGuardResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedHandleHttpRequest(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::appguard::AppGuardHttpRequest,::appguard::AppGuardResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_HandleHttpResponse : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_HandleHttpResponse() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::appguard::AppGuardHttpResponse, ::appguard::AppGuardResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::appguard::AppGuardHttpResponse, ::appguard::AppGuardResponse>* streamer) {
                       return this->StreamedHandleHttpResponse(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_HandleHttpResponse() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status HandleHttpResponse(::grpc::ServerContext* /*context*/, const ::appguard::AppGuardHttpResponse* /*request*/, ::appguard::AppGuardResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedHandleHttpResponse(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::appguard::AppGuardHttpResponse,::appguard::AppGuardResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_HandleSmtpRequest : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_HandleSmtpRequest() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::appguard::AppGuardSmtpRequest, ::appguard::AppGuardResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::appguard::AppGuardSmtpRequest, ::appguard::AppGuardResponse>* streamer) {
                       return this->StreamedHandleSmtpRequest(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_HandleSmtpRequest() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status HandleSmtpRequest(::grpc::ServerContext* /*context*/, const ::appguard::AppGuardSmtpRequest* /*request*/, ::appguard::AppGuardResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedHandleSmtpRequest(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::appguard::AppGuardSmtpRequest,::appguard::AppGuardResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_HandleSmtpResponse : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_HandleSmtpResponse() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler<
          ::appguard::AppGuardSmtpResponse, ::appguard::AppGuardResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::appguard::AppGuardSmtpResponse, ::appguard::AppGuardResponse>* streamer) {
                       return this->StreamedHandleSmtpResponse(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_HandleSmtpResponse() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status HandleSmtpResponse(::grpc::ServerContext* /*context*/, const ::appguard::AppGuardSmtpResponse* /*request*/, ::appguard::AppGuardResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedHandleSmtpResponse(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::appguard::AppGuardSmtpResponse,::appguard::AppGuardResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_HandleTcpConnection<WithStreamedUnaryMethod_HandleHttpRequest<WithStreamedUnaryMethod_HandleHttpResponse<WithStreamedUnaryMethod_HandleSmtpRequest<WithStreamedUnaryMethod_HandleSmtpResponse<Service > > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_HandleTcpConnection<WithStreamedUnaryMethod_HandleHttpRequest<WithStreamedUnaryMethod_HandleHttpResponse<WithStreamedUnaryMethod_HandleSmtpRequest<WithStreamedUnaryMethod_HandleSmtpResponse<Service > > > > > StreamedService;
};

}  // namespace appguard


#endif  // GRPC_appguard_2eproto__INCLUDED
