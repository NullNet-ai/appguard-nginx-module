// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: appguard.proto

#include "appguard.pb.h"
#include "appguard.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
namespace appguard {

static const char* AppGuard_method_names[] = {
  "/appguard.AppGuard/HandleTcpConnection",
  "/appguard.AppGuard/HandleHttpRequest",
  "/appguard.AppGuard/HandleHttpResponse",
  "/appguard.AppGuard/HandleSmtpRequest",
  "/appguard.AppGuard/HandleSmtpResponse",
};

std::unique_ptr< AppGuard::Stub> AppGuard::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< AppGuard::Stub> stub(new AppGuard::Stub(channel, options));
  return stub;
}

AppGuard::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_HandleTcpConnection_(AppGuard_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_HandleHttpRequest_(AppGuard_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_HandleHttpResponse_(AppGuard_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_HandleSmtpRequest_(AppGuard_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_HandleSmtpResponse_(AppGuard_method_names[4], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status AppGuard::Stub::HandleTcpConnection(::grpc::ClientContext* context, const ::appguard::AppGuardTcpConnection& request, ::appguard::AppGuardTcpResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::appguard::AppGuardTcpConnection, ::appguard::AppGuardTcpResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_HandleTcpConnection_, context, request, response);
}

void AppGuard::Stub::async::HandleTcpConnection(::grpc::ClientContext* context, const ::appguard::AppGuardTcpConnection* request, ::appguard::AppGuardTcpResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::appguard::AppGuardTcpConnection, ::appguard::AppGuardTcpResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_HandleTcpConnection_, context, request, response, std::move(f));
}

void AppGuard::Stub::async::HandleTcpConnection(::grpc::ClientContext* context, const ::appguard::AppGuardTcpConnection* request, ::appguard::AppGuardTcpResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_HandleTcpConnection_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::appguard::AppGuardTcpResponse>* AppGuard::Stub::PrepareAsyncHandleTcpConnectionRaw(::grpc::ClientContext* context, const ::appguard::AppGuardTcpConnection& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::appguard::AppGuardTcpResponse, ::appguard::AppGuardTcpConnection, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_HandleTcpConnection_, context, request);
}

::grpc::ClientAsyncResponseReader< ::appguard::AppGuardTcpResponse>* AppGuard::Stub::AsyncHandleTcpConnectionRaw(::grpc::ClientContext* context, const ::appguard::AppGuardTcpConnection& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncHandleTcpConnectionRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status AppGuard::Stub::HandleHttpRequest(::grpc::ClientContext* context, const ::appguard::AppGuardHttpRequest& request, ::appguard::AppGuardResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::appguard::AppGuardHttpRequest, ::appguard::AppGuardResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_HandleHttpRequest_, context, request, response);
}

void AppGuard::Stub::async::HandleHttpRequest(::grpc::ClientContext* context, const ::appguard::AppGuardHttpRequest* request, ::appguard::AppGuardResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::appguard::AppGuardHttpRequest, ::appguard::AppGuardResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_HandleHttpRequest_, context, request, response, std::move(f));
}

void AppGuard::Stub::async::HandleHttpRequest(::grpc::ClientContext* context, const ::appguard::AppGuardHttpRequest* request, ::appguard::AppGuardResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_HandleHttpRequest_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::appguard::AppGuardResponse>* AppGuard::Stub::PrepareAsyncHandleHttpRequestRaw(::grpc::ClientContext* context, const ::appguard::AppGuardHttpRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::appguard::AppGuardResponse, ::appguard::AppGuardHttpRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_HandleHttpRequest_, context, request);
}

::grpc::ClientAsyncResponseReader< ::appguard::AppGuardResponse>* AppGuard::Stub::AsyncHandleHttpRequestRaw(::grpc::ClientContext* context, const ::appguard::AppGuardHttpRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncHandleHttpRequestRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status AppGuard::Stub::HandleHttpResponse(::grpc::ClientContext* context, const ::appguard::AppGuardHttpResponse& request, ::appguard::AppGuardResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::appguard::AppGuardHttpResponse, ::appguard::AppGuardResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_HandleHttpResponse_, context, request, response);
}

void AppGuard::Stub::async::HandleHttpResponse(::grpc::ClientContext* context, const ::appguard::AppGuardHttpResponse* request, ::appguard::AppGuardResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::appguard::AppGuardHttpResponse, ::appguard::AppGuardResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_HandleHttpResponse_, context, request, response, std::move(f));
}

void AppGuard::Stub::async::HandleHttpResponse(::grpc::ClientContext* context, const ::appguard::AppGuardHttpResponse* request, ::appguard::AppGuardResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_HandleHttpResponse_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::appguard::AppGuardResponse>* AppGuard::Stub::PrepareAsyncHandleHttpResponseRaw(::grpc::ClientContext* context, const ::appguard::AppGuardHttpResponse& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::appguard::AppGuardResponse, ::appguard::AppGuardHttpResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_HandleHttpResponse_, context, request);
}

::grpc::ClientAsyncResponseReader< ::appguard::AppGuardResponse>* AppGuard::Stub::AsyncHandleHttpResponseRaw(::grpc::ClientContext* context, const ::appguard::AppGuardHttpResponse& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncHandleHttpResponseRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status AppGuard::Stub::HandleSmtpRequest(::grpc::ClientContext* context, const ::appguard::AppGuardSmtpRequest& request, ::appguard::AppGuardResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::appguard::AppGuardSmtpRequest, ::appguard::AppGuardResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_HandleSmtpRequest_, context, request, response);
}

void AppGuard::Stub::async::HandleSmtpRequest(::grpc::ClientContext* context, const ::appguard::AppGuardSmtpRequest* request, ::appguard::AppGuardResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::appguard::AppGuardSmtpRequest, ::appguard::AppGuardResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_HandleSmtpRequest_, context, request, response, std::move(f));
}

void AppGuard::Stub::async::HandleSmtpRequest(::grpc::ClientContext* context, const ::appguard::AppGuardSmtpRequest* request, ::appguard::AppGuardResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_HandleSmtpRequest_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::appguard::AppGuardResponse>* AppGuard::Stub::PrepareAsyncHandleSmtpRequestRaw(::grpc::ClientContext* context, const ::appguard::AppGuardSmtpRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::appguard::AppGuardResponse, ::appguard::AppGuardSmtpRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_HandleSmtpRequest_, context, request);
}

::grpc::ClientAsyncResponseReader< ::appguard::AppGuardResponse>* AppGuard::Stub::AsyncHandleSmtpRequestRaw(::grpc::ClientContext* context, const ::appguard::AppGuardSmtpRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncHandleSmtpRequestRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status AppGuard::Stub::HandleSmtpResponse(::grpc::ClientContext* context, const ::appguard::AppGuardSmtpResponse& request, ::appguard::AppGuardResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::appguard::AppGuardSmtpResponse, ::appguard::AppGuardResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_HandleSmtpResponse_, context, request, response);
}

void AppGuard::Stub::async::HandleSmtpResponse(::grpc::ClientContext* context, const ::appguard::AppGuardSmtpResponse* request, ::appguard::AppGuardResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::appguard::AppGuardSmtpResponse, ::appguard::AppGuardResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_HandleSmtpResponse_, context, request, response, std::move(f));
}

void AppGuard::Stub::async::HandleSmtpResponse(::grpc::ClientContext* context, const ::appguard::AppGuardSmtpResponse* request, ::appguard::AppGuardResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_HandleSmtpResponse_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::appguard::AppGuardResponse>* AppGuard::Stub::PrepareAsyncHandleSmtpResponseRaw(::grpc::ClientContext* context, const ::appguard::AppGuardSmtpResponse& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::appguard::AppGuardResponse, ::appguard::AppGuardSmtpResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_HandleSmtpResponse_, context, request);
}

::grpc::ClientAsyncResponseReader< ::appguard::AppGuardResponse>* AppGuard::Stub::AsyncHandleSmtpResponseRaw(::grpc::ClientContext* context, const ::appguard::AppGuardSmtpResponse& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncHandleSmtpResponseRaw(context, request, cq);
  result->StartCall();
  return result;
}

AppGuard::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      AppGuard_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< AppGuard::Service, ::appguard::AppGuardTcpConnection, ::appguard::AppGuardTcpResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](AppGuard::Service* service,
             ::grpc::ServerContext* ctx,
             const ::appguard::AppGuardTcpConnection* req,
             ::appguard::AppGuardTcpResponse* resp) {
               return service->HandleTcpConnection(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      AppGuard_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< AppGuard::Service, ::appguard::AppGuardHttpRequest, ::appguard::AppGuardResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](AppGuard::Service* service,
             ::grpc::ServerContext* ctx,
             const ::appguard::AppGuardHttpRequest* req,
             ::appguard::AppGuardResponse* resp) {
               return service->HandleHttpRequest(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      AppGuard_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< AppGuard::Service, ::appguard::AppGuardHttpResponse, ::appguard::AppGuardResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](AppGuard::Service* service,
             ::grpc::ServerContext* ctx,
             const ::appguard::AppGuardHttpResponse* req,
             ::appguard::AppGuardResponse* resp) {
               return service->HandleHttpResponse(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      AppGuard_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< AppGuard::Service, ::appguard::AppGuardSmtpRequest, ::appguard::AppGuardResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](AppGuard::Service* service,
             ::grpc::ServerContext* ctx,
             const ::appguard::AppGuardSmtpRequest* req,
             ::appguard::AppGuardResponse* resp) {
               return service->HandleSmtpRequest(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      AppGuard_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< AppGuard::Service, ::appguard::AppGuardSmtpResponse, ::appguard::AppGuardResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](AppGuard::Service* service,
             ::grpc::ServerContext* ctx,
             const ::appguard::AppGuardSmtpResponse* req,
             ::appguard::AppGuardResponse* resp) {
               return service->HandleSmtpResponse(ctx, req, resp);
             }, this)));
}

AppGuard::Service::~Service() {
}

::grpc::Status AppGuard::Service::HandleTcpConnection(::grpc::ServerContext* context, const ::appguard::AppGuardTcpConnection* request, ::appguard::AppGuardTcpResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status AppGuard::Service::HandleHttpRequest(::grpc::ServerContext* context, const ::appguard::AppGuardHttpRequest* request, ::appguard::AppGuardResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status AppGuard::Service::HandleHttpResponse(::grpc::ServerContext* context, const ::appguard::AppGuardHttpResponse* request, ::appguard::AppGuardResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status AppGuard::Service::HandleSmtpRequest(::grpc::ServerContext* context, const ::appguard::AppGuardSmtpRequest* request, ::appguard::AppGuardResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status AppGuard::Service::HandleSmtpResponse(::grpc::ServerContext* context, const ::appguard::AppGuardSmtpResponse* request, ::appguard::AppGuardResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace appguard

