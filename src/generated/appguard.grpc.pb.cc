// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: appguard.proto

#include "appguard.pb.h"
#include "appguard.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace appguard {

static const char* AppGuard_method_names[] = {
  "/appguard.AppGuard/ControlChannel",
  "/appguard.AppGuard/HandleLogs",
  "/appguard.AppGuard/HandleTcpConnection",
  "/appguard.AppGuard/HandleHttpRequest",
  "/appguard.AppGuard/HandleHttpResponse",
  "/appguard.AppGuard/HandleSmtpRequest",
  "/appguard.AppGuard/HandleSmtpResponse",
  "/appguard.AppGuard/FirewallDefaultsRequest",
};

std::unique_ptr< AppGuard::Stub> AppGuard::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< AppGuard::Stub> stub(new AppGuard::Stub(channel));
  return stub;
}

AppGuard::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_ControlChannel_(AppGuard_method_names[0], ::grpc::internal::RpcMethod::BIDI_STREAMING, channel)
  , rpcmethod_HandleLogs_(AppGuard_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_HandleTcpConnection_(AppGuard_method_names[2], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_HandleHttpRequest_(AppGuard_method_names[3], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_HandleHttpResponse_(AppGuard_method_names[4], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_HandleSmtpRequest_(AppGuard_method_names[5], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_HandleSmtpResponse_(AppGuard_method_names[6], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_FirewallDefaultsRequest_(AppGuard_method_names[7], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::ClientReaderWriter< ::appguard_commands::ClientMessage, ::appguard_commands::ServerMessage>* AppGuard::Stub::ControlChannelRaw(::grpc::ClientContext* context) {
  return ::grpc_impl::internal::ClientReaderWriterFactory< ::appguard_commands::ClientMessage, ::appguard_commands::ServerMessage>::Create(channel_.get(), rpcmethod_ControlChannel_, context);
}

void AppGuard::Stub::experimental_async::ControlChannel(::grpc::ClientContext* context, ::grpc::experimental::ClientBidiReactor< ::appguard_commands::ClientMessage,::appguard_commands::ServerMessage>* reactor) {
  ::grpc_impl::internal::ClientCallbackReaderWriterFactory< ::appguard_commands::ClientMessage,::appguard_commands::ServerMessage>::Create(stub_->channel_.get(), stub_->rpcmethod_ControlChannel_, context, reactor);
}

::grpc::ClientAsyncReaderWriter< ::appguard_commands::ClientMessage, ::appguard_commands::ServerMessage>* AppGuard::Stub::AsyncControlChannelRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc_impl::internal::ClientAsyncReaderWriterFactory< ::appguard_commands::ClientMessage, ::appguard_commands::ServerMessage>::Create(channel_.get(), cq, rpcmethod_ControlChannel_, context, true, tag);
}

::grpc::ClientAsyncReaderWriter< ::appguard_commands::ClientMessage, ::appguard_commands::ServerMessage>* AppGuard::Stub::PrepareAsyncControlChannelRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncReaderWriterFactory< ::appguard_commands::ClientMessage, ::appguard_commands::ServerMessage>::Create(channel_.get(), cq, rpcmethod_ControlChannel_, context, false, nullptr);
}

::grpc::Status AppGuard::Stub::HandleLogs(::grpc::ClientContext* context, const ::appguard::Logs& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_HandleLogs_, context, request, response);
}

void AppGuard::Stub::experimental_async::HandleLogs(::grpc::ClientContext* context, const ::appguard::Logs* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_HandleLogs_, context, request, response, std::move(f));
}

void AppGuard::Stub::experimental_async::HandleLogs(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_HandleLogs_, context, request, response, std::move(f));
}

void AppGuard::Stub::experimental_async::HandleLogs(::grpc::ClientContext* context, const ::appguard::Logs* request, ::google::protobuf::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_HandleLogs_, context, request, response, reactor);
}

void AppGuard::Stub::experimental_async::HandleLogs(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::google::protobuf::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_HandleLogs_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* AppGuard::Stub::AsyncHandleLogsRaw(::grpc::ClientContext* context, const ::appguard::Logs& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::google::protobuf::Empty>::Create(channel_.get(), cq, rpcmethod_HandleLogs_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* AppGuard::Stub::PrepareAsyncHandleLogsRaw(::grpc::ClientContext* context, const ::appguard::Logs& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::google::protobuf::Empty>::Create(channel_.get(), cq, rpcmethod_HandleLogs_, context, request, false);
}

::grpc::Status AppGuard::Stub::HandleTcpConnection(::grpc::ClientContext* context, const ::appguard::AppGuardTcpConnection& request, ::appguard::AppGuardTcpResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_HandleTcpConnection_, context, request, response);
}

void AppGuard::Stub::experimental_async::HandleTcpConnection(::grpc::ClientContext* context, const ::appguard::AppGuardTcpConnection* request, ::appguard::AppGuardTcpResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_HandleTcpConnection_, context, request, response, std::move(f));
}

void AppGuard::Stub::experimental_async::HandleTcpConnection(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::appguard::AppGuardTcpResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_HandleTcpConnection_, context, request, response, std::move(f));
}

void AppGuard::Stub::experimental_async::HandleTcpConnection(::grpc::ClientContext* context, const ::appguard::AppGuardTcpConnection* request, ::appguard::AppGuardTcpResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_HandleTcpConnection_, context, request, response, reactor);
}

void AppGuard::Stub::experimental_async::HandleTcpConnection(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::appguard::AppGuardTcpResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_HandleTcpConnection_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::appguard::AppGuardTcpResponse>* AppGuard::Stub::AsyncHandleTcpConnectionRaw(::grpc::ClientContext* context, const ::appguard::AppGuardTcpConnection& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::appguard::AppGuardTcpResponse>::Create(channel_.get(), cq, rpcmethod_HandleTcpConnection_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::appguard::AppGuardTcpResponse>* AppGuard::Stub::PrepareAsyncHandleTcpConnectionRaw(::grpc::ClientContext* context, const ::appguard::AppGuardTcpConnection& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::appguard::AppGuardTcpResponse>::Create(channel_.get(), cq, rpcmethod_HandleTcpConnection_, context, request, false);
}

::grpc::Status AppGuard::Stub::HandleHttpRequest(::grpc::ClientContext* context, const ::appguard::AppGuardHttpRequest& request, ::appguard::AppGuardResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_HandleHttpRequest_, context, request, response);
}

void AppGuard::Stub::experimental_async::HandleHttpRequest(::grpc::ClientContext* context, const ::appguard::AppGuardHttpRequest* request, ::appguard::AppGuardResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_HandleHttpRequest_, context, request, response, std::move(f));
}

void AppGuard::Stub::experimental_async::HandleHttpRequest(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::appguard::AppGuardResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_HandleHttpRequest_, context, request, response, std::move(f));
}

void AppGuard::Stub::experimental_async::HandleHttpRequest(::grpc::ClientContext* context, const ::appguard::AppGuardHttpRequest* request, ::appguard::AppGuardResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_HandleHttpRequest_, context, request, response, reactor);
}

void AppGuard::Stub::experimental_async::HandleHttpRequest(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::appguard::AppGuardResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_HandleHttpRequest_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::appguard::AppGuardResponse>* AppGuard::Stub::AsyncHandleHttpRequestRaw(::grpc::ClientContext* context, const ::appguard::AppGuardHttpRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::appguard::AppGuardResponse>::Create(channel_.get(), cq, rpcmethod_HandleHttpRequest_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::appguard::AppGuardResponse>* AppGuard::Stub::PrepareAsyncHandleHttpRequestRaw(::grpc::ClientContext* context, const ::appguard::AppGuardHttpRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::appguard::AppGuardResponse>::Create(channel_.get(), cq, rpcmethod_HandleHttpRequest_, context, request, false);
}

::grpc::Status AppGuard::Stub::HandleHttpResponse(::grpc::ClientContext* context, const ::appguard::AppGuardHttpResponse& request, ::appguard::AppGuardResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_HandleHttpResponse_, context, request, response);
}

void AppGuard::Stub::experimental_async::HandleHttpResponse(::grpc::ClientContext* context, const ::appguard::AppGuardHttpResponse* request, ::appguard::AppGuardResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_HandleHttpResponse_, context, request, response, std::move(f));
}

void AppGuard::Stub::experimental_async::HandleHttpResponse(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::appguard::AppGuardResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_HandleHttpResponse_, context, request, response, std::move(f));
}

void AppGuard::Stub::experimental_async::HandleHttpResponse(::grpc::ClientContext* context, const ::appguard::AppGuardHttpResponse* request, ::appguard::AppGuardResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_HandleHttpResponse_, context, request, response, reactor);
}

void AppGuard::Stub::experimental_async::HandleHttpResponse(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::appguard::AppGuardResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_HandleHttpResponse_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::appguard::AppGuardResponse>* AppGuard::Stub::AsyncHandleHttpResponseRaw(::grpc::ClientContext* context, const ::appguard::AppGuardHttpResponse& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::appguard::AppGuardResponse>::Create(channel_.get(), cq, rpcmethod_HandleHttpResponse_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::appguard::AppGuardResponse>* AppGuard::Stub::PrepareAsyncHandleHttpResponseRaw(::grpc::ClientContext* context, const ::appguard::AppGuardHttpResponse& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::appguard::AppGuardResponse>::Create(channel_.get(), cq, rpcmethod_HandleHttpResponse_, context, request, false);
}

::grpc::Status AppGuard::Stub::HandleSmtpRequest(::grpc::ClientContext* context, const ::appguard::AppGuardSmtpRequest& request, ::appguard::AppGuardResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_HandleSmtpRequest_, context, request, response);
}

void AppGuard::Stub::experimental_async::HandleSmtpRequest(::grpc::ClientContext* context, const ::appguard::AppGuardSmtpRequest* request, ::appguard::AppGuardResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_HandleSmtpRequest_, context, request, response, std::move(f));
}

void AppGuard::Stub::experimental_async::HandleSmtpRequest(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::appguard::AppGuardResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_HandleSmtpRequest_, context, request, response, std::move(f));
}

void AppGuard::Stub::experimental_async::HandleSmtpRequest(::grpc::ClientContext* context, const ::appguard::AppGuardSmtpRequest* request, ::appguard::AppGuardResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_HandleSmtpRequest_, context, request, response, reactor);
}

void AppGuard::Stub::experimental_async::HandleSmtpRequest(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::appguard::AppGuardResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_HandleSmtpRequest_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::appguard::AppGuardResponse>* AppGuard::Stub::AsyncHandleSmtpRequestRaw(::grpc::ClientContext* context, const ::appguard::AppGuardSmtpRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::appguard::AppGuardResponse>::Create(channel_.get(), cq, rpcmethod_HandleSmtpRequest_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::appguard::AppGuardResponse>* AppGuard::Stub::PrepareAsyncHandleSmtpRequestRaw(::grpc::ClientContext* context, const ::appguard::AppGuardSmtpRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::appguard::AppGuardResponse>::Create(channel_.get(), cq, rpcmethod_HandleSmtpRequest_, context, request, false);
}

::grpc::Status AppGuard::Stub::HandleSmtpResponse(::grpc::ClientContext* context, const ::appguard::AppGuardSmtpResponse& request, ::appguard::AppGuardResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_HandleSmtpResponse_, context, request, response);
}

void AppGuard::Stub::experimental_async::HandleSmtpResponse(::grpc::ClientContext* context, const ::appguard::AppGuardSmtpResponse* request, ::appguard::AppGuardResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_HandleSmtpResponse_, context, request, response, std::move(f));
}

void AppGuard::Stub::experimental_async::HandleSmtpResponse(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::appguard::AppGuardResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_HandleSmtpResponse_, context, request, response, std::move(f));
}

void AppGuard::Stub::experimental_async::HandleSmtpResponse(::grpc::ClientContext* context, const ::appguard::AppGuardSmtpResponse* request, ::appguard::AppGuardResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_HandleSmtpResponse_, context, request, response, reactor);
}

void AppGuard::Stub::experimental_async::HandleSmtpResponse(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::appguard::AppGuardResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_HandleSmtpResponse_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::appguard::AppGuardResponse>* AppGuard::Stub::AsyncHandleSmtpResponseRaw(::grpc::ClientContext* context, const ::appguard::AppGuardSmtpResponse& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::appguard::AppGuardResponse>::Create(channel_.get(), cq, rpcmethod_HandleSmtpResponse_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::appguard::AppGuardResponse>* AppGuard::Stub::PrepareAsyncHandleSmtpResponseRaw(::grpc::ClientContext* context, const ::appguard::AppGuardSmtpResponse& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::appguard::AppGuardResponse>::Create(channel_.get(), cq, rpcmethod_HandleSmtpResponse_, context, request, false);
}

::grpc::Status AppGuard::Stub::FirewallDefaultsRequest(::grpc::ClientContext* context, const ::appguard::Token& request, ::appguard_commands::FirewallDefaults* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_FirewallDefaultsRequest_, context, request, response);
}

void AppGuard::Stub::experimental_async::FirewallDefaultsRequest(::grpc::ClientContext* context, const ::appguard::Token* request, ::appguard_commands::FirewallDefaults* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_FirewallDefaultsRequest_, context, request, response, std::move(f));
}

void AppGuard::Stub::experimental_async::FirewallDefaultsRequest(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::appguard_commands::FirewallDefaults* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_FirewallDefaultsRequest_, context, request, response, std::move(f));
}

void AppGuard::Stub::experimental_async::FirewallDefaultsRequest(::grpc::ClientContext* context, const ::appguard::Token* request, ::appguard_commands::FirewallDefaults* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_FirewallDefaultsRequest_, context, request, response, reactor);
}

void AppGuard::Stub::experimental_async::FirewallDefaultsRequest(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::appguard_commands::FirewallDefaults* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_FirewallDefaultsRequest_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::appguard_commands::FirewallDefaults>* AppGuard::Stub::AsyncFirewallDefaultsRequestRaw(::grpc::ClientContext* context, const ::appguard::Token& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::appguard_commands::FirewallDefaults>::Create(channel_.get(), cq, rpcmethod_FirewallDefaultsRequest_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::appguard_commands::FirewallDefaults>* AppGuard::Stub::PrepareAsyncFirewallDefaultsRequestRaw(::grpc::ClientContext* context, const ::appguard::Token& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::appguard_commands::FirewallDefaults>::Create(channel_.get(), cq, rpcmethod_FirewallDefaultsRequest_, context, request, false);
}

AppGuard::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      AppGuard_method_names[0],
      ::grpc::internal::RpcMethod::BIDI_STREAMING,
      new ::grpc::internal::BidiStreamingHandler< AppGuard::Service, ::appguard_commands::ClientMessage, ::appguard_commands::ServerMessage>(
          [](AppGuard::Service* service,
             ::grpc_impl::ServerContext* ctx,
             ::grpc_impl::ServerReaderWriter<::appguard_commands::ServerMessage,
             ::appguard_commands::ClientMessage>* stream) {
               return service->ControlChannel(ctx, stream);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      AppGuard_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< AppGuard::Service, ::appguard::Logs, ::google::protobuf::Empty>(
          [](AppGuard::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::appguard::Logs* req,
             ::google::protobuf::Empty* resp) {
               return service->HandleLogs(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      AppGuard_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< AppGuard::Service, ::appguard::AppGuardTcpConnection, ::appguard::AppGuardTcpResponse>(
          [](AppGuard::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::appguard::AppGuardTcpConnection* req,
             ::appguard::AppGuardTcpResponse* resp) {
               return service->HandleTcpConnection(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      AppGuard_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< AppGuard::Service, ::appguard::AppGuardHttpRequest, ::appguard::AppGuardResponse>(
          [](AppGuard::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::appguard::AppGuardHttpRequest* req,
             ::appguard::AppGuardResponse* resp) {
               return service->HandleHttpRequest(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      AppGuard_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< AppGuard::Service, ::appguard::AppGuardHttpResponse, ::appguard::AppGuardResponse>(
          [](AppGuard::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::appguard::AppGuardHttpResponse* req,
             ::appguard::AppGuardResponse* resp) {
               return service->HandleHttpResponse(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      AppGuard_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< AppGuard::Service, ::appguard::AppGuardSmtpRequest, ::appguard::AppGuardResponse>(
          [](AppGuard::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::appguard::AppGuardSmtpRequest* req,
             ::appguard::AppGuardResponse* resp) {
               return service->HandleSmtpRequest(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      AppGuard_method_names[6],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< AppGuard::Service, ::appguard::AppGuardSmtpResponse, ::appguard::AppGuardResponse>(
          [](AppGuard::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::appguard::AppGuardSmtpResponse* req,
             ::appguard::AppGuardResponse* resp) {
               return service->HandleSmtpResponse(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      AppGuard_method_names[7],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< AppGuard::Service, ::appguard::Token, ::appguard_commands::FirewallDefaults>(
          [](AppGuard::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::appguard::Token* req,
             ::appguard_commands::FirewallDefaults* resp) {
               return service->FirewallDefaultsRequest(ctx, req, resp);
             }, this)));
}

AppGuard::Service::~Service() {
}

::grpc::Status AppGuard::Service::ControlChannel(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::appguard_commands::ServerMessage, ::appguard_commands::ClientMessage>* stream) {
  (void) context;
  (void) stream;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status AppGuard::Service::HandleLogs(::grpc::ServerContext* context, const ::appguard::Logs* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status AppGuard::Service::HandleTcpConnection(::grpc::ServerContext* context, const ::appguard::AppGuardTcpConnection* request, ::appguard::AppGuardTcpResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status AppGuard::Service::HandleHttpRequest(::grpc::ServerContext* context, const ::appguard::AppGuardHttpRequest* request, ::appguard::AppGuardResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status AppGuard::Service::HandleHttpResponse(::grpc::ServerContext* context, const ::appguard::AppGuardHttpResponse* request, ::appguard::AppGuardResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status AppGuard::Service::HandleSmtpRequest(::grpc::ServerContext* context, const ::appguard::AppGuardSmtpRequest* request, ::appguard::AppGuardResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status AppGuard::Service::HandleSmtpResponse(::grpc::ServerContext* context, const ::appguard::AppGuardSmtpResponse* request, ::appguard::AppGuardResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status AppGuard::Service::FirewallDefaultsRequest(::grpc::ServerContext* context, const ::appguard::Token* request, ::appguard_commands::FirewallDefaults* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace appguard

