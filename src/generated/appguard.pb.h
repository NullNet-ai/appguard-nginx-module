// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: appguard.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_appguard_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_appguard_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/empty.pb.h>
#include "commands.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_appguard_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_appguard_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[16]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_appguard_2eproto;
namespace appguard {
class AppGuardHttpRequest;
class AppGuardHttpRequestDefaultTypeInternal;
extern AppGuardHttpRequestDefaultTypeInternal _AppGuardHttpRequest_default_instance_;
class AppGuardHttpRequest_HeadersEntry_DoNotUse;
class AppGuardHttpRequest_HeadersEntry_DoNotUseDefaultTypeInternal;
extern AppGuardHttpRequest_HeadersEntry_DoNotUseDefaultTypeInternal _AppGuardHttpRequest_HeadersEntry_DoNotUse_default_instance_;
class AppGuardHttpRequest_QueryEntry_DoNotUse;
class AppGuardHttpRequest_QueryEntry_DoNotUseDefaultTypeInternal;
extern AppGuardHttpRequest_QueryEntry_DoNotUseDefaultTypeInternal _AppGuardHttpRequest_QueryEntry_DoNotUse_default_instance_;
class AppGuardHttpResponse;
class AppGuardHttpResponseDefaultTypeInternal;
extern AppGuardHttpResponseDefaultTypeInternal _AppGuardHttpResponse_default_instance_;
class AppGuardHttpResponse_HeadersEntry_DoNotUse;
class AppGuardHttpResponse_HeadersEntry_DoNotUseDefaultTypeInternal;
extern AppGuardHttpResponse_HeadersEntry_DoNotUseDefaultTypeInternal _AppGuardHttpResponse_HeadersEntry_DoNotUse_default_instance_;
class AppGuardIpInfo;
class AppGuardIpInfoDefaultTypeInternal;
extern AppGuardIpInfoDefaultTypeInternal _AppGuardIpInfo_default_instance_;
class AppGuardResponse;
class AppGuardResponseDefaultTypeInternal;
extern AppGuardResponseDefaultTypeInternal _AppGuardResponse_default_instance_;
class AppGuardSmtpRequest;
class AppGuardSmtpRequestDefaultTypeInternal;
extern AppGuardSmtpRequestDefaultTypeInternal _AppGuardSmtpRequest_default_instance_;
class AppGuardSmtpRequest_HeadersEntry_DoNotUse;
class AppGuardSmtpRequest_HeadersEntry_DoNotUseDefaultTypeInternal;
extern AppGuardSmtpRequest_HeadersEntry_DoNotUseDefaultTypeInternal _AppGuardSmtpRequest_HeadersEntry_DoNotUse_default_instance_;
class AppGuardSmtpResponse;
class AppGuardSmtpResponseDefaultTypeInternal;
extern AppGuardSmtpResponseDefaultTypeInternal _AppGuardSmtpResponse_default_instance_;
class AppGuardTcpConnection;
class AppGuardTcpConnectionDefaultTypeInternal;
extern AppGuardTcpConnectionDefaultTypeInternal _AppGuardTcpConnection_default_instance_;
class AppGuardTcpInfo;
class AppGuardTcpInfoDefaultTypeInternal;
extern AppGuardTcpInfoDefaultTypeInternal _AppGuardTcpInfo_default_instance_;
class AppGuardTcpResponse;
class AppGuardTcpResponseDefaultTypeInternal;
extern AppGuardTcpResponseDefaultTypeInternal _AppGuardTcpResponse_default_instance_;
class Log;
class LogDefaultTypeInternal;
extern LogDefaultTypeInternal _Log_default_instance_;
class Logs;
class LogsDefaultTypeInternal;
extern LogsDefaultTypeInternal _Logs_default_instance_;
class Token;
class TokenDefaultTypeInternal;
extern TokenDefaultTypeInternal _Token_default_instance_;
}  // namespace appguard
PROTOBUF_NAMESPACE_OPEN
template<> ::appguard::AppGuardHttpRequest* Arena::CreateMaybeMessage<::appguard::AppGuardHttpRequest>(Arena*);
template<> ::appguard::AppGuardHttpRequest_HeadersEntry_DoNotUse* Arena::CreateMaybeMessage<::appguard::AppGuardHttpRequest_HeadersEntry_DoNotUse>(Arena*);
template<> ::appguard::AppGuardHttpRequest_QueryEntry_DoNotUse* Arena::CreateMaybeMessage<::appguard::AppGuardHttpRequest_QueryEntry_DoNotUse>(Arena*);
template<> ::appguard::AppGuardHttpResponse* Arena::CreateMaybeMessage<::appguard::AppGuardHttpResponse>(Arena*);
template<> ::appguard::AppGuardHttpResponse_HeadersEntry_DoNotUse* Arena::CreateMaybeMessage<::appguard::AppGuardHttpResponse_HeadersEntry_DoNotUse>(Arena*);
template<> ::appguard::AppGuardIpInfo* Arena::CreateMaybeMessage<::appguard::AppGuardIpInfo>(Arena*);
template<> ::appguard::AppGuardResponse* Arena::CreateMaybeMessage<::appguard::AppGuardResponse>(Arena*);
template<> ::appguard::AppGuardSmtpRequest* Arena::CreateMaybeMessage<::appguard::AppGuardSmtpRequest>(Arena*);
template<> ::appguard::AppGuardSmtpRequest_HeadersEntry_DoNotUse* Arena::CreateMaybeMessage<::appguard::AppGuardSmtpRequest_HeadersEntry_DoNotUse>(Arena*);
template<> ::appguard::AppGuardSmtpResponse* Arena::CreateMaybeMessage<::appguard::AppGuardSmtpResponse>(Arena*);
template<> ::appguard::AppGuardTcpConnection* Arena::CreateMaybeMessage<::appguard::AppGuardTcpConnection>(Arena*);
template<> ::appguard::AppGuardTcpInfo* Arena::CreateMaybeMessage<::appguard::AppGuardTcpInfo>(Arena*);
template<> ::appguard::AppGuardTcpResponse* Arena::CreateMaybeMessage<::appguard::AppGuardTcpResponse>(Arena*);
template<> ::appguard::Log* Arena::CreateMaybeMessage<::appguard::Log>(Arena*);
template<> ::appguard::Logs* Arena::CreateMaybeMessage<::appguard::Logs>(Arena*);
template<> ::appguard::Token* Arena::CreateMaybeMessage<::appguard::Token>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace appguard {

// ===================================================================

class Logs PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:appguard.Logs) */ {
 public:
  inline Logs() : Logs(nullptr) {};
  virtual ~Logs();

  Logs(const Logs& from);
  Logs(Logs&& from) noexcept
    : Logs() {
    *this = ::std::move(from);
  }

  inline Logs& operator=(const Logs& from) {
    CopyFrom(from);
    return *this;
  }
  inline Logs& operator=(Logs&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Logs& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Logs* internal_default_instance() {
    return reinterpret_cast<const Logs*>(
               &_Logs_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Logs& a, Logs& b) {
    a.Swap(&b);
  }
  inline void Swap(Logs* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Logs* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Logs* New() const final {
    return CreateMaybeMessage<Logs>(nullptr);
  }

  Logs* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Logs>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Logs& from);
  void MergeFrom(const Logs& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Logs* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "appguard.Logs";
  }
  protected:
  explicit Logs(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_appguard_2eproto);
    return ::descriptor_table_appguard_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLogsFieldNumber = 3,
    kTokenFieldNumber = 1,
  };
  // repeated .appguard.Log logs = 3;
  int logs_size() const;
  private:
  int _internal_logs_size() const;
  public:
  void clear_logs();
  ::appguard::Log* mutable_logs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::appguard::Log >*
      mutable_logs();
  private:
  const ::appguard::Log& _internal_logs(int index) const;
  ::appguard::Log* _internal_add_logs();
  public:
  const ::appguard::Log& logs(int index) const;
  ::appguard::Log* add_logs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::appguard::Log >&
      logs() const;

  // string token = 1;
  void clear_token();
  const std::string& token() const;
  void set_token(const std::string& value);
  void set_token(std::string&& value);
  void set_token(const char* value);
  void set_token(const char* value, size_t size);
  std::string* mutable_token();
  std::string* release_token();
  void set_allocated_token(std::string* token);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_token();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_token(
      std::string* token);
  private:
  const std::string& _internal_token() const;
  void _internal_set_token(const std::string& value);
  std::string* _internal_mutable_token();
  public:

  // @@protoc_insertion_point(class_scope:appguard.Logs)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::appguard::Log > logs_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr token_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_appguard_2eproto;
};
// -------------------------------------------------------------------

class Log PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:appguard.Log) */ {
 public:
  inline Log() : Log(nullptr) {};
  virtual ~Log();

  Log(const Log& from);
  Log(Log&& from) noexcept
    : Log() {
    *this = ::std::move(from);
  }

  inline Log& operator=(const Log& from) {
    CopyFrom(from);
    return *this;
  }
  inline Log& operator=(Log&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Log& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Log* internal_default_instance() {
    return reinterpret_cast<const Log*>(
               &_Log_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Log& a, Log& b) {
    a.Swap(&b);
  }
  inline void Swap(Log* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Log* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Log* New() const final {
    return CreateMaybeMessage<Log>(nullptr);
  }

  Log* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Log>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Log& from);
  void MergeFrom(const Log& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Log* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "appguard.Log";
  }
  protected:
  explicit Log(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_appguard_2eproto);
    return ::descriptor_table_appguard_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTimestampFieldNumber = 1,
    kLevelFieldNumber = 2,
    kMessageFieldNumber = 3,
  };
  // string timestamp = 1;
  void clear_timestamp();
  const std::string& timestamp() const;
  void set_timestamp(const std::string& value);
  void set_timestamp(std::string&& value);
  void set_timestamp(const char* value);
  void set_timestamp(const char* value, size_t size);
  std::string* mutable_timestamp();
  std::string* release_timestamp();
  void set_allocated_timestamp(std::string* timestamp);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_timestamp();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_timestamp(
      std::string* timestamp);
  private:
  const std::string& _internal_timestamp() const;
  void _internal_set_timestamp(const std::string& value);
  std::string* _internal_mutable_timestamp();
  public:

  // string level = 2;
  void clear_level();
  const std::string& level() const;
  void set_level(const std::string& value);
  void set_level(std::string&& value);
  void set_level(const char* value);
  void set_level(const char* value, size_t size);
  std::string* mutable_level();
  std::string* release_level();
  void set_allocated_level(std::string* level);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_level();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_level(
      std::string* level);
  private:
  const std::string& _internal_level() const;
  void _internal_set_level(const std::string& value);
  std::string* _internal_mutable_level();
  public:

  // string message = 3;
  void clear_message();
  const std::string& message() const;
  void set_message(const std::string& value);
  void set_message(std::string&& value);
  void set_message(const char* value);
  void set_message(const char* value, size_t size);
  std::string* mutable_message();
  std::string* release_message();
  void set_allocated_message(std::string* message);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_message();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_message(
      std::string* message);
  private:
  const std::string& _internal_message() const;
  void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // @@protoc_insertion_point(class_scope:appguard.Log)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr timestamp_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr level_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_appguard_2eproto;
};
// -------------------------------------------------------------------

class AppGuardTcpConnection PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:appguard.AppGuardTcpConnection) */ {
 public:
  inline AppGuardTcpConnection() : AppGuardTcpConnection(nullptr) {};
  virtual ~AppGuardTcpConnection();

  AppGuardTcpConnection(const AppGuardTcpConnection& from);
  AppGuardTcpConnection(AppGuardTcpConnection&& from) noexcept
    : AppGuardTcpConnection() {
    *this = ::std::move(from);
  }

  inline AppGuardTcpConnection& operator=(const AppGuardTcpConnection& from) {
    CopyFrom(from);
    return *this;
  }
  inline AppGuardTcpConnection& operator=(AppGuardTcpConnection&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AppGuardTcpConnection& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AppGuardTcpConnection* internal_default_instance() {
    return reinterpret_cast<const AppGuardTcpConnection*>(
               &_AppGuardTcpConnection_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(AppGuardTcpConnection& a, AppGuardTcpConnection& b) {
    a.Swap(&b);
  }
  inline void Swap(AppGuardTcpConnection* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AppGuardTcpConnection* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AppGuardTcpConnection* New() const final {
    return CreateMaybeMessage<AppGuardTcpConnection>(nullptr);
  }

  AppGuardTcpConnection* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AppGuardTcpConnection>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AppGuardTcpConnection& from);
  void MergeFrom(const AppGuardTcpConnection& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AppGuardTcpConnection* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "appguard.AppGuardTcpConnection";
  }
  protected:
  explicit AppGuardTcpConnection(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_appguard_2eproto);
    return ::descriptor_table_appguard_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTokenFieldNumber = 1,
    kSourceIpFieldNumber = 2,
    kDestinationIpFieldNumber = 4,
    kProtocolFieldNumber = 6,
    kSourcePortFieldNumber = 3,
    kDestinationPortFieldNumber = 5,
  };
  // string token = 1;
  void clear_token();
  const std::string& token() const;
  void set_token(const std::string& value);
  void set_token(std::string&& value);
  void set_token(const char* value);
  void set_token(const char* value, size_t size);
  std::string* mutable_token();
  std::string* release_token();
  void set_allocated_token(std::string* token);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_token();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_token(
      std::string* token);
  private:
  const std::string& _internal_token() const;
  void _internal_set_token(const std::string& value);
  std::string* _internal_mutable_token();
  public:

  // string source_ip = 2;
  bool has_source_ip() const;
  private:
  bool _internal_has_source_ip() const;
  public:
  void clear_source_ip();
  const std::string& source_ip() const;
  void set_source_ip(const std::string& value);
  void set_source_ip(std::string&& value);
  void set_source_ip(const char* value);
  void set_source_ip(const char* value, size_t size);
  std::string* mutable_source_ip();
  std::string* release_source_ip();
  void set_allocated_source_ip(std::string* source_ip);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_source_ip();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_source_ip(
      std::string* source_ip);
  private:
  const std::string& _internal_source_ip() const;
  void _internal_set_source_ip(const std::string& value);
  std::string* _internal_mutable_source_ip();
  public:

  // string destination_ip = 4;
  bool has_destination_ip() const;
  private:
  bool _internal_has_destination_ip() const;
  public:
  void clear_destination_ip();
  const std::string& destination_ip() const;
  void set_destination_ip(const std::string& value);
  void set_destination_ip(std::string&& value);
  void set_destination_ip(const char* value);
  void set_destination_ip(const char* value, size_t size);
  std::string* mutable_destination_ip();
  std::string* release_destination_ip();
  void set_allocated_destination_ip(std::string* destination_ip);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_destination_ip();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_destination_ip(
      std::string* destination_ip);
  private:
  const std::string& _internal_destination_ip() const;
  void _internal_set_destination_ip(const std::string& value);
  std::string* _internal_mutable_destination_ip();
  public:

  // string protocol = 6;
  void clear_protocol();
  const std::string& protocol() const;
  void set_protocol(const std::string& value);
  void set_protocol(std::string&& value);
  void set_protocol(const char* value);
  void set_protocol(const char* value, size_t size);
  std::string* mutable_protocol();
  std::string* release_protocol();
  void set_allocated_protocol(std::string* protocol);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_protocol();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_protocol(
      std::string* protocol);
  private:
  const std::string& _internal_protocol() const;
  void _internal_set_protocol(const std::string& value);
  std::string* _internal_mutable_protocol();
  public:

  // uint32 source_port = 3;
  bool has_source_port() const;
  private:
  bool _internal_has_source_port() const;
  public:
  void clear_source_port();
  ::PROTOBUF_NAMESPACE_ID::uint32 source_port() const;
  void set_source_port(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_source_port() const;
  void _internal_set_source_port(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 destination_port = 5;
  bool has_destination_port() const;
  private:
  bool _internal_has_destination_port() const;
  public:
  void clear_destination_port();
  ::PROTOBUF_NAMESPACE_ID::uint32 destination_port() const;
  void set_destination_port(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_destination_port() const;
  void _internal_set_destination_port(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:appguard.AppGuardTcpConnection)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr token_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr source_ip_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr destination_ip_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr protocol_;
  ::PROTOBUF_NAMESPACE_ID::uint32 source_port_;
  ::PROTOBUF_NAMESPACE_ID::uint32 destination_port_;
  friend struct ::TableStruct_appguard_2eproto;
};
// -------------------------------------------------------------------

class AppGuardIpInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:appguard.AppGuardIpInfo) */ {
 public:
  inline AppGuardIpInfo() : AppGuardIpInfo(nullptr) {};
  virtual ~AppGuardIpInfo();

  AppGuardIpInfo(const AppGuardIpInfo& from);
  AppGuardIpInfo(AppGuardIpInfo&& from) noexcept
    : AppGuardIpInfo() {
    *this = ::std::move(from);
  }

  inline AppGuardIpInfo& operator=(const AppGuardIpInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline AppGuardIpInfo& operator=(AppGuardIpInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AppGuardIpInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AppGuardIpInfo* internal_default_instance() {
    return reinterpret_cast<const AppGuardIpInfo*>(
               &_AppGuardIpInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(AppGuardIpInfo& a, AppGuardIpInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(AppGuardIpInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AppGuardIpInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AppGuardIpInfo* New() const final {
    return CreateMaybeMessage<AppGuardIpInfo>(nullptr);
  }

  AppGuardIpInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AppGuardIpInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AppGuardIpInfo& from);
  void MergeFrom(const AppGuardIpInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AppGuardIpInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "appguard.AppGuardIpInfo";
  }
  protected:
  explicit AppGuardIpInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_appguard_2eproto);
    return ::descriptor_table_appguard_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIpFieldNumber = 1,
    kCountryFieldNumber = 2,
    kAsnFieldNumber = 3,
    kOrgFieldNumber = 4,
    kContinentCodeFieldNumber = 5,
    kCityFieldNumber = 6,
    kRegionFieldNumber = 7,
    kPostalFieldNumber = 8,
    kTimezoneFieldNumber = 9,
    kBlacklistFieldNumber = 100,
  };
  // string ip = 1;
  void clear_ip();
  const std::string& ip() const;
  void set_ip(const std::string& value);
  void set_ip(std::string&& value);
  void set_ip(const char* value);
  void set_ip(const char* value, size_t size);
  std::string* mutable_ip();
  std::string* release_ip();
  void set_allocated_ip(std::string* ip);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_ip();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_ip(
      std::string* ip);
  private:
  const std::string& _internal_ip() const;
  void _internal_set_ip(const std::string& value);
  std::string* _internal_mutable_ip();
  public:

  // string country = 2;
  bool has_country() const;
  private:
  bool _internal_has_country() const;
  public:
  void clear_country();
  const std::string& country() const;
  void set_country(const std::string& value);
  void set_country(std::string&& value);
  void set_country(const char* value);
  void set_country(const char* value, size_t size);
  std::string* mutable_country();
  std::string* release_country();
  void set_allocated_country(std::string* country);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_country();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_country(
      std::string* country);
  private:
  const std::string& _internal_country() const;
  void _internal_set_country(const std::string& value);
  std::string* _internal_mutable_country();
  public:

  // string asn = 3;
  bool has_asn() const;
  private:
  bool _internal_has_asn() const;
  public:
  void clear_asn();
  const std::string& asn() const;
  void set_asn(const std::string& value);
  void set_asn(std::string&& value);
  void set_asn(const char* value);
  void set_asn(const char* value, size_t size);
  std::string* mutable_asn();
  std::string* release_asn();
  void set_allocated_asn(std::string* asn);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_asn();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_asn(
      std::string* asn);
  private:
  const std::string& _internal_asn() const;
  void _internal_set_asn(const std::string& value);
  std::string* _internal_mutable_asn();
  public:

  // string org = 4;
  bool has_org() const;
  private:
  bool _internal_has_org() const;
  public:
  void clear_org();
  const std::string& org() const;
  void set_org(const std::string& value);
  void set_org(std::string&& value);
  void set_org(const char* value);
  void set_org(const char* value, size_t size);
  std::string* mutable_org();
  std::string* release_org();
  void set_allocated_org(std::string* org);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_org();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_org(
      std::string* org);
  private:
  const std::string& _internal_org() const;
  void _internal_set_org(const std::string& value);
  std::string* _internal_mutable_org();
  public:

  // string continent_code = 5;
  bool has_continent_code() const;
  private:
  bool _internal_has_continent_code() const;
  public:
  void clear_continent_code();
  const std::string& continent_code() const;
  void set_continent_code(const std::string& value);
  void set_continent_code(std::string&& value);
  void set_continent_code(const char* value);
  void set_continent_code(const char* value, size_t size);
  std::string* mutable_continent_code();
  std::string* release_continent_code();
  void set_allocated_continent_code(std::string* continent_code);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_continent_code();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_continent_code(
      std::string* continent_code);
  private:
  const std::string& _internal_continent_code() const;
  void _internal_set_continent_code(const std::string& value);
  std::string* _internal_mutable_continent_code();
  public:

  // string city = 6;
  bool has_city() const;
  private:
  bool _internal_has_city() const;
  public:
  void clear_city();
  const std::string& city() const;
  void set_city(const std::string& value);
  void set_city(std::string&& value);
  void set_city(const char* value);
  void set_city(const char* value, size_t size);
  std::string* mutable_city();
  std::string* release_city();
  void set_allocated_city(std::string* city);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_city();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_city(
      std::string* city);
  private:
  const std::string& _internal_city() const;
  void _internal_set_city(const std::string& value);
  std::string* _internal_mutable_city();
  public:

  // string region = 7;
  bool has_region() const;
  private:
  bool _internal_has_region() const;
  public:
  void clear_region();
  const std::string& region() const;
  void set_region(const std::string& value);
  void set_region(std::string&& value);
  void set_region(const char* value);
  void set_region(const char* value, size_t size);
  std::string* mutable_region();
  std::string* release_region();
  void set_allocated_region(std::string* region);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_region();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_region(
      std::string* region);
  private:
  const std::string& _internal_region() const;
  void _internal_set_region(const std::string& value);
  std::string* _internal_mutable_region();
  public:

  // string postal = 8;
  bool has_postal() const;
  private:
  bool _internal_has_postal() const;
  public:
  void clear_postal();
  const std::string& postal() const;
  void set_postal(const std::string& value);
  void set_postal(std::string&& value);
  void set_postal(const char* value);
  void set_postal(const char* value, size_t size);
  std::string* mutable_postal();
  std::string* release_postal();
  void set_allocated_postal(std::string* postal);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_postal();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_postal(
      std::string* postal);
  private:
  const std::string& _internal_postal() const;
  void _internal_set_postal(const std::string& value);
  std::string* _internal_mutable_postal();
  public:

  // string timezone = 9;
  bool has_timezone() const;
  private:
  bool _internal_has_timezone() const;
  public:
  void clear_timezone();
  const std::string& timezone() const;
  void set_timezone(const std::string& value);
  void set_timezone(std::string&& value);
  void set_timezone(const char* value);
  void set_timezone(const char* value, size_t size);
  std::string* mutable_timezone();
  std::string* release_timezone();
  void set_allocated_timezone(std::string* timezone);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_timezone();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_timezone(
      std::string* timezone);
  private:
  const std::string& _internal_timezone() const;
  void _internal_set_timezone(const std::string& value);
  std::string* _internal_mutable_timezone();
  public:

  // bool blacklist = 100;
  void clear_blacklist();
  bool blacklist() const;
  void set_blacklist(bool value);
  private:
  bool _internal_blacklist() const;
  void _internal_set_blacklist(bool value);
  public:

  // @@protoc_insertion_point(class_scope:appguard.AppGuardIpInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ip_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr country_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr asn_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr org_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr continent_code_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr city_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr region_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr postal_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr timezone_;
  bool blacklist_;
  friend struct ::TableStruct_appguard_2eproto;
};
// -------------------------------------------------------------------

class AppGuardTcpInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:appguard.AppGuardTcpInfo) */ {
 public:
  inline AppGuardTcpInfo() : AppGuardTcpInfo(nullptr) {};
  virtual ~AppGuardTcpInfo();

  AppGuardTcpInfo(const AppGuardTcpInfo& from);
  AppGuardTcpInfo(AppGuardTcpInfo&& from) noexcept
    : AppGuardTcpInfo() {
    *this = ::std::move(from);
  }

  inline AppGuardTcpInfo& operator=(const AppGuardTcpInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline AppGuardTcpInfo& operator=(AppGuardTcpInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AppGuardTcpInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AppGuardTcpInfo* internal_default_instance() {
    return reinterpret_cast<const AppGuardTcpInfo*>(
               &_AppGuardTcpInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(AppGuardTcpInfo& a, AppGuardTcpInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(AppGuardTcpInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AppGuardTcpInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AppGuardTcpInfo* New() const final {
    return CreateMaybeMessage<AppGuardTcpInfo>(nullptr);
  }

  AppGuardTcpInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AppGuardTcpInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AppGuardTcpInfo& from);
  void MergeFrom(const AppGuardTcpInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AppGuardTcpInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "appguard.AppGuardTcpInfo";
  }
  protected:
  explicit AppGuardTcpInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_appguard_2eproto);
    return ::descriptor_table_appguard_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kConnectionFieldNumber = 1,
    kIpInfoFieldNumber = 2,
    kTcpIdFieldNumber = 3,
  };
  // .appguard.AppGuardTcpConnection connection = 1;
  bool has_connection() const;
  private:
  bool _internal_has_connection() const;
  public:
  void clear_connection();
  const ::appguard::AppGuardTcpConnection& connection() const;
  ::appguard::AppGuardTcpConnection* release_connection();
  ::appguard::AppGuardTcpConnection* mutable_connection();
  void set_allocated_connection(::appguard::AppGuardTcpConnection* connection);
  private:
  const ::appguard::AppGuardTcpConnection& _internal_connection() const;
  ::appguard::AppGuardTcpConnection* _internal_mutable_connection();
  public:
  void unsafe_arena_set_allocated_connection(
      ::appguard::AppGuardTcpConnection* connection);
  ::appguard::AppGuardTcpConnection* unsafe_arena_release_connection();

  // .appguard.AppGuardIpInfo ip_info = 2;
  bool has_ip_info() const;
  private:
  bool _internal_has_ip_info() const;
  public:
  void clear_ip_info();
  const ::appguard::AppGuardIpInfo& ip_info() const;
  ::appguard::AppGuardIpInfo* release_ip_info();
  ::appguard::AppGuardIpInfo* mutable_ip_info();
  void set_allocated_ip_info(::appguard::AppGuardIpInfo* ip_info);
  private:
  const ::appguard::AppGuardIpInfo& _internal_ip_info() const;
  ::appguard::AppGuardIpInfo* _internal_mutable_ip_info();
  public:
  void unsafe_arena_set_allocated_ip_info(
      ::appguard::AppGuardIpInfo* ip_info);
  ::appguard::AppGuardIpInfo* unsafe_arena_release_ip_info();

  // uint64 tcp_id = 3;
  void clear_tcp_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 tcp_id() const;
  void set_tcp_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_tcp_id() const;
  void _internal_set_tcp_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:appguard.AppGuardTcpInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::appguard::AppGuardTcpConnection* connection_;
  ::appguard::AppGuardIpInfo* ip_info_;
  ::PROTOBUF_NAMESPACE_ID::uint64 tcp_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_appguard_2eproto;
};
// -------------------------------------------------------------------

class AppGuardHttpRequest_HeadersEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<AppGuardHttpRequest_HeadersEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<AppGuardHttpRequest_HeadersEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    0 > SuperType;
  AppGuardHttpRequest_HeadersEntry_DoNotUse();
  AppGuardHttpRequest_HeadersEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const AppGuardHttpRequest_HeadersEntry_DoNotUse& other);
  static const AppGuardHttpRequest_HeadersEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const AppGuardHttpRequest_HeadersEntry_DoNotUse*>(&_AppGuardHttpRequest_HeadersEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "appguard.AppGuardHttpRequest.HeadersEntry.key");
 }
  static bool ValidateValue(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "appguard.AppGuardHttpRequest.HeadersEntry.value");
 }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_appguard_2eproto);
    return ::descriptor_table_appguard_2eproto.file_level_metadata[5];
  }

  public:
};

// -------------------------------------------------------------------

class AppGuardHttpRequest_QueryEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<AppGuardHttpRequest_QueryEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<AppGuardHttpRequest_QueryEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    0 > SuperType;
  AppGuardHttpRequest_QueryEntry_DoNotUse();
  AppGuardHttpRequest_QueryEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const AppGuardHttpRequest_QueryEntry_DoNotUse& other);
  static const AppGuardHttpRequest_QueryEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const AppGuardHttpRequest_QueryEntry_DoNotUse*>(&_AppGuardHttpRequest_QueryEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "appguard.AppGuardHttpRequest.QueryEntry.key");
 }
  static bool ValidateValue(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "appguard.AppGuardHttpRequest.QueryEntry.value");
 }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_appguard_2eproto);
    return ::descriptor_table_appguard_2eproto.file_level_metadata[6];
  }

  public:
};

// -------------------------------------------------------------------

class AppGuardHttpRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:appguard.AppGuardHttpRequest) */ {
 public:
  inline AppGuardHttpRequest() : AppGuardHttpRequest(nullptr) {};
  virtual ~AppGuardHttpRequest();

  AppGuardHttpRequest(const AppGuardHttpRequest& from);
  AppGuardHttpRequest(AppGuardHttpRequest&& from) noexcept
    : AppGuardHttpRequest() {
    *this = ::std::move(from);
  }

  inline AppGuardHttpRequest& operator=(const AppGuardHttpRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline AppGuardHttpRequest& operator=(AppGuardHttpRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AppGuardHttpRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AppGuardHttpRequest* internal_default_instance() {
    return reinterpret_cast<const AppGuardHttpRequest*>(
               &_AppGuardHttpRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(AppGuardHttpRequest& a, AppGuardHttpRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(AppGuardHttpRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AppGuardHttpRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AppGuardHttpRequest* New() const final {
    return CreateMaybeMessage<AppGuardHttpRequest>(nullptr);
  }

  AppGuardHttpRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AppGuardHttpRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AppGuardHttpRequest& from);
  void MergeFrom(const AppGuardHttpRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AppGuardHttpRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "appguard.AppGuardHttpRequest";
  }
  protected:
  explicit AppGuardHttpRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_appguard_2eproto);
    return ::descriptor_table_appguard_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kHeadersFieldNumber = 3,
    kQueryFieldNumber = 6,
    kTokenFieldNumber = 1,
    kOriginalUrlFieldNumber = 2,
    kMethodFieldNumber = 4,
    kBodyFieldNumber = 5,
    kTcpInfoFieldNumber = 100,
  };
  // map<string, string> headers = 3;
  int headers_size() const;
  private:
  int _internal_headers_size() const;
  public:
  void clear_headers();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      _internal_headers() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      _internal_mutable_headers();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      headers() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      mutable_headers();

  // map<string, string> query = 6;
  int query_size() const;
  private:
  int _internal_query_size() const;
  public:
  void clear_query();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      _internal_query() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      _internal_mutable_query();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      query() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      mutable_query();

  // string token = 1;
  void clear_token();
  const std::string& token() const;
  void set_token(const std::string& value);
  void set_token(std::string&& value);
  void set_token(const char* value);
  void set_token(const char* value, size_t size);
  std::string* mutable_token();
  std::string* release_token();
  void set_allocated_token(std::string* token);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_token();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_token(
      std::string* token);
  private:
  const std::string& _internal_token() const;
  void _internal_set_token(const std::string& value);
  std::string* _internal_mutable_token();
  public:

  // string original_url = 2;
  void clear_original_url();
  const std::string& original_url() const;
  void set_original_url(const std::string& value);
  void set_original_url(std::string&& value);
  void set_original_url(const char* value);
  void set_original_url(const char* value, size_t size);
  std::string* mutable_original_url();
  std::string* release_original_url();
  void set_allocated_original_url(std::string* original_url);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_original_url();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_original_url(
      std::string* original_url);
  private:
  const std::string& _internal_original_url() const;
  void _internal_set_original_url(const std::string& value);
  std::string* _internal_mutable_original_url();
  public:

  // string method = 4;
  void clear_method();
  const std::string& method() const;
  void set_method(const std::string& value);
  void set_method(std::string&& value);
  void set_method(const char* value);
  void set_method(const char* value, size_t size);
  std::string* mutable_method();
  std::string* release_method();
  void set_allocated_method(std::string* method);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_method();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_method(
      std::string* method);
  private:
  const std::string& _internal_method() const;
  void _internal_set_method(const std::string& value);
  std::string* _internal_mutable_method();
  public:

  // string body = 5;
  bool has_body() const;
  private:
  bool _internal_has_body() const;
  public:
  void clear_body();
  const std::string& body() const;
  void set_body(const std::string& value);
  void set_body(std::string&& value);
  void set_body(const char* value);
  void set_body(const char* value, size_t size);
  std::string* mutable_body();
  std::string* release_body();
  void set_allocated_body(std::string* body);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_body();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_body(
      std::string* body);
  private:
  const std::string& _internal_body() const;
  void _internal_set_body(const std::string& value);
  std::string* _internal_mutable_body();
  public:

  // .appguard.AppGuardTcpInfo tcp_info = 100;
  bool has_tcp_info() const;
  private:
  bool _internal_has_tcp_info() const;
  public:
  void clear_tcp_info();
  const ::appguard::AppGuardTcpInfo& tcp_info() const;
  ::appguard::AppGuardTcpInfo* release_tcp_info();
  ::appguard::AppGuardTcpInfo* mutable_tcp_info();
  void set_allocated_tcp_info(::appguard::AppGuardTcpInfo* tcp_info);
  private:
  const ::appguard::AppGuardTcpInfo& _internal_tcp_info() const;
  ::appguard::AppGuardTcpInfo* _internal_mutable_tcp_info();
  public:
  void unsafe_arena_set_allocated_tcp_info(
      ::appguard::AppGuardTcpInfo* tcp_info);
  ::appguard::AppGuardTcpInfo* unsafe_arena_release_tcp_info();

  // @@protoc_insertion_point(class_scope:appguard.AppGuardHttpRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      AppGuardHttpRequest_HeadersEntry_DoNotUse,
      std::string, std::string,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      0 > headers_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      AppGuardHttpRequest_QueryEntry_DoNotUse,
      std::string, std::string,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      0 > query_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr token_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr original_url_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr method_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr body_;
  ::appguard::AppGuardTcpInfo* tcp_info_;
  friend struct ::TableStruct_appguard_2eproto;
};
// -------------------------------------------------------------------

class AppGuardHttpResponse_HeadersEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<AppGuardHttpResponse_HeadersEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<AppGuardHttpResponse_HeadersEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    0 > SuperType;
  AppGuardHttpResponse_HeadersEntry_DoNotUse();
  AppGuardHttpResponse_HeadersEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const AppGuardHttpResponse_HeadersEntry_DoNotUse& other);
  static const AppGuardHttpResponse_HeadersEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const AppGuardHttpResponse_HeadersEntry_DoNotUse*>(&_AppGuardHttpResponse_HeadersEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "appguard.AppGuardHttpResponse.HeadersEntry.key");
 }
  static bool ValidateValue(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "appguard.AppGuardHttpResponse.HeadersEntry.value");
 }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_appguard_2eproto);
    return ::descriptor_table_appguard_2eproto.file_level_metadata[8];
  }

  public:
};

// -------------------------------------------------------------------

class AppGuardHttpResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:appguard.AppGuardHttpResponse) */ {
 public:
  inline AppGuardHttpResponse() : AppGuardHttpResponse(nullptr) {};
  virtual ~AppGuardHttpResponse();

  AppGuardHttpResponse(const AppGuardHttpResponse& from);
  AppGuardHttpResponse(AppGuardHttpResponse&& from) noexcept
    : AppGuardHttpResponse() {
    *this = ::std::move(from);
  }

  inline AppGuardHttpResponse& operator=(const AppGuardHttpResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline AppGuardHttpResponse& operator=(AppGuardHttpResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AppGuardHttpResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AppGuardHttpResponse* internal_default_instance() {
    return reinterpret_cast<const AppGuardHttpResponse*>(
               &_AppGuardHttpResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(AppGuardHttpResponse& a, AppGuardHttpResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(AppGuardHttpResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AppGuardHttpResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AppGuardHttpResponse* New() const final {
    return CreateMaybeMessage<AppGuardHttpResponse>(nullptr);
  }

  AppGuardHttpResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AppGuardHttpResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AppGuardHttpResponse& from);
  void MergeFrom(const AppGuardHttpResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AppGuardHttpResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "appguard.AppGuardHttpResponse";
  }
  protected:
  explicit AppGuardHttpResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_appguard_2eproto);
    return ::descriptor_table_appguard_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kHeadersFieldNumber = 3,
    kTokenFieldNumber = 1,
    kTcpInfoFieldNumber = 100,
    kCodeFieldNumber = 2,
  };
  // map<string, string> headers = 3;
  int headers_size() const;
  private:
  int _internal_headers_size() const;
  public:
  void clear_headers();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      _internal_headers() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      _internal_mutable_headers();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      headers() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      mutable_headers();

  // string token = 1;
  void clear_token();
  const std::string& token() const;
  void set_token(const std::string& value);
  void set_token(std::string&& value);
  void set_token(const char* value);
  void set_token(const char* value, size_t size);
  std::string* mutable_token();
  std::string* release_token();
  void set_allocated_token(std::string* token);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_token();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_token(
      std::string* token);
  private:
  const std::string& _internal_token() const;
  void _internal_set_token(const std::string& value);
  std::string* _internal_mutable_token();
  public:

  // .appguard.AppGuardTcpInfo tcp_info = 100;
  bool has_tcp_info() const;
  private:
  bool _internal_has_tcp_info() const;
  public:
  void clear_tcp_info();
  const ::appguard::AppGuardTcpInfo& tcp_info() const;
  ::appguard::AppGuardTcpInfo* release_tcp_info();
  ::appguard::AppGuardTcpInfo* mutable_tcp_info();
  void set_allocated_tcp_info(::appguard::AppGuardTcpInfo* tcp_info);
  private:
  const ::appguard::AppGuardTcpInfo& _internal_tcp_info() const;
  ::appguard::AppGuardTcpInfo* _internal_mutable_tcp_info();
  public:
  void unsafe_arena_set_allocated_tcp_info(
      ::appguard::AppGuardTcpInfo* tcp_info);
  ::appguard::AppGuardTcpInfo* unsafe_arena_release_tcp_info();

  // uint32 code = 2;
  void clear_code();
  ::PROTOBUF_NAMESPACE_ID::uint32 code() const;
  void set_code(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_code() const;
  void _internal_set_code(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:appguard.AppGuardHttpResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      AppGuardHttpResponse_HeadersEntry_DoNotUse,
      std::string, std::string,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      0 > headers_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr token_;
  ::appguard::AppGuardTcpInfo* tcp_info_;
  ::PROTOBUF_NAMESPACE_ID::uint32 code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_appguard_2eproto;
};
// -------------------------------------------------------------------

class AppGuardSmtpRequest_HeadersEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<AppGuardSmtpRequest_HeadersEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<AppGuardSmtpRequest_HeadersEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    0 > SuperType;
  AppGuardSmtpRequest_HeadersEntry_DoNotUse();
  AppGuardSmtpRequest_HeadersEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const AppGuardSmtpRequest_HeadersEntry_DoNotUse& other);
  static const AppGuardSmtpRequest_HeadersEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const AppGuardSmtpRequest_HeadersEntry_DoNotUse*>(&_AppGuardSmtpRequest_HeadersEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "appguard.AppGuardSmtpRequest.HeadersEntry.key");
 }
  static bool ValidateValue(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "appguard.AppGuardSmtpRequest.HeadersEntry.value");
 }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_appguard_2eproto);
    return ::descriptor_table_appguard_2eproto.file_level_metadata[10];
  }

  public:
};

// -------------------------------------------------------------------

class AppGuardSmtpRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:appguard.AppGuardSmtpRequest) */ {
 public:
  inline AppGuardSmtpRequest() : AppGuardSmtpRequest(nullptr) {};
  virtual ~AppGuardSmtpRequest();

  AppGuardSmtpRequest(const AppGuardSmtpRequest& from);
  AppGuardSmtpRequest(AppGuardSmtpRequest&& from) noexcept
    : AppGuardSmtpRequest() {
    *this = ::std::move(from);
  }

  inline AppGuardSmtpRequest& operator=(const AppGuardSmtpRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline AppGuardSmtpRequest& operator=(AppGuardSmtpRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AppGuardSmtpRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AppGuardSmtpRequest* internal_default_instance() {
    return reinterpret_cast<const AppGuardSmtpRequest*>(
               &_AppGuardSmtpRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(AppGuardSmtpRequest& a, AppGuardSmtpRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(AppGuardSmtpRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AppGuardSmtpRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AppGuardSmtpRequest* New() const final {
    return CreateMaybeMessage<AppGuardSmtpRequest>(nullptr);
  }

  AppGuardSmtpRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AppGuardSmtpRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AppGuardSmtpRequest& from);
  void MergeFrom(const AppGuardSmtpRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AppGuardSmtpRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "appguard.AppGuardSmtpRequest";
  }
  protected:
  explicit AppGuardSmtpRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_appguard_2eproto);
    return ::descriptor_table_appguard_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kHeadersFieldNumber = 2,
    kTokenFieldNumber = 1,
    kBodyFieldNumber = 3,
    kTcpInfoFieldNumber = 100,
  };
  // map<string, string> headers = 2;
  int headers_size() const;
  private:
  int _internal_headers_size() const;
  public:
  void clear_headers();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      _internal_headers() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      _internal_mutable_headers();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      headers() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      mutable_headers();

  // string token = 1;
  void clear_token();
  const std::string& token() const;
  void set_token(const std::string& value);
  void set_token(std::string&& value);
  void set_token(const char* value);
  void set_token(const char* value, size_t size);
  std::string* mutable_token();
  std::string* release_token();
  void set_allocated_token(std::string* token);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_token();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_token(
      std::string* token);
  private:
  const std::string& _internal_token() const;
  void _internal_set_token(const std::string& value);
  std::string* _internal_mutable_token();
  public:

  // string body = 3;
  bool has_body() const;
  private:
  bool _internal_has_body() const;
  public:
  void clear_body();
  const std::string& body() const;
  void set_body(const std::string& value);
  void set_body(std::string&& value);
  void set_body(const char* value);
  void set_body(const char* value, size_t size);
  std::string* mutable_body();
  std::string* release_body();
  void set_allocated_body(std::string* body);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_body();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_body(
      std::string* body);
  private:
  const std::string& _internal_body() const;
  void _internal_set_body(const std::string& value);
  std::string* _internal_mutable_body();
  public:

  // .appguard.AppGuardTcpInfo tcp_info = 100;
  bool has_tcp_info() const;
  private:
  bool _internal_has_tcp_info() const;
  public:
  void clear_tcp_info();
  const ::appguard::AppGuardTcpInfo& tcp_info() const;
  ::appguard::AppGuardTcpInfo* release_tcp_info();
  ::appguard::AppGuardTcpInfo* mutable_tcp_info();
  void set_allocated_tcp_info(::appguard::AppGuardTcpInfo* tcp_info);
  private:
  const ::appguard::AppGuardTcpInfo& _internal_tcp_info() const;
  ::appguard::AppGuardTcpInfo* _internal_mutable_tcp_info();
  public:
  void unsafe_arena_set_allocated_tcp_info(
      ::appguard::AppGuardTcpInfo* tcp_info);
  ::appguard::AppGuardTcpInfo* unsafe_arena_release_tcp_info();

  // @@protoc_insertion_point(class_scope:appguard.AppGuardSmtpRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      AppGuardSmtpRequest_HeadersEntry_DoNotUse,
      std::string, std::string,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      0 > headers_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr token_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr body_;
  ::appguard::AppGuardTcpInfo* tcp_info_;
  friend struct ::TableStruct_appguard_2eproto;
};
// -------------------------------------------------------------------

class AppGuardSmtpResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:appguard.AppGuardSmtpResponse) */ {
 public:
  inline AppGuardSmtpResponse() : AppGuardSmtpResponse(nullptr) {};
  virtual ~AppGuardSmtpResponse();

  AppGuardSmtpResponse(const AppGuardSmtpResponse& from);
  AppGuardSmtpResponse(AppGuardSmtpResponse&& from) noexcept
    : AppGuardSmtpResponse() {
    *this = ::std::move(from);
  }

  inline AppGuardSmtpResponse& operator=(const AppGuardSmtpResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline AppGuardSmtpResponse& operator=(AppGuardSmtpResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AppGuardSmtpResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AppGuardSmtpResponse* internal_default_instance() {
    return reinterpret_cast<const AppGuardSmtpResponse*>(
               &_AppGuardSmtpResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(AppGuardSmtpResponse& a, AppGuardSmtpResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(AppGuardSmtpResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AppGuardSmtpResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AppGuardSmtpResponse* New() const final {
    return CreateMaybeMessage<AppGuardSmtpResponse>(nullptr);
  }

  AppGuardSmtpResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AppGuardSmtpResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AppGuardSmtpResponse& from);
  void MergeFrom(const AppGuardSmtpResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AppGuardSmtpResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "appguard.AppGuardSmtpResponse";
  }
  protected:
  explicit AppGuardSmtpResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_appguard_2eproto);
    return ::descriptor_table_appguard_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTokenFieldNumber = 1,
    kTcpInfoFieldNumber = 100,
    kCodeFieldNumber = 2,
  };
  // string token = 1;
  void clear_token();
  const std::string& token() const;
  void set_token(const std::string& value);
  void set_token(std::string&& value);
  void set_token(const char* value);
  void set_token(const char* value, size_t size);
  std::string* mutable_token();
  std::string* release_token();
  void set_allocated_token(std::string* token);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_token();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_token(
      std::string* token);
  private:
  const std::string& _internal_token() const;
  void _internal_set_token(const std::string& value);
  std::string* _internal_mutable_token();
  public:

  // .appguard.AppGuardTcpInfo tcp_info = 100;
  bool has_tcp_info() const;
  private:
  bool _internal_has_tcp_info() const;
  public:
  void clear_tcp_info();
  const ::appguard::AppGuardTcpInfo& tcp_info() const;
  ::appguard::AppGuardTcpInfo* release_tcp_info();
  ::appguard::AppGuardTcpInfo* mutable_tcp_info();
  void set_allocated_tcp_info(::appguard::AppGuardTcpInfo* tcp_info);
  private:
  const ::appguard::AppGuardTcpInfo& _internal_tcp_info() const;
  ::appguard::AppGuardTcpInfo* _internal_mutable_tcp_info();
  public:
  void unsafe_arena_set_allocated_tcp_info(
      ::appguard::AppGuardTcpInfo* tcp_info);
  ::appguard::AppGuardTcpInfo* unsafe_arena_release_tcp_info();

  // uint32 code = 2;
  bool has_code() const;
  private:
  bool _internal_has_code() const;
  public:
  void clear_code();
  ::PROTOBUF_NAMESPACE_ID::uint32 code() const;
  void set_code(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_code() const;
  void _internal_set_code(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:appguard.AppGuardSmtpResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr token_;
  ::appguard::AppGuardTcpInfo* tcp_info_;
  ::PROTOBUF_NAMESPACE_ID::uint32 code_;
  friend struct ::TableStruct_appguard_2eproto;
};
// -------------------------------------------------------------------

class AppGuardResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:appguard.AppGuardResponse) */ {
 public:
  inline AppGuardResponse() : AppGuardResponse(nullptr) {};
  virtual ~AppGuardResponse();

  AppGuardResponse(const AppGuardResponse& from);
  AppGuardResponse(AppGuardResponse&& from) noexcept
    : AppGuardResponse() {
    *this = ::std::move(from);
  }

  inline AppGuardResponse& operator=(const AppGuardResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline AppGuardResponse& operator=(AppGuardResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AppGuardResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AppGuardResponse* internal_default_instance() {
    return reinterpret_cast<const AppGuardResponse*>(
               &_AppGuardResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(AppGuardResponse& a, AppGuardResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(AppGuardResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AppGuardResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AppGuardResponse* New() const final {
    return CreateMaybeMessage<AppGuardResponse>(nullptr);
  }

  AppGuardResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AppGuardResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AppGuardResponse& from);
  void MergeFrom(const AppGuardResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AppGuardResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "appguard.AppGuardResponse";
  }
  protected:
  explicit AppGuardResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_appguard_2eproto);
    return ::descriptor_table_appguard_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPolicyFieldNumber = 2,
  };
  // .appguard_commands.FirewallPolicy policy = 2;
  void clear_policy();
  ::appguard_commands::FirewallPolicy policy() const;
  void set_policy(::appguard_commands::FirewallPolicy value);
  private:
  ::appguard_commands::FirewallPolicy _internal_policy() const;
  void _internal_set_policy(::appguard_commands::FirewallPolicy value);
  public:

  // @@protoc_insertion_point(class_scope:appguard.AppGuardResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int policy_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_appguard_2eproto;
};
// -------------------------------------------------------------------

class AppGuardTcpResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:appguard.AppGuardTcpResponse) */ {
 public:
  inline AppGuardTcpResponse() : AppGuardTcpResponse(nullptr) {};
  virtual ~AppGuardTcpResponse();

  AppGuardTcpResponse(const AppGuardTcpResponse& from);
  AppGuardTcpResponse(AppGuardTcpResponse&& from) noexcept
    : AppGuardTcpResponse() {
    *this = ::std::move(from);
  }

  inline AppGuardTcpResponse& operator=(const AppGuardTcpResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline AppGuardTcpResponse& operator=(AppGuardTcpResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AppGuardTcpResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AppGuardTcpResponse* internal_default_instance() {
    return reinterpret_cast<const AppGuardTcpResponse*>(
               &_AppGuardTcpResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(AppGuardTcpResponse& a, AppGuardTcpResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(AppGuardTcpResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AppGuardTcpResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AppGuardTcpResponse* New() const final {
    return CreateMaybeMessage<AppGuardTcpResponse>(nullptr);
  }

  AppGuardTcpResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AppGuardTcpResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AppGuardTcpResponse& from);
  void MergeFrom(const AppGuardTcpResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AppGuardTcpResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "appguard.AppGuardTcpResponse";
  }
  protected:
  explicit AppGuardTcpResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_appguard_2eproto);
    return ::descriptor_table_appguard_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTcpInfoFieldNumber = 1,
  };
  // .appguard.AppGuardTcpInfo tcp_info = 1;
  bool has_tcp_info() const;
  private:
  bool _internal_has_tcp_info() const;
  public:
  void clear_tcp_info();
  const ::appguard::AppGuardTcpInfo& tcp_info() const;
  ::appguard::AppGuardTcpInfo* release_tcp_info();
  ::appguard::AppGuardTcpInfo* mutable_tcp_info();
  void set_allocated_tcp_info(::appguard::AppGuardTcpInfo* tcp_info);
  private:
  const ::appguard::AppGuardTcpInfo& _internal_tcp_info() const;
  ::appguard::AppGuardTcpInfo* _internal_mutable_tcp_info();
  public:
  void unsafe_arena_set_allocated_tcp_info(
      ::appguard::AppGuardTcpInfo* tcp_info);
  ::appguard::AppGuardTcpInfo* unsafe_arena_release_tcp_info();

  // @@protoc_insertion_point(class_scope:appguard.AppGuardTcpResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::appguard::AppGuardTcpInfo* tcp_info_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_appguard_2eproto;
};
// -------------------------------------------------------------------

class Token PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:appguard.Token) */ {
 public:
  inline Token() : Token(nullptr) {};
  virtual ~Token();

  Token(const Token& from);
  Token(Token&& from) noexcept
    : Token() {
    *this = ::std::move(from);
  }

  inline Token& operator=(const Token& from) {
    CopyFrom(from);
    return *this;
  }
  inline Token& operator=(Token&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Token& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Token* internal_default_instance() {
    return reinterpret_cast<const Token*>(
               &_Token_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(Token& a, Token& b) {
    a.Swap(&b);
  }
  inline void Swap(Token* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Token* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Token* New() const final {
    return CreateMaybeMessage<Token>(nullptr);
  }

  Token* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Token>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Token& from);
  void MergeFrom(const Token& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Token* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "appguard.Token";
  }
  protected:
  explicit Token(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_appguard_2eproto);
    return ::descriptor_table_appguard_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTokenFieldNumber = 1,
  };
  // string token = 1;
  void clear_token();
  const std::string& token() const;
  void set_token(const std::string& value);
  void set_token(std::string&& value);
  void set_token(const char* value);
  void set_token(const char* value, size_t size);
  std::string* mutable_token();
  std::string* release_token();
  void set_allocated_token(std::string* token);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_token();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_token(
      std::string* token);
  private:
  const std::string& _internal_token() const;
  void _internal_set_token(const std::string& value);
  std::string* _internal_mutable_token();
  public:

  // @@protoc_insertion_point(class_scope:appguard.Token)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr token_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_appguard_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Logs

// string token = 1;
inline void Logs::clear_token() {
  token_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Logs::token() const {
  // @@protoc_insertion_point(field_get:appguard.Logs.token)
  return _internal_token();
}
inline void Logs::set_token(const std::string& value) {
  _internal_set_token(value);
  // @@protoc_insertion_point(field_set:appguard.Logs.token)
}
inline std::string* Logs::mutable_token() {
  // @@protoc_insertion_point(field_mutable:appguard.Logs.token)
  return _internal_mutable_token();
}
inline const std::string& Logs::_internal_token() const {
  return token_.Get();
}
inline void Logs::_internal_set_token(const std::string& value) {
  
  token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Logs::set_token(std::string&& value) {
  
  token_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:appguard.Logs.token)
}
inline void Logs::set_token(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:appguard.Logs.token)
}
inline void Logs::set_token(const char* value,
    size_t size) {
  
  token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:appguard.Logs.token)
}
inline std::string* Logs::_internal_mutable_token() {
  
  return token_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Logs::release_token() {
  // @@protoc_insertion_point(field_release:appguard.Logs.token)
  return token_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Logs::set_allocated_token(std::string* token) {
  if (token != nullptr) {
    
  } else {
    
  }
  token_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), token,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:appguard.Logs.token)
}
inline std::string* Logs::unsafe_arena_release_token() {
  // @@protoc_insertion_point(field_unsafe_arena_release:appguard.Logs.token)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return token_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Logs::unsafe_arena_set_allocated_token(
    std::string* token) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (token != nullptr) {
    
  } else {
    
  }
  token_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      token, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:appguard.Logs.token)
}

// repeated .appguard.Log logs = 3;
inline int Logs::_internal_logs_size() const {
  return logs_.size();
}
inline int Logs::logs_size() const {
  return _internal_logs_size();
}
inline void Logs::clear_logs() {
  logs_.Clear();
}
inline ::appguard::Log* Logs::mutable_logs(int index) {
  // @@protoc_insertion_point(field_mutable:appguard.Logs.logs)
  return logs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::appguard::Log >*
Logs::mutable_logs() {
  // @@protoc_insertion_point(field_mutable_list:appguard.Logs.logs)
  return &logs_;
}
inline const ::appguard::Log& Logs::_internal_logs(int index) const {
  return logs_.Get(index);
}
inline const ::appguard::Log& Logs::logs(int index) const {
  // @@protoc_insertion_point(field_get:appguard.Logs.logs)
  return _internal_logs(index);
}
inline ::appguard::Log* Logs::_internal_add_logs() {
  return logs_.Add();
}
inline ::appguard::Log* Logs::add_logs() {
  // @@protoc_insertion_point(field_add:appguard.Logs.logs)
  return _internal_add_logs();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::appguard::Log >&
Logs::logs() const {
  // @@protoc_insertion_point(field_list:appguard.Logs.logs)
  return logs_;
}

// -------------------------------------------------------------------

// Log

// string timestamp = 1;
inline void Log::clear_timestamp() {
  timestamp_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Log::timestamp() const {
  // @@protoc_insertion_point(field_get:appguard.Log.timestamp)
  return _internal_timestamp();
}
inline void Log::set_timestamp(const std::string& value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:appguard.Log.timestamp)
}
inline std::string* Log::mutable_timestamp() {
  // @@protoc_insertion_point(field_mutable:appguard.Log.timestamp)
  return _internal_mutable_timestamp();
}
inline const std::string& Log::_internal_timestamp() const {
  return timestamp_.Get();
}
inline void Log::_internal_set_timestamp(const std::string& value) {
  
  timestamp_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Log::set_timestamp(std::string&& value) {
  
  timestamp_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:appguard.Log.timestamp)
}
inline void Log::set_timestamp(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  timestamp_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:appguard.Log.timestamp)
}
inline void Log::set_timestamp(const char* value,
    size_t size) {
  
  timestamp_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:appguard.Log.timestamp)
}
inline std::string* Log::_internal_mutable_timestamp() {
  
  return timestamp_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Log::release_timestamp() {
  // @@protoc_insertion_point(field_release:appguard.Log.timestamp)
  return timestamp_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Log::set_allocated_timestamp(std::string* timestamp) {
  if (timestamp != nullptr) {
    
  } else {
    
  }
  timestamp_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), timestamp,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:appguard.Log.timestamp)
}
inline std::string* Log::unsafe_arena_release_timestamp() {
  // @@protoc_insertion_point(field_unsafe_arena_release:appguard.Log.timestamp)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return timestamp_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Log::unsafe_arena_set_allocated_timestamp(
    std::string* timestamp) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (timestamp != nullptr) {
    
  } else {
    
  }
  timestamp_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      timestamp, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:appguard.Log.timestamp)
}

// string level = 2;
inline void Log::clear_level() {
  level_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Log::level() const {
  // @@protoc_insertion_point(field_get:appguard.Log.level)
  return _internal_level();
}
inline void Log::set_level(const std::string& value) {
  _internal_set_level(value);
  // @@protoc_insertion_point(field_set:appguard.Log.level)
}
inline std::string* Log::mutable_level() {
  // @@protoc_insertion_point(field_mutable:appguard.Log.level)
  return _internal_mutable_level();
}
inline const std::string& Log::_internal_level() const {
  return level_.Get();
}
inline void Log::_internal_set_level(const std::string& value) {
  
  level_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Log::set_level(std::string&& value) {
  
  level_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:appguard.Log.level)
}
inline void Log::set_level(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  level_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:appguard.Log.level)
}
inline void Log::set_level(const char* value,
    size_t size) {
  
  level_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:appguard.Log.level)
}
inline std::string* Log::_internal_mutable_level() {
  
  return level_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Log::release_level() {
  // @@protoc_insertion_point(field_release:appguard.Log.level)
  return level_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Log::set_allocated_level(std::string* level) {
  if (level != nullptr) {
    
  } else {
    
  }
  level_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), level,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:appguard.Log.level)
}
inline std::string* Log::unsafe_arena_release_level() {
  // @@protoc_insertion_point(field_unsafe_arena_release:appguard.Log.level)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return level_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Log::unsafe_arena_set_allocated_level(
    std::string* level) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (level != nullptr) {
    
  } else {
    
  }
  level_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      level, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:appguard.Log.level)
}

// string message = 3;
inline void Log::clear_message() {
  message_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Log::message() const {
  // @@protoc_insertion_point(field_get:appguard.Log.message)
  return _internal_message();
}
inline void Log::set_message(const std::string& value) {
  _internal_set_message(value);
  // @@protoc_insertion_point(field_set:appguard.Log.message)
}
inline std::string* Log::mutable_message() {
  // @@protoc_insertion_point(field_mutable:appguard.Log.message)
  return _internal_mutable_message();
}
inline const std::string& Log::_internal_message() const {
  return message_.Get();
}
inline void Log::_internal_set_message(const std::string& value) {
  
  message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Log::set_message(std::string&& value) {
  
  message_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:appguard.Log.message)
}
inline void Log::set_message(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:appguard.Log.message)
}
inline void Log::set_message(const char* value,
    size_t size) {
  
  message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:appguard.Log.message)
}
inline std::string* Log::_internal_mutable_message() {
  
  return message_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Log::release_message() {
  // @@protoc_insertion_point(field_release:appguard.Log.message)
  return message_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Log::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    
  } else {
    
  }
  message_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), message,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:appguard.Log.message)
}
inline std::string* Log::unsafe_arena_release_message() {
  // @@protoc_insertion_point(field_unsafe_arena_release:appguard.Log.message)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return message_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Log::unsafe_arena_set_allocated_message(
    std::string* message) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (message != nullptr) {
    
  } else {
    
  }
  message_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      message, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:appguard.Log.message)
}

// -------------------------------------------------------------------

// AppGuardTcpConnection

// string token = 1;
inline void AppGuardTcpConnection::clear_token() {
  token_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& AppGuardTcpConnection::token() const {
  // @@protoc_insertion_point(field_get:appguard.AppGuardTcpConnection.token)
  return _internal_token();
}
inline void AppGuardTcpConnection::set_token(const std::string& value) {
  _internal_set_token(value);
  // @@protoc_insertion_point(field_set:appguard.AppGuardTcpConnection.token)
}
inline std::string* AppGuardTcpConnection::mutable_token() {
  // @@protoc_insertion_point(field_mutable:appguard.AppGuardTcpConnection.token)
  return _internal_mutable_token();
}
inline const std::string& AppGuardTcpConnection::_internal_token() const {
  return token_.Get();
}
inline void AppGuardTcpConnection::_internal_set_token(const std::string& value) {
  
  token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void AppGuardTcpConnection::set_token(std::string&& value) {
  
  token_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:appguard.AppGuardTcpConnection.token)
}
inline void AppGuardTcpConnection::set_token(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:appguard.AppGuardTcpConnection.token)
}
inline void AppGuardTcpConnection::set_token(const char* value,
    size_t size) {
  
  token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:appguard.AppGuardTcpConnection.token)
}
inline std::string* AppGuardTcpConnection::_internal_mutable_token() {
  
  return token_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* AppGuardTcpConnection::release_token() {
  // @@protoc_insertion_point(field_release:appguard.AppGuardTcpConnection.token)
  return token_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AppGuardTcpConnection::set_allocated_token(std::string* token) {
  if (token != nullptr) {
    
  } else {
    
  }
  token_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), token,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:appguard.AppGuardTcpConnection.token)
}
inline std::string* AppGuardTcpConnection::unsafe_arena_release_token() {
  // @@protoc_insertion_point(field_unsafe_arena_release:appguard.AppGuardTcpConnection.token)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return token_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void AppGuardTcpConnection::unsafe_arena_set_allocated_token(
    std::string* token) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (token != nullptr) {
    
  } else {
    
  }
  token_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      token, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:appguard.AppGuardTcpConnection.token)
}

// string source_ip = 2;
inline bool AppGuardTcpConnection::_internal_has_source_ip() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool AppGuardTcpConnection::has_source_ip() const {
  return _internal_has_source_ip();
}
inline void AppGuardTcpConnection::clear_source_ip() {
  source_ip_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& AppGuardTcpConnection::source_ip() const {
  // @@protoc_insertion_point(field_get:appguard.AppGuardTcpConnection.source_ip)
  return _internal_source_ip();
}
inline void AppGuardTcpConnection::set_source_ip(const std::string& value) {
  _internal_set_source_ip(value);
  // @@protoc_insertion_point(field_set:appguard.AppGuardTcpConnection.source_ip)
}
inline std::string* AppGuardTcpConnection::mutable_source_ip() {
  // @@protoc_insertion_point(field_mutable:appguard.AppGuardTcpConnection.source_ip)
  return _internal_mutable_source_ip();
}
inline const std::string& AppGuardTcpConnection::_internal_source_ip() const {
  return source_ip_.Get();
}
inline void AppGuardTcpConnection::_internal_set_source_ip(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  source_ip_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void AppGuardTcpConnection::set_source_ip(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  source_ip_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:appguard.AppGuardTcpConnection.source_ip)
}
inline void AppGuardTcpConnection::set_source_ip(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  source_ip_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:appguard.AppGuardTcpConnection.source_ip)
}
inline void AppGuardTcpConnection::set_source_ip(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  source_ip_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:appguard.AppGuardTcpConnection.source_ip)
}
inline std::string* AppGuardTcpConnection::_internal_mutable_source_ip() {
  _has_bits_[0] |= 0x00000001u;
  return source_ip_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* AppGuardTcpConnection::release_source_ip() {
  // @@protoc_insertion_point(field_release:appguard.AppGuardTcpConnection.source_ip)
  if (!_internal_has_source_ip()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return source_ip_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AppGuardTcpConnection::set_allocated_source_ip(std::string* source_ip) {
  if (source_ip != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  source_ip_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), source_ip,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:appguard.AppGuardTcpConnection.source_ip)
}
inline std::string* AppGuardTcpConnection::unsafe_arena_release_source_ip() {
  // @@protoc_insertion_point(field_unsafe_arena_release:appguard.AppGuardTcpConnection.source_ip)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000001u;
  return source_ip_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void AppGuardTcpConnection::unsafe_arena_set_allocated_source_ip(
    std::string* source_ip) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (source_ip != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  source_ip_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      source_ip, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:appguard.AppGuardTcpConnection.source_ip)
}

// uint32 source_port = 3;
inline bool AppGuardTcpConnection::_internal_has_source_port() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool AppGuardTcpConnection::has_source_port() const {
  return _internal_has_source_port();
}
inline void AppGuardTcpConnection::clear_source_port() {
  source_port_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 AppGuardTcpConnection::_internal_source_port() const {
  return source_port_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 AppGuardTcpConnection::source_port() const {
  // @@protoc_insertion_point(field_get:appguard.AppGuardTcpConnection.source_port)
  return _internal_source_port();
}
inline void AppGuardTcpConnection::_internal_set_source_port(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  source_port_ = value;
}
inline void AppGuardTcpConnection::set_source_port(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_source_port(value);
  // @@protoc_insertion_point(field_set:appguard.AppGuardTcpConnection.source_port)
}

// string destination_ip = 4;
inline bool AppGuardTcpConnection::_internal_has_destination_ip() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool AppGuardTcpConnection::has_destination_ip() const {
  return _internal_has_destination_ip();
}
inline void AppGuardTcpConnection::clear_destination_ip() {
  destination_ip_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& AppGuardTcpConnection::destination_ip() const {
  // @@protoc_insertion_point(field_get:appguard.AppGuardTcpConnection.destination_ip)
  return _internal_destination_ip();
}
inline void AppGuardTcpConnection::set_destination_ip(const std::string& value) {
  _internal_set_destination_ip(value);
  // @@protoc_insertion_point(field_set:appguard.AppGuardTcpConnection.destination_ip)
}
inline std::string* AppGuardTcpConnection::mutable_destination_ip() {
  // @@protoc_insertion_point(field_mutable:appguard.AppGuardTcpConnection.destination_ip)
  return _internal_mutable_destination_ip();
}
inline const std::string& AppGuardTcpConnection::_internal_destination_ip() const {
  return destination_ip_.Get();
}
inline void AppGuardTcpConnection::_internal_set_destination_ip(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  destination_ip_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void AppGuardTcpConnection::set_destination_ip(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  destination_ip_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:appguard.AppGuardTcpConnection.destination_ip)
}
inline void AppGuardTcpConnection::set_destination_ip(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  destination_ip_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:appguard.AppGuardTcpConnection.destination_ip)
}
inline void AppGuardTcpConnection::set_destination_ip(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  destination_ip_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:appguard.AppGuardTcpConnection.destination_ip)
}
inline std::string* AppGuardTcpConnection::_internal_mutable_destination_ip() {
  _has_bits_[0] |= 0x00000002u;
  return destination_ip_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* AppGuardTcpConnection::release_destination_ip() {
  // @@protoc_insertion_point(field_release:appguard.AppGuardTcpConnection.destination_ip)
  if (!_internal_has_destination_ip()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return destination_ip_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AppGuardTcpConnection::set_allocated_destination_ip(std::string* destination_ip) {
  if (destination_ip != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  destination_ip_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), destination_ip,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:appguard.AppGuardTcpConnection.destination_ip)
}
inline std::string* AppGuardTcpConnection::unsafe_arena_release_destination_ip() {
  // @@protoc_insertion_point(field_unsafe_arena_release:appguard.AppGuardTcpConnection.destination_ip)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000002u;
  return destination_ip_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void AppGuardTcpConnection::unsafe_arena_set_allocated_destination_ip(
    std::string* destination_ip) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (destination_ip != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  destination_ip_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      destination_ip, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:appguard.AppGuardTcpConnection.destination_ip)
}

// uint32 destination_port = 5;
inline bool AppGuardTcpConnection::_internal_has_destination_port() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool AppGuardTcpConnection::has_destination_port() const {
  return _internal_has_destination_port();
}
inline void AppGuardTcpConnection::clear_destination_port() {
  destination_port_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 AppGuardTcpConnection::_internal_destination_port() const {
  return destination_port_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 AppGuardTcpConnection::destination_port() const {
  // @@protoc_insertion_point(field_get:appguard.AppGuardTcpConnection.destination_port)
  return _internal_destination_port();
}
inline void AppGuardTcpConnection::_internal_set_destination_port(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  destination_port_ = value;
}
inline void AppGuardTcpConnection::set_destination_port(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_destination_port(value);
  // @@protoc_insertion_point(field_set:appguard.AppGuardTcpConnection.destination_port)
}

// string protocol = 6;
inline void AppGuardTcpConnection::clear_protocol() {
  protocol_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& AppGuardTcpConnection::protocol() const {
  // @@protoc_insertion_point(field_get:appguard.AppGuardTcpConnection.protocol)
  return _internal_protocol();
}
inline void AppGuardTcpConnection::set_protocol(const std::string& value) {
  _internal_set_protocol(value);
  // @@protoc_insertion_point(field_set:appguard.AppGuardTcpConnection.protocol)
}
inline std::string* AppGuardTcpConnection::mutable_protocol() {
  // @@protoc_insertion_point(field_mutable:appguard.AppGuardTcpConnection.protocol)
  return _internal_mutable_protocol();
}
inline const std::string& AppGuardTcpConnection::_internal_protocol() const {
  return protocol_.Get();
}
inline void AppGuardTcpConnection::_internal_set_protocol(const std::string& value) {
  
  protocol_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void AppGuardTcpConnection::set_protocol(std::string&& value) {
  
  protocol_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:appguard.AppGuardTcpConnection.protocol)
}
inline void AppGuardTcpConnection::set_protocol(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  protocol_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:appguard.AppGuardTcpConnection.protocol)
}
inline void AppGuardTcpConnection::set_protocol(const char* value,
    size_t size) {
  
  protocol_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:appguard.AppGuardTcpConnection.protocol)
}
inline std::string* AppGuardTcpConnection::_internal_mutable_protocol() {
  
  return protocol_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* AppGuardTcpConnection::release_protocol() {
  // @@protoc_insertion_point(field_release:appguard.AppGuardTcpConnection.protocol)
  return protocol_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AppGuardTcpConnection::set_allocated_protocol(std::string* protocol) {
  if (protocol != nullptr) {
    
  } else {
    
  }
  protocol_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), protocol,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:appguard.AppGuardTcpConnection.protocol)
}
inline std::string* AppGuardTcpConnection::unsafe_arena_release_protocol() {
  // @@protoc_insertion_point(field_unsafe_arena_release:appguard.AppGuardTcpConnection.protocol)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return protocol_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void AppGuardTcpConnection::unsafe_arena_set_allocated_protocol(
    std::string* protocol) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (protocol != nullptr) {
    
  } else {
    
  }
  protocol_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      protocol, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:appguard.AppGuardTcpConnection.protocol)
}

// -------------------------------------------------------------------

// AppGuardIpInfo

// string ip = 1;
inline void AppGuardIpInfo::clear_ip() {
  ip_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& AppGuardIpInfo::ip() const {
  // @@protoc_insertion_point(field_get:appguard.AppGuardIpInfo.ip)
  return _internal_ip();
}
inline void AppGuardIpInfo::set_ip(const std::string& value) {
  _internal_set_ip(value);
  // @@protoc_insertion_point(field_set:appguard.AppGuardIpInfo.ip)
}
inline std::string* AppGuardIpInfo::mutable_ip() {
  // @@protoc_insertion_point(field_mutable:appguard.AppGuardIpInfo.ip)
  return _internal_mutable_ip();
}
inline const std::string& AppGuardIpInfo::_internal_ip() const {
  return ip_.Get();
}
inline void AppGuardIpInfo::_internal_set_ip(const std::string& value) {
  
  ip_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void AppGuardIpInfo::set_ip(std::string&& value) {
  
  ip_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:appguard.AppGuardIpInfo.ip)
}
inline void AppGuardIpInfo::set_ip(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  ip_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:appguard.AppGuardIpInfo.ip)
}
inline void AppGuardIpInfo::set_ip(const char* value,
    size_t size) {
  
  ip_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:appguard.AppGuardIpInfo.ip)
}
inline std::string* AppGuardIpInfo::_internal_mutable_ip() {
  
  return ip_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* AppGuardIpInfo::release_ip() {
  // @@protoc_insertion_point(field_release:appguard.AppGuardIpInfo.ip)
  return ip_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AppGuardIpInfo::set_allocated_ip(std::string* ip) {
  if (ip != nullptr) {
    
  } else {
    
  }
  ip_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ip,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:appguard.AppGuardIpInfo.ip)
}
inline std::string* AppGuardIpInfo::unsafe_arena_release_ip() {
  // @@protoc_insertion_point(field_unsafe_arena_release:appguard.AppGuardIpInfo.ip)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return ip_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void AppGuardIpInfo::unsafe_arena_set_allocated_ip(
    std::string* ip) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (ip != nullptr) {
    
  } else {
    
  }
  ip_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ip, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:appguard.AppGuardIpInfo.ip)
}

// string country = 2;
inline bool AppGuardIpInfo::_internal_has_country() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool AppGuardIpInfo::has_country() const {
  return _internal_has_country();
}
inline void AppGuardIpInfo::clear_country() {
  country_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& AppGuardIpInfo::country() const {
  // @@protoc_insertion_point(field_get:appguard.AppGuardIpInfo.country)
  return _internal_country();
}
inline void AppGuardIpInfo::set_country(const std::string& value) {
  _internal_set_country(value);
  // @@protoc_insertion_point(field_set:appguard.AppGuardIpInfo.country)
}
inline std::string* AppGuardIpInfo::mutable_country() {
  // @@protoc_insertion_point(field_mutable:appguard.AppGuardIpInfo.country)
  return _internal_mutable_country();
}
inline const std::string& AppGuardIpInfo::_internal_country() const {
  return country_.Get();
}
inline void AppGuardIpInfo::_internal_set_country(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  country_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void AppGuardIpInfo::set_country(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  country_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:appguard.AppGuardIpInfo.country)
}
inline void AppGuardIpInfo::set_country(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  country_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:appguard.AppGuardIpInfo.country)
}
inline void AppGuardIpInfo::set_country(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  country_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:appguard.AppGuardIpInfo.country)
}
inline std::string* AppGuardIpInfo::_internal_mutable_country() {
  _has_bits_[0] |= 0x00000001u;
  return country_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* AppGuardIpInfo::release_country() {
  // @@protoc_insertion_point(field_release:appguard.AppGuardIpInfo.country)
  if (!_internal_has_country()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return country_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AppGuardIpInfo::set_allocated_country(std::string* country) {
  if (country != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  country_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), country,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:appguard.AppGuardIpInfo.country)
}
inline std::string* AppGuardIpInfo::unsafe_arena_release_country() {
  // @@protoc_insertion_point(field_unsafe_arena_release:appguard.AppGuardIpInfo.country)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000001u;
  return country_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void AppGuardIpInfo::unsafe_arena_set_allocated_country(
    std::string* country) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (country != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  country_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      country, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:appguard.AppGuardIpInfo.country)
}

// string asn = 3;
inline bool AppGuardIpInfo::_internal_has_asn() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool AppGuardIpInfo::has_asn() const {
  return _internal_has_asn();
}
inline void AppGuardIpInfo::clear_asn() {
  asn_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& AppGuardIpInfo::asn() const {
  // @@protoc_insertion_point(field_get:appguard.AppGuardIpInfo.asn)
  return _internal_asn();
}
inline void AppGuardIpInfo::set_asn(const std::string& value) {
  _internal_set_asn(value);
  // @@protoc_insertion_point(field_set:appguard.AppGuardIpInfo.asn)
}
inline std::string* AppGuardIpInfo::mutable_asn() {
  // @@protoc_insertion_point(field_mutable:appguard.AppGuardIpInfo.asn)
  return _internal_mutable_asn();
}
inline const std::string& AppGuardIpInfo::_internal_asn() const {
  return asn_.Get();
}
inline void AppGuardIpInfo::_internal_set_asn(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  asn_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void AppGuardIpInfo::set_asn(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  asn_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:appguard.AppGuardIpInfo.asn)
}
inline void AppGuardIpInfo::set_asn(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  asn_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:appguard.AppGuardIpInfo.asn)
}
inline void AppGuardIpInfo::set_asn(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  asn_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:appguard.AppGuardIpInfo.asn)
}
inline std::string* AppGuardIpInfo::_internal_mutable_asn() {
  _has_bits_[0] |= 0x00000002u;
  return asn_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* AppGuardIpInfo::release_asn() {
  // @@protoc_insertion_point(field_release:appguard.AppGuardIpInfo.asn)
  if (!_internal_has_asn()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return asn_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AppGuardIpInfo::set_allocated_asn(std::string* asn) {
  if (asn != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  asn_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), asn,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:appguard.AppGuardIpInfo.asn)
}
inline std::string* AppGuardIpInfo::unsafe_arena_release_asn() {
  // @@protoc_insertion_point(field_unsafe_arena_release:appguard.AppGuardIpInfo.asn)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000002u;
  return asn_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void AppGuardIpInfo::unsafe_arena_set_allocated_asn(
    std::string* asn) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (asn != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  asn_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      asn, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:appguard.AppGuardIpInfo.asn)
}

// string org = 4;
inline bool AppGuardIpInfo::_internal_has_org() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool AppGuardIpInfo::has_org() const {
  return _internal_has_org();
}
inline void AppGuardIpInfo::clear_org() {
  org_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& AppGuardIpInfo::org() const {
  // @@protoc_insertion_point(field_get:appguard.AppGuardIpInfo.org)
  return _internal_org();
}
inline void AppGuardIpInfo::set_org(const std::string& value) {
  _internal_set_org(value);
  // @@protoc_insertion_point(field_set:appguard.AppGuardIpInfo.org)
}
inline std::string* AppGuardIpInfo::mutable_org() {
  // @@protoc_insertion_point(field_mutable:appguard.AppGuardIpInfo.org)
  return _internal_mutable_org();
}
inline const std::string& AppGuardIpInfo::_internal_org() const {
  return org_.Get();
}
inline void AppGuardIpInfo::_internal_set_org(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  org_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void AppGuardIpInfo::set_org(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  org_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:appguard.AppGuardIpInfo.org)
}
inline void AppGuardIpInfo::set_org(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  org_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:appguard.AppGuardIpInfo.org)
}
inline void AppGuardIpInfo::set_org(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000004u;
  org_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:appguard.AppGuardIpInfo.org)
}
inline std::string* AppGuardIpInfo::_internal_mutable_org() {
  _has_bits_[0] |= 0x00000004u;
  return org_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* AppGuardIpInfo::release_org() {
  // @@protoc_insertion_point(field_release:appguard.AppGuardIpInfo.org)
  if (!_internal_has_org()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return org_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AppGuardIpInfo::set_allocated_org(std::string* org) {
  if (org != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  org_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), org,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:appguard.AppGuardIpInfo.org)
}
inline std::string* AppGuardIpInfo::unsafe_arena_release_org() {
  // @@protoc_insertion_point(field_unsafe_arena_release:appguard.AppGuardIpInfo.org)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000004u;
  return org_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void AppGuardIpInfo::unsafe_arena_set_allocated_org(
    std::string* org) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (org != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  org_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      org, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:appguard.AppGuardIpInfo.org)
}

// string continent_code = 5;
inline bool AppGuardIpInfo::_internal_has_continent_code() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool AppGuardIpInfo::has_continent_code() const {
  return _internal_has_continent_code();
}
inline void AppGuardIpInfo::clear_continent_code() {
  continent_code_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& AppGuardIpInfo::continent_code() const {
  // @@protoc_insertion_point(field_get:appguard.AppGuardIpInfo.continent_code)
  return _internal_continent_code();
}
inline void AppGuardIpInfo::set_continent_code(const std::string& value) {
  _internal_set_continent_code(value);
  // @@protoc_insertion_point(field_set:appguard.AppGuardIpInfo.continent_code)
}
inline std::string* AppGuardIpInfo::mutable_continent_code() {
  // @@protoc_insertion_point(field_mutable:appguard.AppGuardIpInfo.continent_code)
  return _internal_mutable_continent_code();
}
inline const std::string& AppGuardIpInfo::_internal_continent_code() const {
  return continent_code_.Get();
}
inline void AppGuardIpInfo::_internal_set_continent_code(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  continent_code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void AppGuardIpInfo::set_continent_code(std::string&& value) {
  _has_bits_[0] |= 0x00000008u;
  continent_code_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:appguard.AppGuardIpInfo.continent_code)
}
inline void AppGuardIpInfo::set_continent_code(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000008u;
  continent_code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:appguard.AppGuardIpInfo.continent_code)
}
inline void AppGuardIpInfo::set_continent_code(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000008u;
  continent_code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:appguard.AppGuardIpInfo.continent_code)
}
inline std::string* AppGuardIpInfo::_internal_mutable_continent_code() {
  _has_bits_[0] |= 0x00000008u;
  return continent_code_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* AppGuardIpInfo::release_continent_code() {
  // @@protoc_insertion_point(field_release:appguard.AppGuardIpInfo.continent_code)
  if (!_internal_has_continent_code()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  return continent_code_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AppGuardIpInfo::set_allocated_continent_code(std::string* continent_code) {
  if (continent_code != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  continent_code_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), continent_code,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:appguard.AppGuardIpInfo.continent_code)
}
inline std::string* AppGuardIpInfo::unsafe_arena_release_continent_code() {
  // @@protoc_insertion_point(field_unsafe_arena_release:appguard.AppGuardIpInfo.continent_code)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000008u;
  return continent_code_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void AppGuardIpInfo::unsafe_arena_set_allocated_continent_code(
    std::string* continent_code) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (continent_code != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  continent_code_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      continent_code, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:appguard.AppGuardIpInfo.continent_code)
}

// string city = 6;
inline bool AppGuardIpInfo::_internal_has_city() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool AppGuardIpInfo::has_city() const {
  return _internal_has_city();
}
inline void AppGuardIpInfo::clear_city() {
  city_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000010u;
}
inline const std::string& AppGuardIpInfo::city() const {
  // @@protoc_insertion_point(field_get:appguard.AppGuardIpInfo.city)
  return _internal_city();
}
inline void AppGuardIpInfo::set_city(const std::string& value) {
  _internal_set_city(value);
  // @@protoc_insertion_point(field_set:appguard.AppGuardIpInfo.city)
}
inline std::string* AppGuardIpInfo::mutable_city() {
  // @@protoc_insertion_point(field_mutable:appguard.AppGuardIpInfo.city)
  return _internal_mutable_city();
}
inline const std::string& AppGuardIpInfo::_internal_city() const {
  return city_.Get();
}
inline void AppGuardIpInfo::_internal_set_city(const std::string& value) {
  _has_bits_[0] |= 0x00000010u;
  city_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void AppGuardIpInfo::set_city(std::string&& value) {
  _has_bits_[0] |= 0x00000010u;
  city_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:appguard.AppGuardIpInfo.city)
}
inline void AppGuardIpInfo::set_city(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000010u;
  city_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:appguard.AppGuardIpInfo.city)
}
inline void AppGuardIpInfo::set_city(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000010u;
  city_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:appguard.AppGuardIpInfo.city)
}
inline std::string* AppGuardIpInfo::_internal_mutable_city() {
  _has_bits_[0] |= 0x00000010u;
  return city_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* AppGuardIpInfo::release_city() {
  // @@protoc_insertion_point(field_release:appguard.AppGuardIpInfo.city)
  if (!_internal_has_city()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000010u;
  return city_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AppGuardIpInfo::set_allocated_city(std::string* city) {
  if (city != nullptr) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  city_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), city,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:appguard.AppGuardIpInfo.city)
}
inline std::string* AppGuardIpInfo::unsafe_arena_release_city() {
  // @@protoc_insertion_point(field_unsafe_arena_release:appguard.AppGuardIpInfo.city)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000010u;
  return city_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void AppGuardIpInfo::unsafe_arena_set_allocated_city(
    std::string* city) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (city != nullptr) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  city_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      city, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:appguard.AppGuardIpInfo.city)
}

// string region = 7;
inline bool AppGuardIpInfo::_internal_has_region() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool AppGuardIpInfo::has_region() const {
  return _internal_has_region();
}
inline void AppGuardIpInfo::clear_region() {
  region_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000020u;
}
inline const std::string& AppGuardIpInfo::region() const {
  // @@protoc_insertion_point(field_get:appguard.AppGuardIpInfo.region)
  return _internal_region();
}
inline void AppGuardIpInfo::set_region(const std::string& value) {
  _internal_set_region(value);
  // @@protoc_insertion_point(field_set:appguard.AppGuardIpInfo.region)
}
inline std::string* AppGuardIpInfo::mutable_region() {
  // @@protoc_insertion_point(field_mutable:appguard.AppGuardIpInfo.region)
  return _internal_mutable_region();
}
inline const std::string& AppGuardIpInfo::_internal_region() const {
  return region_.Get();
}
inline void AppGuardIpInfo::_internal_set_region(const std::string& value) {
  _has_bits_[0] |= 0x00000020u;
  region_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void AppGuardIpInfo::set_region(std::string&& value) {
  _has_bits_[0] |= 0x00000020u;
  region_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:appguard.AppGuardIpInfo.region)
}
inline void AppGuardIpInfo::set_region(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000020u;
  region_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:appguard.AppGuardIpInfo.region)
}
inline void AppGuardIpInfo::set_region(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000020u;
  region_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:appguard.AppGuardIpInfo.region)
}
inline std::string* AppGuardIpInfo::_internal_mutable_region() {
  _has_bits_[0] |= 0x00000020u;
  return region_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* AppGuardIpInfo::release_region() {
  // @@protoc_insertion_point(field_release:appguard.AppGuardIpInfo.region)
  if (!_internal_has_region()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000020u;
  return region_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AppGuardIpInfo::set_allocated_region(std::string* region) {
  if (region != nullptr) {
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  region_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), region,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:appguard.AppGuardIpInfo.region)
}
inline std::string* AppGuardIpInfo::unsafe_arena_release_region() {
  // @@protoc_insertion_point(field_unsafe_arena_release:appguard.AppGuardIpInfo.region)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000020u;
  return region_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void AppGuardIpInfo::unsafe_arena_set_allocated_region(
    std::string* region) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (region != nullptr) {
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  region_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      region, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:appguard.AppGuardIpInfo.region)
}

// string postal = 8;
inline bool AppGuardIpInfo::_internal_has_postal() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool AppGuardIpInfo::has_postal() const {
  return _internal_has_postal();
}
inline void AppGuardIpInfo::clear_postal() {
  postal_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000040u;
}
inline const std::string& AppGuardIpInfo::postal() const {
  // @@protoc_insertion_point(field_get:appguard.AppGuardIpInfo.postal)
  return _internal_postal();
}
inline void AppGuardIpInfo::set_postal(const std::string& value) {
  _internal_set_postal(value);
  // @@protoc_insertion_point(field_set:appguard.AppGuardIpInfo.postal)
}
inline std::string* AppGuardIpInfo::mutable_postal() {
  // @@protoc_insertion_point(field_mutable:appguard.AppGuardIpInfo.postal)
  return _internal_mutable_postal();
}
inline const std::string& AppGuardIpInfo::_internal_postal() const {
  return postal_.Get();
}
inline void AppGuardIpInfo::_internal_set_postal(const std::string& value) {
  _has_bits_[0] |= 0x00000040u;
  postal_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void AppGuardIpInfo::set_postal(std::string&& value) {
  _has_bits_[0] |= 0x00000040u;
  postal_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:appguard.AppGuardIpInfo.postal)
}
inline void AppGuardIpInfo::set_postal(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000040u;
  postal_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:appguard.AppGuardIpInfo.postal)
}
inline void AppGuardIpInfo::set_postal(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000040u;
  postal_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:appguard.AppGuardIpInfo.postal)
}
inline std::string* AppGuardIpInfo::_internal_mutable_postal() {
  _has_bits_[0] |= 0x00000040u;
  return postal_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* AppGuardIpInfo::release_postal() {
  // @@protoc_insertion_point(field_release:appguard.AppGuardIpInfo.postal)
  if (!_internal_has_postal()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000040u;
  return postal_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AppGuardIpInfo::set_allocated_postal(std::string* postal) {
  if (postal != nullptr) {
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  postal_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), postal,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:appguard.AppGuardIpInfo.postal)
}
inline std::string* AppGuardIpInfo::unsafe_arena_release_postal() {
  // @@protoc_insertion_point(field_unsafe_arena_release:appguard.AppGuardIpInfo.postal)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000040u;
  return postal_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void AppGuardIpInfo::unsafe_arena_set_allocated_postal(
    std::string* postal) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (postal != nullptr) {
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  postal_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      postal, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:appguard.AppGuardIpInfo.postal)
}

// string timezone = 9;
inline bool AppGuardIpInfo::_internal_has_timezone() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool AppGuardIpInfo::has_timezone() const {
  return _internal_has_timezone();
}
inline void AppGuardIpInfo::clear_timezone() {
  timezone_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000080u;
}
inline const std::string& AppGuardIpInfo::timezone() const {
  // @@protoc_insertion_point(field_get:appguard.AppGuardIpInfo.timezone)
  return _internal_timezone();
}
inline void AppGuardIpInfo::set_timezone(const std::string& value) {
  _internal_set_timezone(value);
  // @@protoc_insertion_point(field_set:appguard.AppGuardIpInfo.timezone)
}
inline std::string* AppGuardIpInfo::mutable_timezone() {
  // @@protoc_insertion_point(field_mutable:appguard.AppGuardIpInfo.timezone)
  return _internal_mutable_timezone();
}
inline const std::string& AppGuardIpInfo::_internal_timezone() const {
  return timezone_.Get();
}
inline void AppGuardIpInfo::_internal_set_timezone(const std::string& value) {
  _has_bits_[0] |= 0x00000080u;
  timezone_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void AppGuardIpInfo::set_timezone(std::string&& value) {
  _has_bits_[0] |= 0x00000080u;
  timezone_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:appguard.AppGuardIpInfo.timezone)
}
inline void AppGuardIpInfo::set_timezone(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000080u;
  timezone_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:appguard.AppGuardIpInfo.timezone)
}
inline void AppGuardIpInfo::set_timezone(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000080u;
  timezone_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:appguard.AppGuardIpInfo.timezone)
}
inline std::string* AppGuardIpInfo::_internal_mutable_timezone() {
  _has_bits_[0] |= 0x00000080u;
  return timezone_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* AppGuardIpInfo::release_timezone() {
  // @@protoc_insertion_point(field_release:appguard.AppGuardIpInfo.timezone)
  if (!_internal_has_timezone()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000080u;
  return timezone_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AppGuardIpInfo::set_allocated_timezone(std::string* timezone) {
  if (timezone != nullptr) {
    _has_bits_[0] |= 0x00000080u;
  } else {
    _has_bits_[0] &= ~0x00000080u;
  }
  timezone_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), timezone,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:appguard.AppGuardIpInfo.timezone)
}
inline std::string* AppGuardIpInfo::unsafe_arena_release_timezone() {
  // @@protoc_insertion_point(field_unsafe_arena_release:appguard.AppGuardIpInfo.timezone)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000080u;
  return timezone_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void AppGuardIpInfo::unsafe_arena_set_allocated_timezone(
    std::string* timezone) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (timezone != nullptr) {
    _has_bits_[0] |= 0x00000080u;
  } else {
    _has_bits_[0] &= ~0x00000080u;
  }
  timezone_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      timezone, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:appguard.AppGuardIpInfo.timezone)
}

// bool blacklist = 100;
inline void AppGuardIpInfo::clear_blacklist() {
  blacklist_ = false;
}
inline bool AppGuardIpInfo::_internal_blacklist() const {
  return blacklist_;
}
inline bool AppGuardIpInfo::blacklist() const {
  // @@protoc_insertion_point(field_get:appguard.AppGuardIpInfo.blacklist)
  return _internal_blacklist();
}
inline void AppGuardIpInfo::_internal_set_blacklist(bool value) {
  
  blacklist_ = value;
}
inline void AppGuardIpInfo::set_blacklist(bool value) {
  _internal_set_blacklist(value);
  // @@protoc_insertion_point(field_set:appguard.AppGuardIpInfo.blacklist)
}

// -------------------------------------------------------------------

// AppGuardTcpInfo

// .appguard.AppGuardTcpConnection connection = 1;
inline bool AppGuardTcpInfo::_internal_has_connection() const {
  return this != internal_default_instance() && connection_ != nullptr;
}
inline bool AppGuardTcpInfo::has_connection() const {
  return _internal_has_connection();
}
inline void AppGuardTcpInfo::clear_connection() {
  if (GetArena() == nullptr && connection_ != nullptr) {
    delete connection_;
  }
  connection_ = nullptr;
}
inline const ::appguard::AppGuardTcpConnection& AppGuardTcpInfo::_internal_connection() const {
  const ::appguard::AppGuardTcpConnection* p = connection_;
  return p != nullptr ? *p : *reinterpret_cast<const ::appguard::AppGuardTcpConnection*>(
      &::appguard::_AppGuardTcpConnection_default_instance_);
}
inline const ::appguard::AppGuardTcpConnection& AppGuardTcpInfo::connection() const {
  // @@protoc_insertion_point(field_get:appguard.AppGuardTcpInfo.connection)
  return _internal_connection();
}
inline void AppGuardTcpInfo::unsafe_arena_set_allocated_connection(
    ::appguard::AppGuardTcpConnection* connection) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(connection_);
  }
  connection_ = connection;
  if (connection) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:appguard.AppGuardTcpInfo.connection)
}
inline ::appguard::AppGuardTcpConnection* AppGuardTcpInfo::release_connection() {
  auto temp = unsafe_arena_release_connection();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::appguard::AppGuardTcpConnection* AppGuardTcpInfo::unsafe_arena_release_connection() {
  // @@protoc_insertion_point(field_release:appguard.AppGuardTcpInfo.connection)
  
  ::appguard::AppGuardTcpConnection* temp = connection_;
  connection_ = nullptr;
  return temp;
}
inline ::appguard::AppGuardTcpConnection* AppGuardTcpInfo::_internal_mutable_connection() {
  
  if (connection_ == nullptr) {
    auto* p = CreateMaybeMessage<::appguard::AppGuardTcpConnection>(GetArena());
    connection_ = p;
  }
  return connection_;
}
inline ::appguard::AppGuardTcpConnection* AppGuardTcpInfo::mutable_connection() {
  // @@protoc_insertion_point(field_mutable:appguard.AppGuardTcpInfo.connection)
  return _internal_mutable_connection();
}
inline void AppGuardTcpInfo::set_allocated_connection(::appguard::AppGuardTcpConnection* connection) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete connection_;
  }
  if (connection) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(connection);
    if (message_arena != submessage_arena) {
      connection = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, connection, submessage_arena);
    }
    
  } else {
    
  }
  connection_ = connection;
  // @@protoc_insertion_point(field_set_allocated:appguard.AppGuardTcpInfo.connection)
}

// .appguard.AppGuardIpInfo ip_info = 2;
inline bool AppGuardTcpInfo::_internal_has_ip_info() const {
  return this != internal_default_instance() && ip_info_ != nullptr;
}
inline bool AppGuardTcpInfo::has_ip_info() const {
  return _internal_has_ip_info();
}
inline void AppGuardTcpInfo::clear_ip_info() {
  if (GetArena() == nullptr && ip_info_ != nullptr) {
    delete ip_info_;
  }
  ip_info_ = nullptr;
}
inline const ::appguard::AppGuardIpInfo& AppGuardTcpInfo::_internal_ip_info() const {
  const ::appguard::AppGuardIpInfo* p = ip_info_;
  return p != nullptr ? *p : *reinterpret_cast<const ::appguard::AppGuardIpInfo*>(
      &::appguard::_AppGuardIpInfo_default_instance_);
}
inline const ::appguard::AppGuardIpInfo& AppGuardTcpInfo::ip_info() const {
  // @@protoc_insertion_point(field_get:appguard.AppGuardTcpInfo.ip_info)
  return _internal_ip_info();
}
inline void AppGuardTcpInfo::unsafe_arena_set_allocated_ip_info(
    ::appguard::AppGuardIpInfo* ip_info) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ip_info_);
  }
  ip_info_ = ip_info;
  if (ip_info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:appguard.AppGuardTcpInfo.ip_info)
}
inline ::appguard::AppGuardIpInfo* AppGuardTcpInfo::release_ip_info() {
  auto temp = unsafe_arena_release_ip_info();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::appguard::AppGuardIpInfo* AppGuardTcpInfo::unsafe_arena_release_ip_info() {
  // @@protoc_insertion_point(field_release:appguard.AppGuardTcpInfo.ip_info)
  
  ::appguard::AppGuardIpInfo* temp = ip_info_;
  ip_info_ = nullptr;
  return temp;
}
inline ::appguard::AppGuardIpInfo* AppGuardTcpInfo::_internal_mutable_ip_info() {
  
  if (ip_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::appguard::AppGuardIpInfo>(GetArena());
    ip_info_ = p;
  }
  return ip_info_;
}
inline ::appguard::AppGuardIpInfo* AppGuardTcpInfo::mutable_ip_info() {
  // @@protoc_insertion_point(field_mutable:appguard.AppGuardTcpInfo.ip_info)
  return _internal_mutable_ip_info();
}
inline void AppGuardTcpInfo::set_allocated_ip_info(::appguard::AppGuardIpInfo* ip_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete ip_info_;
  }
  if (ip_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(ip_info);
    if (message_arena != submessage_arena) {
      ip_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ip_info, submessage_arena);
    }
    
  } else {
    
  }
  ip_info_ = ip_info;
  // @@protoc_insertion_point(field_set_allocated:appguard.AppGuardTcpInfo.ip_info)
}

// uint64 tcp_id = 3;
inline void AppGuardTcpInfo::clear_tcp_id() {
  tcp_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 AppGuardTcpInfo::_internal_tcp_id() const {
  return tcp_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 AppGuardTcpInfo::tcp_id() const {
  // @@protoc_insertion_point(field_get:appguard.AppGuardTcpInfo.tcp_id)
  return _internal_tcp_id();
}
inline void AppGuardTcpInfo::_internal_set_tcp_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  tcp_id_ = value;
}
inline void AppGuardTcpInfo::set_tcp_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_tcp_id(value);
  // @@protoc_insertion_point(field_set:appguard.AppGuardTcpInfo.tcp_id)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// AppGuardHttpRequest

// string token = 1;
inline void AppGuardHttpRequest::clear_token() {
  token_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& AppGuardHttpRequest::token() const {
  // @@protoc_insertion_point(field_get:appguard.AppGuardHttpRequest.token)
  return _internal_token();
}
inline void AppGuardHttpRequest::set_token(const std::string& value) {
  _internal_set_token(value);
  // @@protoc_insertion_point(field_set:appguard.AppGuardHttpRequest.token)
}
inline std::string* AppGuardHttpRequest::mutable_token() {
  // @@protoc_insertion_point(field_mutable:appguard.AppGuardHttpRequest.token)
  return _internal_mutable_token();
}
inline const std::string& AppGuardHttpRequest::_internal_token() const {
  return token_.Get();
}
inline void AppGuardHttpRequest::_internal_set_token(const std::string& value) {
  
  token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void AppGuardHttpRequest::set_token(std::string&& value) {
  
  token_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:appguard.AppGuardHttpRequest.token)
}
inline void AppGuardHttpRequest::set_token(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:appguard.AppGuardHttpRequest.token)
}
inline void AppGuardHttpRequest::set_token(const char* value,
    size_t size) {
  
  token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:appguard.AppGuardHttpRequest.token)
}
inline std::string* AppGuardHttpRequest::_internal_mutable_token() {
  
  return token_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* AppGuardHttpRequest::release_token() {
  // @@protoc_insertion_point(field_release:appguard.AppGuardHttpRequest.token)
  return token_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AppGuardHttpRequest::set_allocated_token(std::string* token) {
  if (token != nullptr) {
    
  } else {
    
  }
  token_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), token,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:appguard.AppGuardHttpRequest.token)
}
inline std::string* AppGuardHttpRequest::unsafe_arena_release_token() {
  // @@protoc_insertion_point(field_unsafe_arena_release:appguard.AppGuardHttpRequest.token)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return token_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void AppGuardHttpRequest::unsafe_arena_set_allocated_token(
    std::string* token) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (token != nullptr) {
    
  } else {
    
  }
  token_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      token, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:appguard.AppGuardHttpRequest.token)
}

// string original_url = 2;
inline void AppGuardHttpRequest::clear_original_url() {
  original_url_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& AppGuardHttpRequest::original_url() const {
  // @@protoc_insertion_point(field_get:appguard.AppGuardHttpRequest.original_url)
  return _internal_original_url();
}
inline void AppGuardHttpRequest::set_original_url(const std::string& value) {
  _internal_set_original_url(value);
  // @@protoc_insertion_point(field_set:appguard.AppGuardHttpRequest.original_url)
}
inline std::string* AppGuardHttpRequest::mutable_original_url() {
  // @@protoc_insertion_point(field_mutable:appguard.AppGuardHttpRequest.original_url)
  return _internal_mutable_original_url();
}
inline const std::string& AppGuardHttpRequest::_internal_original_url() const {
  return original_url_.Get();
}
inline void AppGuardHttpRequest::_internal_set_original_url(const std::string& value) {
  
  original_url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void AppGuardHttpRequest::set_original_url(std::string&& value) {
  
  original_url_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:appguard.AppGuardHttpRequest.original_url)
}
inline void AppGuardHttpRequest::set_original_url(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  original_url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:appguard.AppGuardHttpRequest.original_url)
}
inline void AppGuardHttpRequest::set_original_url(const char* value,
    size_t size) {
  
  original_url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:appguard.AppGuardHttpRequest.original_url)
}
inline std::string* AppGuardHttpRequest::_internal_mutable_original_url() {
  
  return original_url_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* AppGuardHttpRequest::release_original_url() {
  // @@protoc_insertion_point(field_release:appguard.AppGuardHttpRequest.original_url)
  return original_url_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AppGuardHttpRequest::set_allocated_original_url(std::string* original_url) {
  if (original_url != nullptr) {
    
  } else {
    
  }
  original_url_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), original_url,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:appguard.AppGuardHttpRequest.original_url)
}
inline std::string* AppGuardHttpRequest::unsafe_arena_release_original_url() {
  // @@protoc_insertion_point(field_unsafe_arena_release:appguard.AppGuardHttpRequest.original_url)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return original_url_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void AppGuardHttpRequest::unsafe_arena_set_allocated_original_url(
    std::string* original_url) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (original_url != nullptr) {
    
  } else {
    
  }
  original_url_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      original_url, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:appguard.AppGuardHttpRequest.original_url)
}

// map<string, string> headers = 3;
inline int AppGuardHttpRequest::_internal_headers_size() const {
  return headers_.size();
}
inline int AppGuardHttpRequest::headers_size() const {
  return _internal_headers_size();
}
inline void AppGuardHttpRequest::clear_headers() {
  headers_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
AppGuardHttpRequest::_internal_headers() const {
  return headers_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
AppGuardHttpRequest::headers() const {
  // @@protoc_insertion_point(field_map:appguard.AppGuardHttpRequest.headers)
  return _internal_headers();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
AppGuardHttpRequest::_internal_mutable_headers() {
  return headers_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
AppGuardHttpRequest::mutable_headers() {
  // @@protoc_insertion_point(field_mutable_map:appguard.AppGuardHttpRequest.headers)
  return _internal_mutable_headers();
}

// string method = 4;
inline void AppGuardHttpRequest::clear_method() {
  method_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& AppGuardHttpRequest::method() const {
  // @@protoc_insertion_point(field_get:appguard.AppGuardHttpRequest.method)
  return _internal_method();
}
inline void AppGuardHttpRequest::set_method(const std::string& value) {
  _internal_set_method(value);
  // @@protoc_insertion_point(field_set:appguard.AppGuardHttpRequest.method)
}
inline std::string* AppGuardHttpRequest::mutable_method() {
  // @@protoc_insertion_point(field_mutable:appguard.AppGuardHttpRequest.method)
  return _internal_mutable_method();
}
inline const std::string& AppGuardHttpRequest::_internal_method() const {
  return method_.Get();
}
inline void AppGuardHttpRequest::_internal_set_method(const std::string& value) {
  
  method_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void AppGuardHttpRequest::set_method(std::string&& value) {
  
  method_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:appguard.AppGuardHttpRequest.method)
}
inline void AppGuardHttpRequest::set_method(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  method_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:appguard.AppGuardHttpRequest.method)
}
inline void AppGuardHttpRequest::set_method(const char* value,
    size_t size) {
  
  method_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:appguard.AppGuardHttpRequest.method)
}
inline std::string* AppGuardHttpRequest::_internal_mutable_method() {
  
  return method_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* AppGuardHttpRequest::release_method() {
  // @@protoc_insertion_point(field_release:appguard.AppGuardHttpRequest.method)
  return method_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AppGuardHttpRequest::set_allocated_method(std::string* method) {
  if (method != nullptr) {
    
  } else {
    
  }
  method_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), method,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:appguard.AppGuardHttpRequest.method)
}
inline std::string* AppGuardHttpRequest::unsafe_arena_release_method() {
  // @@protoc_insertion_point(field_unsafe_arena_release:appguard.AppGuardHttpRequest.method)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return method_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void AppGuardHttpRequest::unsafe_arena_set_allocated_method(
    std::string* method) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (method != nullptr) {
    
  } else {
    
  }
  method_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      method, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:appguard.AppGuardHttpRequest.method)
}

// string body = 5;
inline bool AppGuardHttpRequest::_internal_has_body() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool AppGuardHttpRequest::has_body() const {
  return _internal_has_body();
}
inline void AppGuardHttpRequest::clear_body() {
  body_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& AppGuardHttpRequest::body() const {
  // @@protoc_insertion_point(field_get:appguard.AppGuardHttpRequest.body)
  return _internal_body();
}
inline void AppGuardHttpRequest::set_body(const std::string& value) {
  _internal_set_body(value);
  // @@protoc_insertion_point(field_set:appguard.AppGuardHttpRequest.body)
}
inline std::string* AppGuardHttpRequest::mutable_body() {
  // @@protoc_insertion_point(field_mutable:appguard.AppGuardHttpRequest.body)
  return _internal_mutable_body();
}
inline const std::string& AppGuardHttpRequest::_internal_body() const {
  return body_.Get();
}
inline void AppGuardHttpRequest::_internal_set_body(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  body_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void AppGuardHttpRequest::set_body(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  body_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:appguard.AppGuardHttpRequest.body)
}
inline void AppGuardHttpRequest::set_body(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  body_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:appguard.AppGuardHttpRequest.body)
}
inline void AppGuardHttpRequest::set_body(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  body_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:appguard.AppGuardHttpRequest.body)
}
inline std::string* AppGuardHttpRequest::_internal_mutable_body() {
  _has_bits_[0] |= 0x00000001u;
  return body_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* AppGuardHttpRequest::release_body() {
  // @@protoc_insertion_point(field_release:appguard.AppGuardHttpRequest.body)
  if (!_internal_has_body()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return body_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AppGuardHttpRequest::set_allocated_body(std::string* body) {
  if (body != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  body_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), body,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:appguard.AppGuardHttpRequest.body)
}
inline std::string* AppGuardHttpRequest::unsafe_arena_release_body() {
  // @@protoc_insertion_point(field_unsafe_arena_release:appguard.AppGuardHttpRequest.body)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000001u;
  return body_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void AppGuardHttpRequest::unsafe_arena_set_allocated_body(
    std::string* body) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (body != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  body_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      body, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:appguard.AppGuardHttpRequest.body)
}

// map<string, string> query = 6;
inline int AppGuardHttpRequest::_internal_query_size() const {
  return query_.size();
}
inline int AppGuardHttpRequest::query_size() const {
  return _internal_query_size();
}
inline void AppGuardHttpRequest::clear_query() {
  query_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
AppGuardHttpRequest::_internal_query() const {
  return query_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
AppGuardHttpRequest::query() const {
  // @@protoc_insertion_point(field_map:appguard.AppGuardHttpRequest.query)
  return _internal_query();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
AppGuardHttpRequest::_internal_mutable_query() {
  return query_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
AppGuardHttpRequest::mutable_query() {
  // @@protoc_insertion_point(field_mutable_map:appguard.AppGuardHttpRequest.query)
  return _internal_mutable_query();
}

// .appguard.AppGuardTcpInfo tcp_info = 100;
inline bool AppGuardHttpRequest::_internal_has_tcp_info() const {
  return this != internal_default_instance() && tcp_info_ != nullptr;
}
inline bool AppGuardHttpRequest::has_tcp_info() const {
  return _internal_has_tcp_info();
}
inline void AppGuardHttpRequest::clear_tcp_info() {
  if (GetArena() == nullptr && tcp_info_ != nullptr) {
    delete tcp_info_;
  }
  tcp_info_ = nullptr;
}
inline const ::appguard::AppGuardTcpInfo& AppGuardHttpRequest::_internal_tcp_info() const {
  const ::appguard::AppGuardTcpInfo* p = tcp_info_;
  return p != nullptr ? *p : *reinterpret_cast<const ::appguard::AppGuardTcpInfo*>(
      &::appguard::_AppGuardTcpInfo_default_instance_);
}
inline const ::appguard::AppGuardTcpInfo& AppGuardHttpRequest::tcp_info() const {
  // @@protoc_insertion_point(field_get:appguard.AppGuardHttpRequest.tcp_info)
  return _internal_tcp_info();
}
inline void AppGuardHttpRequest::unsafe_arena_set_allocated_tcp_info(
    ::appguard::AppGuardTcpInfo* tcp_info) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tcp_info_);
  }
  tcp_info_ = tcp_info;
  if (tcp_info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:appguard.AppGuardHttpRequest.tcp_info)
}
inline ::appguard::AppGuardTcpInfo* AppGuardHttpRequest::release_tcp_info() {
  auto temp = unsafe_arena_release_tcp_info();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::appguard::AppGuardTcpInfo* AppGuardHttpRequest::unsafe_arena_release_tcp_info() {
  // @@protoc_insertion_point(field_release:appguard.AppGuardHttpRequest.tcp_info)
  
  ::appguard::AppGuardTcpInfo* temp = tcp_info_;
  tcp_info_ = nullptr;
  return temp;
}
inline ::appguard::AppGuardTcpInfo* AppGuardHttpRequest::_internal_mutable_tcp_info() {
  
  if (tcp_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::appguard::AppGuardTcpInfo>(GetArena());
    tcp_info_ = p;
  }
  return tcp_info_;
}
inline ::appguard::AppGuardTcpInfo* AppGuardHttpRequest::mutable_tcp_info() {
  // @@protoc_insertion_point(field_mutable:appguard.AppGuardHttpRequest.tcp_info)
  return _internal_mutable_tcp_info();
}
inline void AppGuardHttpRequest::set_allocated_tcp_info(::appguard::AppGuardTcpInfo* tcp_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete tcp_info_;
  }
  if (tcp_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(tcp_info);
    if (message_arena != submessage_arena) {
      tcp_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tcp_info, submessage_arena);
    }
    
  } else {
    
  }
  tcp_info_ = tcp_info;
  // @@protoc_insertion_point(field_set_allocated:appguard.AppGuardHttpRequest.tcp_info)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// AppGuardHttpResponse

// string token = 1;
inline void AppGuardHttpResponse::clear_token() {
  token_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& AppGuardHttpResponse::token() const {
  // @@protoc_insertion_point(field_get:appguard.AppGuardHttpResponse.token)
  return _internal_token();
}
inline void AppGuardHttpResponse::set_token(const std::string& value) {
  _internal_set_token(value);
  // @@protoc_insertion_point(field_set:appguard.AppGuardHttpResponse.token)
}
inline std::string* AppGuardHttpResponse::mutable_token() {
  // @@protoc_insertion_point(field_mutable:appguard.AppGuardHttpResponse.token)
  return _internal_mutable_token();
}
inline const std::string& AppGuardHttpResponse::_internal_token() const {
  return token_.Get();
}
inline void AppGuardHttpResponse::_internal_set_token(const std::string& value) {
  
  token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void AppGuardHttpResponse::set_token(std::string&& value) {
  
  token_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:appguard.AppGuardHttpResponse.token)
}
inline void AppGuardHttpResponse::set_token(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:appguard.AppGuardHttpResponse.token)
}
inline void AppGuardHttpResponse::set_token(const char* value,
    size_t size) {
  
  token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:appguard.AppGuardHttpResponse.token)
}
inline std::string* AppGuardHttpResponse::_internal_mutable_token() {
  
  return token_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* AppGuardHttpResponse::release_token() {
  // @@protoc_insertion_point(field_release:appguard.AppGuardHttpResponse.token)
  return token_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AppGuardHttpResponse::set_allocated_token(std::string* token) {
  if (token != nullptr) {
    
  } else {
    
  }
  token_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), token,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:appguard.AppGuardHttpResponse.token)
}
inline std::string* AppGuardHttpResponse::unsafe_arena_release_token() {
  // @@protoc_insertion_point(field_unsafe_arena_release:appguard.AppGuardHttpResponse.token)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return token_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void AppGuardHttpResponse::unsafe_arena_set_allocated_token(
    std::string* token) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (token != nullptr) {
    
  } else {
    
  }
  token_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      token, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:appguard.AppGuardHttpResponse.token)
}

// uint32 code = 2;
inline void AppGuardHttpResponse::clear_code() {
  code_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 AppGuardHttpResponse::_internal_code() const {
  return code_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 AppGuardHttpResponse::code() const {
  // @@protoc_insertion_point(field_get:appguard.AppGuardHttpResponse.code)
  return _internal_code();
}
inline void AppGuardHttpResponse::_internal_set_code(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  code_ = value;
}
inline void AppGuardHttpResponse::set_code(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_code(value);
  // @@protoc_insertion_point(field_set:appguard.AppGuardHttpResponse.code)
}

// map<string, string> headers = 3;
inline int AppGuardHttpResponse::_internal_headers_size() const {
  return headers_.size();
}
inline int AppGuardHttpResponse::headers_size() const {
  return _internal_headers_size();
}
inline void AppGuardHttpResponse::clear_headers() {
  headers_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
AppGuardHttpResponse::_internal_headers() const {
  return headers_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
AppGuardHttpResponse::headers() const {
  // @@protoc_insertion_point(field_map:appguard.AppGuardHttpResponse.headers)
  return _internal_headers();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
AppGuardHttpResponse::_internal_mutable_headers() {
  return headers_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
AppGuardHttpResponse::mutable_headers() {
  // @@protoc_insertion_point(field_mutable_map:appguard.AppGuardHttpResponse.headers)
  return _internal_mutable_headers();
}

// .appguard.AppGuardTcpInfo tcp_info = 100;
inline bool AppGuardHttpResponse::_internal_has_tcp_info() const {
  return this != internal_default_instance() && tcp_info_ != nullptr;
}
inline bool AppGuardHttpResponse::has_tcp_info() const {
  return _internal_has_tcp_info();
}
inline void AppGuardHttpResponse::clear_tcp_info() {
  if (GetArena() == nullptr && tcp_info_ != nullptr) {
    delete tcp_info_;
  }
  tcp_info_ = nullptr;
}
inline const ::appguard::AppGuardTcpInfo& AppGuardHttpResponse::_internal_tcp_info() const {
  const ::appguard::AppGuardTcpInfo* p = tcp_info_;
  return p != nullptr ? *p : *reinterpret_cast<const ::appguard::AppGuardTcpInfo*>(
      &::appguard::_AppGuardTcpInfo_default_instance_);
}
inline const ::appguard::AppGuardTcpInfo& AppGuardHttpResponse::tcp_info() const {
  // @@protoc_insertion_point(field_get:appguard.AppGuardHttpResponse.tcp_info)
  return _internal_tcp_info();
}
inline void AppGuardHttpResponse::unsafe_arena_set_allocated_tcp_info(
    ::appguard::AppGuardTcpInfo* tcp_info) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tcp_info_);
  }
  tcp_info_ = tcp_info;
  if (tcp_info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:appguard.AppGuardHttpResponse.tcp_info)
}
inline ::appguard::AppGuardTcpInfo* AppGuardHttpResponse::release_tcp_info() {
  auto temp = unsafe_arena_release_tcp_info();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::appguard::AppGuardTcpInfo* AppGuardHttpResponse::unsafe_arena_release_tcp_info() {
  // @@protoc_insertion_point(field_release:appguard.AppGuardHttpResponse.tcp_info)
  
  ::appguard::AppGuardTcpInfo* temp = tcp_info_;
  tcp_info_ = nullptr;
  return temp;
}
inline ::appguard::AppGuardTcpInfo* AppGuardHttpResponse::_internal_mutable_tcp_info() {
  
  if (tcp_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::appguard::AppGuardTcpInfo>(GetArena());
    tcp_info_ = p;
  }
  return tcp_info_;
}
inline ::appguard::AppGuardTcpInfo* AppGuardHttpResponse::mutable_tcp_info() {
  // @@protoc_insertion_point(field_mutable:appguard.AppGuardHttpResponse.tcp_info)
  return _internal_mutable_tcp_info();
}
inline void AppGuardHttpResponse::set_allocated_tcp_info(::appguard::AppGuardTcpInfo* tcp_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete tcp_info_;
  }
  if (tcp_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(tcp_info);
    if (message_arena != submessage_arena) {
      tcp_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tcp_info, submessage_arena);
    }
    
  } else {
    
  }
  tcp_info_ = tcp_info;
  // @@protoc_insertion_point(field_set_allocated:appguard.AppGuardHttpResponse.tcp_info)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// AppGuardSmtpRequest

// string token = 1;
inline void AppGuardSmtpRequest::clear_token() {
  token_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& AppGuardSmtpRequest::token() const {
  // @@protoc_insertion_point(field_get:appguard.AppGuardSmtpRequest.token)
  return _internal_token();
}
inline void AppGuardSmtpRequest::set_token(const std::string& value) {
  _internal_set_token(value);
  // @@protoc_insertion_point(field_set:appguard.AppGuardSmtpRequest.token)
}
inline std::string* AppGuardSmtpRequest::mutable_token() {
  // @@protoc_insertion_point(field_mutable:appguard.AppGuardSmtpRequest.token)
  return _internal_mutable_token();
}
inline const std::string& AppGuardSmtpRequest::_internal_token() const {
  return token_.Get();
}
inline void AppGuardSmtpRequest::_internal_set_token(const std::string& value) {
  
  token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void AppGuardSmtpRequest::set_token(std::string&& value) {
  
  token_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:appguard.AppGuardSmtpRequest.token)
}
inline void AppGuardSmtpRequest::set_token(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:appguard.AppGuardSmtpRequest.token)
}
inline void AppGuardSmtpRequest::set_token(const char* value,
    size_t size) {
  
  token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:appguard.AppGuardSmtpRequest.token)
}
inline std::string* AppGuardSmtpRequest::_internal_mutable_token() {
  
  return token_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* AppGuardSmtpRequest::release_token() {
  // @@protoc_insertion_point(field_release:appguard.AppGuardSmtpRequest.token)
  return token_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AppGuardSmtpRequest::set_allocated_token(std::string* token) {
  if (token != nullptr) {
    
  } else {
    
  }
  token_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), token,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:appguard.AppGuardSmtpRequest.token)
}
inline std::string* AppGuardSmtpRequest::unsafe_arena_release_token() {
  // @@protoc_insertion_point(field_unsafe_arena_release:appguard.AppGuardSmtpRequest.token)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return token_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void AppGuardSmtpRequest::unsafe_arena_set_allocated_token(
    std::string* token) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (token != nullptr) {
    
  } else {
    
  }
  token_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      token, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:appguard.AppGuardSmtpRequest.token)
}

// map<string, string> headers = 2;
inline int AppGuardSmtpRequest::_internal_headers_size() const {
  return headers_.size();
}
inline int AppGuardSmtpRequest::headers_size() const {
  return _internal_headers_size();
}
inline void AppGuardSmtpRequest::clear_headers() {
  headers_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
AppGuardSmtpRequest::_internal_headers() const {
  return headers_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
AppGuardSmtpRequest::headers() const {
  // @@protoc_insertion_point(field_map:appguard.AppGuardSmtpRequest.headers)
  return _internal_headers();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
AppGuardSmtpRequest::_internal_mutable_headers() {
  return headers_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
AppGuardSmtpRequest::mutable_headers() {
  // @@protoc_insertion_point(field_mutable_map:appguard.AppGuardSmtpRequest.headers)
  return _internal_mutable_headers();
}

// string body = 3;
inline bool AppGuardSmtpRequest::_internal_has_body() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool AppGuardSmtpRequest::has_body() const {
  return _internal_has_body();
}
inline void AppGuardSmtpRequest::clear_body() {
  body_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& AppGuardSmtpRequest::body() const {
  // @@protoc_insertion_point(field_get:appguard.AppGuardSmtpRequest.body)
  return _internal_body();
}
inline void AppGuardSmtpRequest::set_body(const std::string& value) {
  _internal_set_body(value);
  // @@protoc_insertion_point(field_set:appguard.AppGuardSmtpRequest.body)
}
inline std::string* AppGuardSmtpRequest::mutable_body() {
  // @@protoc_insertion_point(field_mutable:appguard.AppGuardSmtpRequest.body)
  return _internal_mutable_body();
}
inline const std::string& AppGuardSmtpRequest::_internal_body() const {
  return body_.Get();
}
inline void AppGuardSmtpRequest::_internal_set_body(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  body_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void AppGuardSmtpRequest::set_body(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  body_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:appguard.AppGuardSmtpRequest.body)
}
inline void AppGuardSmtpRequest::set_body(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  body_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:appguard.AppGuardSmtpRequest.body)
}
inline void AppGuardSmtpRequest::set_body(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  body_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:appguard.AppGuardSmtpRequest.body)
}
inline std::string* AppGuardSmtpRequest::_internal_mutable_body() {
  _has_bits_[0] |= 0x00000001u;
  return body_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* AppGuardSmtpRequest::release_body() {
  // @@protoc_insertion_point(field_release:appguard.AppGuardSmtpRequest.body)
  if (!_internal_has_body()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return body_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AppGuardSmtpRequest::set_allocated_body(std::string* body) {
  if (body != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  body_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), body,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:appguard.AppGuardSmtpRequest.body)
}
inline std::string* AppGuardSmtpRequest::unsafe_arena_release_body() {
  // @@protoc_insertion_point(field_unsafe_arena_release:appguard.AppGuardSmtpRequest.body)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000001u;
  return body_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void AppGuardSmtpRequest::unsafe_arena_set_allocated_body(
    std::string* body) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (body != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  body_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      body, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:appguard.AppGuardSmtpRequest.body)
}

// .appguard.AppGuardTcpInfo tcp_info = 100;
inline bool AppGuardSmtpRequest::_internal_has_tcp_info() const {
  return this != internal_default_instance() && tcp_info_ != nullptr;
}
inline bool AppGuardSmtpRequest::has_tcp_info() const {
  return _internal_has_tcp_info();
}
inline void AppGuardSmtpRequest::clear_tcp_info() {
  if (GetArena() == nullptr && tcp_info_ != nullptr) {
    delete tcp_info_;
  }
  tcp_info_ = nullptr;
}
inline const ::appguard::AppGuardTcpInfo& AppGuardSmtpRequest::_internal_tcp_info() const {
  const ::appguard::AppGuardTcpInfo* p = tcp_info_;
  return p != nullptr ? *p : *reinterpret_cast<const ::appguard::AppGuardTcpInfo*>(
      &::appguard::_AppGuardTcpInfo_default_instance_);
}
inline const ::appguard::AppGuardTcpInfo& AppGuardSmtpRequest::tcp_info() const {
  // @@protoc_insertion_point(field_get:appguard.AppGuardSmtpRequest.tcp_info)
  return _internal_tcp_info();
}
inline void AppGuardSmtpRequest::unsafe_arena_set_allocated_tcp_info(
    ::appguard::AppGuardTcpInfo* tcp_info) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tcp_info_);
  }
  tcp_info_ = tcp_info;
  if (tcp_info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:appguard.AppGuardSmtpRequest.tcp_info)
}
inline ::appguard::AppGuardTcpInfo* AppGuardSmtpRequest::release_tcp_info() {
  auto temp = unsafe_arena_release_tcp_info();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::appguard::AppGuardTcpInfo* AppGuardSmtpRequest::unsafe_arena_release_tcp_info() {
  // @@protoc_insertion_point(field_release:appguard.AppGuardSmtpRequest.tcp_info)
  
  ::appguard::AppGuardTcpInfo* temp = tcp_info_;
  tcp_info_ = nullptr;
  return temp;
}
inline ::appguard::AppGuardTcpInfo* AppGuardSmtpRequest::_internal_mutable_tcp_info() {
  
  if (tcp_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::appguard::AppGuardTcpInfo>(GetArena());
    tcp_info_ = p;
  }
  return tcp_info_;
}
inline ::appguard::AppGuardTcpInfo* AppGuardSmtpRequest::mutable_tcp_info() {
  // @@protoc_insertion_point(field_mutable:appguard.AppGuardSmtpRequest.tcp_info)
  return _internal_mutable_tcp_info();
}
inline void AppGuardSmtpRequest::set_allocated_tcp_info(::appguard::AppGuardTcpInfo* tcp_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete tcp_info_;
  }
  if (tcp_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(tcp_info);
    if (message_arena != submessage_arena) {
      tcp_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tcp_info, submessage_arena);
    }
    
  } else {
    
  }
  tcp_info_ = tcp_info;
  // @@protoc_insertion_point(field_set_allocated:appguard.AppGuardSmtpRequest.tcp_info)
}

// -------------------------------------------------------------------

// AppGuardSmtpResponse

// string token = 1;
inline void AppGuardSmtpResponse::clear_token() {
  token_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& AppGuardSmtpResponse::token() const {
  // @@protoc_insertion_point(field_get:appguard.AppGuardSmtpResponse.token)
  return _internal_token();
}
inline void AppGuardSmtpResponse::set_token(const std::string& value) {
  _internal_set_token(value);
  // @@protoc_insertion_point(field_set:appguard.AppGuardSmtpResponse.token)
}
inline std::string* AppGuardSmtpResponse::mutable_token() {
  // @@protoc_insertion_point(field_mutable:appguard.AppGuardSmtpResponse.token)
  return _internal_mutable_token();
}
inline const std::string& AppGuardSmtpResponse::_internal_token() const {
  return token_.Get();
}
inline void AppGuardSmtpResponse::_internal_set_token(const std::string& value) {
  
  token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void AppGuardSmtpResponse::set_token(std::string&& value) {
  
  token_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:appguard.AppGuardSmtpResponse.token)
}
inline void AppGuardSmtpResponse::set_token(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:appguard.AppGuardSmtpResponse.token)
}
inline void AppGuardSmtpResponse::set_token(const char* value,
    size_t size) {
  
  token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:appguard.AppGuardSmtpResponse.token)
}
inline std::string* AppGuardSmtpResponse::_internal_mutable_token() {
  
  return token_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* AppGuardSmtpResponse::release_token() {
  // @@protoc_insertion_point(field_release:appguard.AppGuardSmtpResponse.token)
  return token_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AppGuardSmtpResponse::set_allocated_token(std::string* token) {
  if (token != nullptr) {
    
  } else {
    
  }
  token_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), token,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:appguard.AppGuardSmtpResponse.token)
}
inline std::string* AppGuardSmtpResponse::unsafe_arena_release_token() {
  // @@protoc_insertion_point(field_unsafe_arena_release:appguard.AppGuardSmtpResponse.token)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return token_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void AppGuardSmtpResponse::unsafe_arena_set_allocated_token(
    std::string* token) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (token != nullptr) {
    
  } else {
    
  }
  token_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      token, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:appguard.AppGuardSmtpResponse.token)
}

// uint32 code = 2;
inline bool AppGuardSmtpResponse::_internal_has_code() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool AppGuardSmtpResponse::has_code() const {
  return _internal_has_code();
}
inline void AppGuardSmtpResponse::clear_code() {
  code_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 AppGuardSmtpResponse::_internal_code() const {
  return code_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 AppGuardSmtpResponse::code() const {
  // @@protoc_insertion_point(field_get:appguard.AppGuardSmtpResponse.code)
  return _internal_code();
}
inline void AppGuardSmtpResponse::_internal_set_code(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  code_ = value;
}
inline void AppGuardSmtpResponse::set_code(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_code(value);
  // @@protoc_insertion_point(field_set:appguard.AppGuardSmtpResponse.code)
}

// .appguard.AppGuardTcpInfo tcp_info = 100;
inline bool AppGuardSmtpResponse::_internal_has_tcp_info() const {
  return this != internal_default_instance() && tcp_info_ != nullptr;
}
inline bool AppGuardSmtpResponse::has_tcp_info() const {
  return _internal_has_tcp_info();
}
inline void AppGuardSmtpResponse::clear_tcp_info() {
  if (GetArena() == nullptr && tcp_info_ != nullptr) {
    delete tcp_info_;
  }
  tcp_info_ = nullptr;
}
inline const ::appguard::AppGuardTcpInfo& AppGuardSmtpResponse::_internal_tcp_info() const {
  const ::appguard::AppGuardTcpInfo* p = tcp_info_;
  return p != nullptr ? *p : *reinterpret_cast<const ::appguard::AppGuardTcpInfo*>(
      &::appguard::_AppGuardTcpInfo_default_instance_);
}
inline const ::appguard::AppGuardTcpInfo& AppGuardSmtpResponse::tcp_info() const {
  // @@protoc_insertion_point(field_get:appguard.AppGuardSmtpResponse.tcp_info)
  return _internal_tcp_info();
}
inline void AppGuardSmtpResponse::unsafe_arena_set_allocated_tcp_info(
    ::appguard::AppGuardTcpInfo* tcp_info) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tcp_info_);
  }
  tcp_info_ = tcp_info;
  if (tcp_info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:appguard.AppGuardSmtpResponse.tcp_info)
}
inline ::appguard::AppGuardTcpInfo* AppGuardSmtpResponse::release_tcp_info() {
  auto temp = unsafe_arena_release_tcp_info();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::appguard::AppGuardTcpInfo* AppGuardSmtpResponse::unsafe_arena_release_tcp_info() {
  // @@protoc_insertion_point(field_release:appguard.AppGuardSmtpResponse.tcp_info)
  
  ::appguard::AppGuardTcpInfo* temp = tcp_info_;
  tcp_info_ = nullptr;
  return temp;
}
inline ::appguard::AppGuardTcpInfo* AppGuardSmtpResponse::_internal_mutable_tcp_info() {
  
  if (tcp_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::appguard::AppGuardTcpInfo>(GetArena());
    tcp_info_ = p;
  }
  return tcp_info_;
}
inline ::appguard::AppGuardTcpInfo* AppGuardSmtpResponse::mutable_tcp_info() {
  // @@protoc_insertion_point(field_mutable:appguard.AppGuardSmtpResponse.tcp_info)
  return _internal_mutable_tcp_info();
}
inline void AppGuardSmtpResponse::set_allocated_tcp_info(::appguard::AppGuardTcpInfo* tcp_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete tcp_info_;
  }
  if (tcp_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(tcp_info);
    if (message_arena != submessage_arena) {
      tcp_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tcp_info, submessage_arena);
    }
    
  } else {
    
  }
  tcp_info_ = tcp_info;
  // @@protoc_insertion_point(field_set_allocated:appguard.AppGuardSmtpResponse.tcp_info)
}

// -------------------------------------------------------------------

// AppGuardResponse

// .appguard_commands.FirewallPolicy policy = 2;
inline void AppGuardResponse::clear_policy() {
  policy_ = 0;
}
inline ::appguard_commands::FirewallPolicy AppGuardResponse::_internal_policy() const {
  return static_cast< ::appguard_commands::FirewallPolicy >(policy_);
}
inline ::appguard_commands::FirewallPolicy AppGuardResponse::policy() const {
  // @@protoc_insertion_point(field_get:appguard.AppGuardResponse.policy)
  return _internal_policy();
}
inline void AppGuardResponse::_internal_set_policy(::appguard_commands::FirewallPolicy value) {
  
  policy_ = value;
}
inline void AppGuardResponse::set_policy(::appguard_commands::FirewallPolicy value) {
  _internal_set_policy(value);
  // @@protoc_insertion_point(field_set:appguard.AppGuardResponse.policy)
}

// -------------------------------------------------------------------

// AppGuardTcpResponse

// .appguard.AppGuardTcpInfo tcp_info = 1;
inline bool AppGuardTcpResponse::_internal_has_tcp_info() const {
  return this != internal_default_instance() && tcp_info_ != nullptr;
}
inline bool AppGuardTcpResponse::has_tcp_info() const {
  return _internal_has_tcp_info();
}
inline void AppGuardTcpResponse::clear_tcp_info() {
  if (GetArena() == nullptr && tcp_info_ != nullptr) {
    delete tcp_info_;
  }
  tcp_info_ = nullptr;
}
inline const ::appguard::AppGuardTcpInfo& AppGuardTcpResponse::_internal_tcp_info() const {
  const ::appguard::AppGuardTcpInfo* p = tcp_info_;
  return p != nullptr ? *p : *reinterpret_cast<const ::appguard::AppGuardTcpInfo*>(
      &::appguard::_AppGuardTcpInfo_default_instance_);
}
inline const ::appguard::AppGuardTcpInfo& AppGuardTcpResponse::tcp_info() const {
  // @@protoc_insertion_point(field_get:appguard.AppGuardTcpResponse.tcp_info)
  return _internal_tcp_info();
}
inline void AppGuardTcpResponse::unsafe_arena_set_allocated_tcp_info(
    ::appguard::AppGuardTcpInfo* tcp_info) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tcp_info_);
  }
  tcp_info_ = tcp_info;
  if (tcp_info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:appguard.AppGuardTcpResponse.tcp_info)
}
inline ::appguard::AppGuardTcpInfo* AppGuardTcpResponse::release_tcp_info() {
  auto temp = unsafe_arena_release_tcp_info();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::appguard::AppGuardTcpInfo* AppGuardTcpResponse::unsafe_arena_release_tcp_info() {
  // @@protoc_insertion_point(field_release:appguard.AppGuardTcpResponse.tcp_info)
  
  ::appguard::AppGuardTcpInfo* temp = tcp_info_;
  tcp_info_ = nullptr;
  return temp;
}
inline ::appguard::AppGuardTcpInfo* AppGuardTcpResponse::_internal_mutable_tcp_info() {
  
  if (tcp_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::appguard::AppGuardTcpInfo>(GetArena());
    tcp_info_ = p;
  }
  return tcp_info_;
}
inline ::appguard::AppGuardTcpInfo* AppGuardTcpResponse::mutable_tcp_info() {
  // @@protoc_insertion_point(field_mutable:appguard.AppGuardTcpResponse.tcp_info)
  return _internal_mutable_tcp_info();
}
inline void AppGuardTcpResponse::set_allocated_tcp_info(::appguard::AppGuardTcpInfo* tcp_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete tcp_info_;
  }
  if (tcp_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(tcp_info);
    if (message_arena != submessage_arena) {
      tcp_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tcp_info, submessage_arena);
    }
    
  } else {
    
  }
  tcp_info_ = tcp_info;
  // @@protoc_insertion_point(field_set_allocated:appguard.AppGuardTcpResponse.tcp_info)
}

// -------------------------------------------------------------------

// Token

// string token = 1;
inline void Token::clear_token() {
  token_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Token::token() const {
  // @@protoc_insertion_point(field_get:appguard.Token.token)
  return _internal_token();
}
inline void Token::set_token(const std::string& value) {
  _internal_set_token(value);
  // @@protoc_insertion_point(field_set:appguard.Token.token)
}
inline std::string* Token::mutable_token() {
  // @@protoc_insertion_point(field_mutable:appguard.Token.token)
  return _internal_mutable_token();
}
inline const std::string& Token::_internal_token() const {
  return token_.Get();
}
inline void Token::_internal_set_token(const std::string& value) {
  
  token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Token::set_token(std::string&& value) {
  
  token_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:appguard.Token.token)
}
inline void Token::set_token(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:appguard.Token.token)
}
inline void Token::set_token(const char* value,
    size_t size) {
  
  token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:appguard.Token.token)
}
inline std::string* Token::_internal_mutable_token() {
  
  return token_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Token::release_token() {
  // @@protoc_insertion_point(field_release:appguard.Token.token)
  return token_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Token::set_allocated_token(std::string* token) {
  if (token != nullptr) {
    
  } else {
    
  }
  token_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), token,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:appguard.Token.token)
}
inline std::string* Token::unsafe_arena_release_token() {
  // @@protoc_insertion_point(field_unsafe_arena_release:appguard.Token.token)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return token_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Token::unsafe_arena_set_allocated_token(
    std::string* token) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (token != nullptr) {
    
  } else {
    
  }
  token_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      token, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:appguard.Token.token)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace appguard

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_appguard_2eproto
