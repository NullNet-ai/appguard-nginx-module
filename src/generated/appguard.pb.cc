// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: appguard.proto

#include "appguard.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_appguard_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AppGuardHttpRequest_HeadersEntry_DoNotUse_appguard_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_appguard_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AppGuardHttpRequest_QueryEntry_DoNotUse_appguard_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_appguard_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AppGuardHttpResponse_HeadersEntry_DoNotUse_appguard_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_appguard_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AppGuardIpInfo_appguard_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_appguard_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AppGuardSmtpRequest_HeadersEntry_DoNotUse_appguard_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_appguard_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AppGuardTcpConnection_appguard_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_appguard_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_AppGuardTcpInfo_appguard_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_appguard_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Log_appguard_2eproto;
namespace appguard {
class LogsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Logs> _instance;
} _Logs_default_instance_;
class LogDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Log> _instance;
} _Log_default_instance_;
class AppGuardTcpConnectionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AppGuardTcpConnection> _instance;
} _AppGuardTcpConnection_default_instance_;
class AppGuardIpInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AppGuardIpInfo> _instance;
} _AppGuardIpInfo_default_instance_;
class AppGuardTcpInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AppGuardTcpInfo> _instance;
} _AppGuardTcpInfo_default_instance_;
class AppGuardHttpRequest_HeadersEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AppGuardHttpRequest_HeadersEntry_DoNotUse> _instance;
} _AppGuardHttpRequest_HeadersEntry_DoNotUse_default_instance_;
class AppGuardHttpRequest_QueryEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AppGuardHttpRequest_QueryEntry_DoNotUse> _instance;
} _AppGuardHttpRequest_QueryEntry_DoNotUse_default_instance_;
class AppGuardHttpRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AppGuardHttpRequest> _instance;
} _AppGuardHttpRequest_default_instance_;
class AppGuardHttpResponse_HeadersEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AppGuardHttpResponse_HeadersEntry_DoNotUse> _instance;
} _AppGuardHttpResponse_HeadersEntry_DoNotUse_default_instance_;
class AppGuardHttpResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AppGuardHttpResponse> _instance;
} _AppGuardHttpResponse_default_instance_;
class AppGuardSmtpRequest_HeadersEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AppGuardSmtpRequest_HeadersEntry_DoNotUse> _instance;
} _AppGuardSmtpRequest_HeadersEntry_DoNotUse_default_instance_;
class AppGuardSmtpRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AppGuardSmtpRequest> _instance;
} _AppGuardSmtpRequest_default_instance_;
class AppGuardSmtpResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AppGuardSmtpResponse> _instance;
} _AppGuardSmtpResponse_default_instance_;
class AppGuardResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AppGuardResponse> _instance;
} _AppGuardResponse_default_instance_;
class AppGuardTcpResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AppGuardTcpResponse> _instance;
} _AppGuardTcpResponse_default_instance_;
class TokenDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Token> _instance;
} _Token_default_instance_;
}  // namespace appguard
static void InitDefaultsscc_info_AppGuardHttpRequest_appguard_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::appguard::_AppGuardHttpRequest_default_instance_;
    new (ptr) ::appguard::AppGuardHttpRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::appguard::AppGuardHttpRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_AppGuardHttpRequest_appguard_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_AppGuardHttpRequest_appguard_2eproto}, {
      &scc_info_AppGuardHttpRequest_HeadersEntry_DoNotUse_appguard_2eproto.base,
      &scc_info_AppGuardHttpRequest_QueryEntry_DoNotUse_appguard_2eproto.base,
      &scc_info_AppGuardTcpInfo_appguard_2eproto.base,}};

static void InitDefaultsscc_info_AppGuardHttpRequest_HeadersEntry_DoNotUse_appguard_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::appguard::_AppGuardHttpRequest_HeadersEntry_DoNotUse_default_instance_;
    new (ptr) ::appguard::AppGuardHttpRequest_HeadersEntry_DoNotUse();
  }
  ::appguard::AppGuardHttpRequest_HeadersEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AppGuardHttpRequest_HeadersEntry_DoNotUse_appguard_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_AppGuardHttpRequest_HeadersEntry_DoNotUse_appguard_2eproto}, {}};

static void InitDefaultsscc_info_AppGuardHttpRequest_QueryEntry_DoNotUse_appguard_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::appguard::_AppGuardHttpRequest_QueryEntry_DoNotUse_default_instance_;
    new (ptr) ::appguard::AppGuardHttpRequest_QueryEntry_DoNotUse();
  }
  ::appguard::AppGuardHttpRequest_QueryEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AppGuardHttpRequest_QueryEntry_DoNotUse_appguard_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_AppGuardHttpRequest_QueryEntry_DoNotUse_appguard_2eproto}, {}};

static void InitDefaultsscc_info_AppGuardHttpResponse_appguard_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::appguard::_AppGuardHttpResponse_default_instance_;
    new (ptr) ::appguard::AppGuardHttpResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::appguard::AppGuardHttpResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_AppGuardHttpResponse_appguard_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_AppGuardHttpResponse_appguard_2eproto}, {
      &scc_info_AppGuardHttpResponse_HeadersEntry_DoNotUse_appguard_2eproto.base,
      &scc_info_AppGuardTcpInfo_appguard_2eproto.base,}};

static void InitDefaultsscc_info_AppGuardHttpResponse_HeadersEntry_DoNotUse_appguard_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::appguard::_AppGuardHttpResponse_HeadersEntry_DoNotUse_default_instance_;
    new (ptr) ::appguard::AppGuardHttpResponse_HeadersEntry_DoNotUse();
  }
  ::appguard::AppGuardHttpResponse_HeadersEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AppGuardHttpResponse_HeadersEntry_DoNotUse_appguard_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_AppGuardHttpResponse_HeadersEntry_DoNotUse_appguard_2eproto}, {}};

static void InitDefaultsscc_info_AppGuardIpInfo_appguard_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::appguard::_AppGuardIpInfo_default_instance_;
    new (ptr) ::appguard::AppGuardIpInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::appguard::AppGuardIpInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AppGuardIpInfo_appguard_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_AppGuardIpInfo_appguard_2eproto}, {}};

static void InitDefaultsscc_info_AppGuardResponse_appguard_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::appguard::_AppGuardResponse_default_instance_;
    new (ptr) ::appguard::AppGuardResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::appguard::AppGuardResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AppGuardResponse_appguard_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_AppGuardResponse_appguard_2eproto}, {}};

static void InitDefaultsscc_info_AppGuardSmtpRequest_appguard_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::appguard::_AppGuardSmtpRequest_default_instance_;
    new (ptr) ::appguard::AppGuardSmtpRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::appguard::AppGuardSmtpRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_AppGuardSmtpRequest_appguard_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_AppGuardSmtpRequest_appguard_2eproto}, {
      &scc_info_AppGuardSmtpRequest_HeadersEntry_DoNotUse_appguard_2eproto.base,
      &scc_info_AppGuardTcpInfo_appguard_2eproto.base,}};

static void InitDefaultsscc_info_AppGuardSmtpRequest_HeadersEntry_DoNotUse_appguard_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::appguard::_AppGuardSmtpRequest_HeadersEntry_DoNotUse_default_instance_;
    new (ptr) ::appguard::AppGuardSmtpRequest_HeadersEntry_DoNotUse();
  }
  ::appguard::AppGuardSmtpRequest_HeadersEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AppGuardSmtpRequest_HeadersEntry_DoNotUse_appguard_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_AppGuardSmtpRequest_HeadersEntry_DoNotUse_appguard_2eproto}, {}};

static void InitDefaultsscc_info_AppGuardSmtpResponse_appguard_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::appguard::_AppGuardSmtpResponse_default_instance_;
    new (ptr) ::appguard::AppGuardSmtpResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::appguard::AppGuardSmtpResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_AppGuardSmtpResponse_appguard_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_AppGuardSmtpResponse_appguard_2eproto}, {
      &scc_info_AppGuardTcpInfo_appguard_2eproto.base,}};

static void InitDefaultsscc_info_AppGuardTcpConnection_appguard_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::appguard::_AppGuardTcpConnection_default_instance_;
    new (ptr) ::appguard::AppGuardTcpConnection();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::appguard::AppGuardTcpConnection::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AppGuardTcpConnection_appguard_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_AppGuardTcpConnection_appguard_2eproto}, {}};

static void InitDefaultsscc_info_AppGuardTcpInfo_appguard_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::appguard::_AppGuardTcpInfo_default_instance_;
    new (ptr) ::appguard::AppGuardTcpInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::appguard::AppGuardTcpInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_AppGuardTcpInfo_appguard_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_AppGuardTcpInfo_appguard_2eproto}, {
      &scc_info_AppGuardTcpConnection_appguard_2eproto.base,
      &scc_info_AppGuardIpInfo_appguard_2eproto.base,}};

static void InitDefaultsscc_info_AppGuardTcpResponse_appguard_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::appguard::_AppGuardTcpResponse_default_instance_;
    new (ptr) ::appguard::AppGuardTcpResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::appguard::AppGuardTcpResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_AppGuardTcpResponse_appguard_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_AppGuardTcpResponse_appguard_2eproto}, {
      &scc_info_AppGuardTcpInfo_appguard_2eproto.base,}};

static void InitDefaultsscc_info_Log_appguard_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::appguard::_Log_default_instance_;
    new (ptr) ::appguard::Log();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::appguard::Log::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Log_appguard_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Log_appguard_2eproto}, {}};

static void InitDefaultsscc_info_Logs_appguard_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::appguard::_Logs_default_instance_;
    new (ptr) ::appguard::Logs();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::appguard::Logs::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Logs_appguard_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Logs_appguard_2eproto}, {
      &scc_info_Log_appguard_2eproto.base,}};

static void InitDefaultsscc_info_Token_appguard_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::appguard::_Token_default_instance_;
    new (ptr) ::appguard::Token();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::appguard::Token::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Token_appguard_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Token_appguard_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_appguard_2eproto[16];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_appguard_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_appguard_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_appguard_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::appguard::Logs, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::appguard::Logs, token_),
  PROTOBUF_FIELD_OFFSET(::appguard::Logs, logs_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::appguard::Log, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::appguard::Log, timestamp_),
  PROTOBUF_FIELD_OFFSET(::appguard::Log, level_),
  PROTOBUF_FIELD_OFFSET(::appguard::Log, message_),
  PROTOBUF_FIELD_OFFSET(::appguard::AppGuardTcpConnection, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::appguard::AppGuardTcpConnection, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::appguard::AppGuardTcpConnection, token_),
  PROTOBUF_FIELD_OFFSET(::appguard::AppGuardTcpConnection, source_ip_),
  PROTOBUF_FIELD_OFFSET(::appguard::AppGuardTcpConnection, source_port_),
  PROTOBUF_FIELD_OFFSET(::appguard::AppGuardTcpConnection, destination_ip_),
  PROTOBUF_FIELD_OFFSET(::appguard::AppGuardTcpConnection, destination_port_),
  PROTOBUF_FIELD_OFFSET(::appguard::AppGuardTcpConnection, protocol_),
  ~0u,
  0,
  2,
  1,
  3,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::appguard::AppGuardIpInfo, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::appguard::AppGuardIpInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::appguard::AppGuardIpInfo, ip_),
  PROTOBUF_FIELD_OFFSET(::appguard::AppGuardIpInfo, country_),
  PROTOBUF_FIELD_OFFSET(::appguard::AppGuardIpInfo, asn_),
  PROTOBUF_FIELD_OFFSET(::appguard::AppGuardIpInfo, org_),
  PROTOBUF_FIELD_OFFSET(::appguard::AppGuardIpInfo, continent_code_),
  PROTOBUF_FIELD_OFFSET(::appguard::AppGuardIpInfo, city_),
  PROTOBUF_FIELD_OFFSET(::appguard::AppGuardIpInfo, region_),
  PROTOBUF_FIELD_OFFSET(::appguard::AppGuardIpInfo, postal_),
  PROTOBUF_FIELD_OFFSET(::appguard::AppGuardIpInfo, timezone_),
  ~0u,
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::appguard::AppGuardTcpInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::appguard::AppGuardTcpInfo, connection_),
  PROTOBUF_FIELD_OFFSET(::appguard::AppGuardTcpInfo, ip_info_),
  PROTOBUF_FIELD_OFFSET(::appguard::AppGuardTcpInfo, tcp_id_),
  PROTOBUF_FIELD_OFFSET(::appguard::AppGuardHttpRequest_HeadersEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::appguard::AppGuardHttpRequest_HeadersEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::appguard::AppGuardHttpRequest_HeadersEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::appguard::AppGuardHttpRequest_HeadersEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::appguard::AppGuardHttpRequest_QueryEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::appguard::AppGuardHttpRequest_QueryEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::appguard::AppGuardHttpRequest_QueryEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::appguard::AppGuardHttpRequest_QueryEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::appguard::AppGuardHttpRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::appguard::AppGuardHttpRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::appguard::AppGuardHttpRequest, token_),
  PROTOBUF_FIELD_OFFSET(::appguard::AppGuardHttpRequest, original_url_),
  PROTOBUF_FIELD_OFFSET(::appguard::AppGuardHttpRequest, headers_),
  PROTOBUF_FIELD_OFFSET(::appguard::AppGuardHttpRequest, method_),
  PROTOBUF_FIELD_OFFSET(::appguard::AppGuardHttpRequest, body_),
  PROTOBUF_FIELD_OFFSET(::appguard::AppGuardHttpRequest, query_),
  PROTOBUF_FIELD_OFFSET(::appguard::AppGuardHttpRequest, tcp_info_),
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  0,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::appguard::AppGuardHttpResponse_HeadersEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::appguard::AppGuardHttpResponse_HeadersEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::appguard::AppGuardHttpResponse_HeadersEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::appguard::AppGuardHttpResponse_HeadersEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::appguard::AppGuardHttpResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::appguard::AppGuardHttpResponse, token_),
  PROTOBUF_FIELD_OFFSET(::appguard::AppGuardHttpResponse, code_),
  PROTOBUF_FIELD_OFFSET(::appguard::AppGuardHttpResponse, headers_),
  PROTOBUF_FIELD_OFFSET(::appguard::AppGuardHttpResponse, tcp_info_),
  PROTOBUF_FIELD_OFFSET(::appguard::AppGuardSmtpRequest_HeadersEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::appguard::AppGuardSmtpRequest_HeadersEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::appguard::AppGuardSmtpRequest_HeadersEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::appguard::AppGuardSmtpRequest_HeadersEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::appguard::AppGuardSmtpRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::appguard::AppGuardSmtpRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::appguard::AppGuardSmtpRequest, token_),
  PROTOBUF_FIELD_OFFSET(::appguard::AppGuardSmtpRequest, headers_),
  PROTOBUF_FIELD_OFFSET(::appguard::AppGuardSmtpRequest, body_),
  PROTOBUF_FIELD_OFFSET(::appguard::AppGuardSmtpRequest, tcp_info_),
  ~0u,
  ~0u,
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::appguard::AppGuardSmtpResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::appguard::AppGuardSmtpResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::appguard::AppGuardSmtpResponse, token_),
  PROTOBUF_FIELD_OFFSET(::appguard::AppGuardSmtpResponse, code_),
  PROTOBUF_FIELD_OFFSET(::appguard::AppGuardSmtpResponse, tcp_info_),
  ~0u,
  0,
  ~0u,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::appguard::AppGuardResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::appguard::AppGuardResponse, policy_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::appguard::AppGuardTcpResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::appguard::AppGuardTcpResponse, tcp_info_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::appguard::Token, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::appguard::Token, token_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::appguard::Logs)},
  { 7, -1, sizeof(::appguard::Log)},
  { 15, 26, sizeof(::appguard::AppGuardTcpConnection)},
  { 32, 46, sizeof(::appguard::AppGuardIpInfo)},
  { 55, -1, sizeof(::appguard::AppGuardTcpInfo)},
  { 63, 70, sizeof(::appguard::AppGuardHttpRequest_HeadersEntry_DoNotUse)},
  { 72, 79, sizeof(::appguard::AppGuardHttpRequest_QueryEntry_DoNotUse)},
  { 81, 93, sizeof(::appguard::AppGuardHttpRequest)},
  { 100, 107, sizeof(::appguard::AppGuardHttpResponse_HeadersEntry_DoNotUse)},
  { 109, -1, sizeof(::appguard::AppGuardHttpResponse)},
  { 118, 125, sizeof(::appguard::AppGuardSmtpRequest_HeadersEntry_DoNotUse)},
  { 127, 136, sizeof(::appguard::AppGuardSmtpRequest)},
  { 140, 148, sizeof(::appguard::AppGuardSmtpResponse)},
  { 151, -1, sizeof(::appguard::AppGuardResponse)},
  { 157, -1, sizeof(::appguard::AppGuardTcpResponse)},
  { 163, -1, sizeof(::appguard::Token)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::appguard::_Logs_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::appguard::_Log_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::appguard::_AppGuardTcpConnection_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::appguard::_AppGuardIpInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::appguard::_AppGuardTcpInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::appguard::_AppGuardHttpRequest_HeadersEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::appguard::_AppGuardHttpRequest_QueryEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::appguard::_AppGuardHttpRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::appguard::_AppGuardHttpResponse_HeadersEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::appguard::_AppGuardHttpResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::appguard::_AppGuardSmtpRequest_HeadersEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::appguard::_AppGuardSmtpRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::appguard::_AppGuardSmtpResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::appguard::_AppGuardResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::appguard::_AppGuardTcpResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::appguard::_Token_default_instance_),
};

const char descriptor_table_protodef_appguard_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\016appguard.proto\022\010appguard\032\033google/proto"
  "buf/empty.proto\032\016commands.proto\"2\n\004Logs\022"
  "\r\n\005token\030\001 \001(\t\022\033\n\004logs\030\003 \003(\0132\r.appguard."
  "Log\"8\n\003Log\022\021\n\ttimestamp\030\001 \001(\t\022\r\n\005level\030\002"
  " \001(\t\022\017\n\007message\030\003 \001(\t\"\354\001\n\025AppGuardTcpCon"
  "nection\022\r\n\005token\030\001 \001(\t\022\026\n\tsource_ip\030\002 \001("
  "\tH\000\210\001\001\022\030\n\013source_port\030\003 \001(\rH\001\210\001\001\022\033\n\016dest"
  "ination_ip\030\004 \001(\tH\002\210\001\001\022\035\n\020destination_por"
  "t\030\005 \001(\rH\003\210\001\001\022\020\n\010protocol\030\006 \001(\tB\014\n\n_sourc"
  "e_ipB\016\n\014_source_portB\021\n\017_destination_ipB"
  "\023\n\021_destination_port\"\242\002\n\016AppGuardIpInfo\022"
  "\n\n\002ip\030\001 \001(\t\022\024\n\007country\030\002 \001(\tH\000\210\001\001\022\020\n\003asn"
  "\030\003 \001(\tH\001\210\001\001\022\020\n\003org\030\004 \001(\tH\002\210\001\001\022\033\n\016contine"
  "nt_code\030\005 \001(\tH\003\210\001\001\022\021\n\004city\030\006 \001(\tH\004\210\001\001\022\023\n"
  "\006region\030\007 \001(\tH\005\210\001\001\022\023\n\006postal\030\010 \001(\tH\006\210\001\001\022"
  "\025\n\010timezone\030\t \001(\tH\007\210\001\001B\n\n\010_countryB\006\n\004_a"
  "snB\006\n\004_orgB\021\n\017_continent_codeB\007\n\005_cityB\t"
  "\n\007_regionB\t\n\007_postalB\013\n\t_timezone\"\201\001\n\017Ap"
  "pGuardTcpInfo\0223\n\nconnection\030\001 \001(\0132\037.appg"
  "uard.AppGuardTcpConnection\022)\n\007ip_info\030\002 "
  "\001(\0132\030.appguard.AppGuardIpInfo\022\016\n\006tcp_id\030"
  "\003 \001(\004\"\347\002\n\023AppGuardHttpRequest\022\r\n\005token\030\001"
  " \001(\t\022\024\n\014original_url\030\002 \001(\t\022;\n\007headers\030\003 "
  "\003(\0132*.appguard.AppGuardHttpRequest.Heade"
  "rsEntry\022\016\n\006method\030\004 \001(\t\022\021\n\004body\030\005 \001(\tH\000\210"
  "\001\001\0227\n\005query\030\006 \003(\0132(.appguard.AppGuardHtt"
  "pRequest.QueryEntry\022+\n\010tcp_info\030d \001(\0132\031."
  "appguard.AppGuardTcpInfo\032.\n\014HeadersEntry"
  "\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\t:\0028\001\032,\n\nQuer"
  "yEntry\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\t:\0028\001B\007"
  "\n\005_body\"\316\001\n\024AppGuardHttpResponse\022\r\n\005toke"
  "n\030\001 \001(\t\022\014\n\004code\030\002 \001(\r\022<\n\007headers\030\003 \003(\0132+"
  ".appguard.AppGuardHttpResponse.HeadersEn"
  "try\022+\n\010tcp_info\030d \001(\0132\031.appguard.AppGuar"
  "dTcpInfo\032.\n\014HeadersEntry\022\013\n\003key\030\001 \001(\t\022\r\n"
  "\005value\030\002 \001(\t:\0028\001\"\332\001\n\023AppGuardSmtpRequest"
  "\022\r\n\005token\030\001 \001(\t\022;\n\007headers\030\002 \003(\0132*.appgu"
  "ard.AppGuardSmtpRequest.HeadersEntry\022\021\n\004"
  "body\030\003 \001(\tH\000\210\001\001\022+\n\010tcp_info\030d \001(\0132\031.appg"
  "uard.AppGuardTcpInfo\032.\n\014HeadersEntry\022\013\n\003"
  "key\030\001 \001(\t\022\r\n\005value\030\002 \001(\t:\0028\001B\007\n\005_body\"n\n"
  "\024AppGuardSmtpResponse\022\r\n\005token\030\001 \001(\t\022\021\n\004"
  "code\030\002 \001(\rH\000\210\001\001\022+\n\010tcp_info\030d \001(\0132\031.appg"
  "uard.AppGuardTcpInfoB\007\n\005_code\"E\n\020AppGuar"
  "dResponse\0221\n\006policy\030\002 \001(\0162!.appguard_com"
  "mands.FirewallPolicy\"B\n\023AppGuardTcpRespo"
  "nse\022+\n\010tcp_info\030\001 \001(\0132\031.appguard.AppGuar"
  "dTcpInfo\"\026\n\005Token\022\r\n\005token\030\001 \001(\t2\206\005\n\010App"
  "Guard\022X\n\016ControlChannel\022 .appguard_comma"
  "nds.ClientMessage\032 .appguard_commands.Se"
  "rverMessage(\0010\001\0224\n\nHandleLogs\022\016.appguard"
  ".Logs\032\026.google.protobuf.Empty\022U\n\023HandleT"
  "cpConnection\022\037.appguard.AppGuardTcpConne"
  "ction\032\035.appguard.AppGuardTcpResponse\022N\n\021"
  "HandleHttpRequest\022\035.appguard.AppGuardHtt"
  "pRequest\032\032.appguard.AppGuardResponse\022P\n\022"
  "HandleHttpResponse\022\036.appguard.AppGuardHt"
  "tpResponse\032\032.appguard.AppGuardResponse\022N"
  "\n\021HandleSmtpRequest\022\035.appguard.AppGuardS"
  "mtpRequest\032\032.appguard.AppGuardResponse\022P"
  "\n\022HandleSmtpResponse\022\036.appguard.AppGuard"
  "SmtpResponse\032\032.appguard.AppGuardResponse"
  "\022O\n\027FirewallDefaultsRequest\022\017.appguard.T"
  "oken\032#.appguard_commands.FirewallDefault"
  "sb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_appguard_2eproto_deps[2] = {
  &::descriptor_table_commands_2eproto,
  &::descriptor_table_google_2fprotobuf_2fempty_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_appguard_2eproto_sccs[16] = {
  &scc_info_AppGuardHttpRequest_appguard_2eproto.base,
  &scc_info_AppGuardHttpRequest_HeadersEntry_DoNotUse_appguard_2eproto.base,
  &scc_info_AppGuardHttpRequest_QueryEntry_DoNotUse_appguard_2eproto.base,
  &scc_info_AppGuardHttpResponse_appguard_2eproto.base,
  &scc_info_AppGuardHttpResponse_HeadersEntry_DoNotUse_appguard_2eproto.base,
  &scc_info_AppGuardIpInfo_appguard_2eproto.base,
  &scc_info_AppGuardResponse_appguard_2eproto.base,
  &scc_info_AppGuardSmtpRequest_appguard_2eproto.base,
  &scc_info_AppGuardSmtpRequest_HeadersEntry_DoNotUse_appguard_2eproto.base,
  &scc_info_AppGuardSmtpResponse_appguard_2eproto.base,
  &scc_info_AppGuardTcpConnection_appguard_2eproto.base,
  &scc_info_AppGuardTcpInfo_appguard_2eproto.base,
  &scc_info_AppGuardTcpResponse_appguard_2eproto.base,
  &scc_info_Log_appguard_2eproto.base,
  &scc_info_Logs_appguard_2eproto.base,
  &scc_info_Token_appguard_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_appguard_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_appguard_2eproto = {
  false, false, descriptor_table_protodef_appguard_2eproto, "appguard.proto", 2569,
  &descriptor_table_appguard_2eproto_once, descriptor_table_appguard_2eproto_sccs, descriptor_table_appguard_2eproto_deps, 16, 2,
  schemas, file_default_instances, TableStruct_appguard_2eproto::offsets,
  file_level_metadata_appguard_2eproto, 16, file_level_enum_descriptors_appguard_2eproto, file_level_service_descriptors_appguard_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_appguard_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_appguard_2eproto)), true);
namespace appguard {

// ===================================================================

void Logs::InitAsDefaultInstance() {
}
class Logs::_Internal {
 public:
};

Logs::Logs(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  logs_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:appguard.Logs)
}
Logs::Logs(const Logs& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      logs_(from.logs_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_token().empty()) {
    token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_token(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:appguard.Logs)
}

void Logs::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Logs_appguard_2eproto.base);
  token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

Logs::~Logs() {
  // @@protoc_insertion_point(destructor:appguard.Logs)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Logs::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  token_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Logs::ArenaDtor(void* object) {
  Logs* _this = reinterpret_cast< Logs* >(object);
  (void)_this;
}
void Logs::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Logs::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Logs& Logs::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Logs_appguard_2eproto.base);
  return *internal_default_instance();
}


void Logs::Clear() {
// @@protoc_insertion_point(message_clear_start:appguard.Logs)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  logs_.Clear();
  token_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Logs::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string token = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_token();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "appguard.Logs.token"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .appguard.Log logs = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_logs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Logs::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:appguard.Logs)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string token = 1;
  if (this->token().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_token().data(), static_cast<int>(this->_internal_token().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "appguard.Logs.token");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_token(), target);
  }

  // repeated .appguard.Log logs = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_logs_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_logs(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:appguard.Logs)
  return target;
}

size_t Logs::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:appguard.Logs)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .appguard.Log logs = 3;
  total_size += 1UL * this->_internal_logs_size();
  for (const auto& msg : this->logs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string token = 1;
  if (this->token().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_token());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Logs::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:appguard.Logs)
  GOOGLE_DCHECK_NE(&from, this);
  const Logs* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Logs>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:appguard.Logs)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:appguard.Logs)
    MergeFrom(*source);
  }
}

void Logs::MergeFrom(const Logs& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:appguard.Logs)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  logs_.MergeFrom(from.logs_);
  if (from.token().size() > 0) {
    _internal_set_token(from._internal_token());
  }
}

void Logs::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:appguard.Logs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Logs::CopyFrom(const Logs& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:appguard.Logs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Logs::IsInitialized() const {
  return true;
}

void Logs::InternalSwap(Logs* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  logs_.InternalSwap(&other->logs_);
  token_.Swap(&other->token_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata Logs::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Log::InitAsDefaultInstance() {
}
class Log::_Internal {
 public:
};

Log::Log(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:appguard.Log)
}
Log::Log(const Log& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  timestamp_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_timestamp().empty()) {
    timestamp_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_timestamp(),
      GetArena());
  }
  level_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_level().empty()) {
    level_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_level(),
      GetArena());
  }
  message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_message().empty()) {
    message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_message(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:appguard.Log)
}

void Log::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Log_appguard_2eproto.base);
  timestamp_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  level_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

Log::~Log() {
  // @@protoc_insertion_point(destructor:appguard.Log)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Log::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  timestamp_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  level_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  message_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Log::ArenaDtor(void* object) {
  Log* _this = reinterpret_cast< Log* >(object);
  (void)_this;
}
void Log::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Log::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Log& Log::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Log_appguard_2eproto.base);
  return *internal_default_instance();
}


void Log::Clear() {
// @@protoc_insertion_point(message_clear_start:appguard.Log)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  timestamp_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  level_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  message_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Log::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string timestamp = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_timestamp();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "appguard.Log.timestamp"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string level = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_level();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "appguard.Log.level"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string message = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_message();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "appguard.Log.message"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Log::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:appguard.Log)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string timestamp = 1;
  if (this->timestamp().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_timestamp().data(), static_cast<int>(this->_internal_timestamp().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "appguard.Log.timestamp");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_timestamp(), target);
  }

  // string level = 2;
  if (this->level().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_level().data(), static_cast<int>(this->_internal_level().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "appguard.Log.level");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_level(), target);
  }

  // string message = 3;
  if (this->message().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_message().data(), static_cast<int>(this->_internal_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "appguard.Log.message");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_message(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:appguard.Log)
  return target;
}

size_t Log::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:appguard.Log)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string timestamp = 1;
  if (this->timestamp().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_timestamp());
  }

  // string level = 2;
  if (this->level().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_level());
  }

  // string message = 3;
  if (this->message().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_message());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Log::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:appguard.Log)
  GOOGLE_DCHECK_NE(&from, this);
  const Log* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Log>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:appguard.Log)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:appguard.Log)
    MergeFrom(*source);
  }
}

void Log::MergeFrom(const Log& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:appguard.Log)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.timestamp().size() > 0) {
    _internal_set_timestamp(from._internal_timestamp());
  }
  if (from.level().size() > 0) {
    _internal_set_level(from._internal_level());
  }
  if (from.message().size() > 0) {
    _internal_set_message(from._internal_message());
  }
}

void Log::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:appguard.Log)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Log::CopyFrom(const Log& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:appguard.Log)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Log::IsInitialized() const {
  return true;
}

void Log::InternalSwap(Log* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  timestamp_.Swap(&other->timestamp_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  level_.Swap(&other->level_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  message_.Swap(&other->message_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata Log::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AppGuardTcpConnection::InitAsDefaultInstance() {
}
class AppGuardTcpConnection::_Internal {
 public:
  using HasBits = decltype(std::declval<AppGuardTcpConnection>()._has_bits_);
  static void set_has_source_ip(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_source_port(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_destination_ip(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_destination_port(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

AppGuardTcpConnection::AppGuardTcpConnection(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:appguard.AppGuardTcpConnection)
}
AppGuardTcpConnection::AppGuardTcpConnection(const AppGuardTcpConnection& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_token().empty()) {
    token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_token(),
      GetArena());
  }
  source_ip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_source_ip()) {
    source_ip_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_source_ip(),
      GetArena());
  }
  destination_ip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_destination_ip()) {
    destination_ip_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_destination_ip(),
      GetArena());
  }
  protocol_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_protocol().empty()) {
    protocol_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_protocol(),
      GetArena());
  }
  ::memcpy(&source_port_, &from.source_port_,
    static_cast<size_t>(reinterpret_cast<char*>(&destination_port_) -
    reinterpret_cast<char*>(&source_port_)) + sizeof(destination_port_));
  // @@protoc_insertion_point(copy_constructor:appguard.AppGuardTcpConnection)
}

void AppGuardTcpConnection::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AppGuardTcpConnection_appguard_2eproto.base);
  token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  source_ip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  destination_ip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  protocol_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&source_port_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&destination_port_) -
      reinterpret_cast<char*>(&source_port_)) + sizeof(destination_port_));
}

AppGuardTcpConnection::~AppGuardTcpConnection() {
  // @@protoc_insertion_point(destructor:appguard.AppGuardTcpConnection)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AppGuardTcpConnection::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  token_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  source_ip_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  destination_ip_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  protocol_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void AppGuardTcpConnection::ArenaDtor(void* object) {
  AppGuardTcpConnection* _this = reinterpret_cast< AppGuardTcpConnection* >(object);
  (void)_this;
}
void AppGuardTcpConnection::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AppGuardTcpConnection::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AppGuardTcpConnection& AppGuardTcpConnection::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AppGuardTcpConnection_appguard_2eproto.base);
  return *internal_default_instance();
}


void AppGuardTcpConnection::Clear() {
// @@protoc_insertion_point(message_clear_start:appguard.AppGuardTcpConnection)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  token_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      source_ip_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      destination_ip_.ClearNonDefaultToEmpty();
    }
  }
  protocol_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (cached_has_bits & 0x0000000cu) {
    ::memset(&source_port_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&destination_port_) -
        reinterpret_cast<char*>(&source_port_)) + sizeof(destination_port_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AppGuardTcpConnection::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string token = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_token();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "appguard.AppGuardTcpConnection.token"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string source_ip = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_source_ip();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "appguard.AppGuardTcpConnection.source_ip"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 source_port = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_source_port(&has_bits);
          source_port_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string destination_ip = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_destination_ip();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "appguard.AppGuardTcpConnection.destination_ip"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 destination_port = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_destination_port(&has_bits);
          destination_port_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string protocol = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_protocol();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "appguard.AppGuardTcpConnection.protocol"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AppGuardTcpConnection::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:appguard.AppGuardTcpConnection)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string token = 1;
  if (this->token().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_token().data(), static_cast<int>(this->_internal_token().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "appguard.AppGuardTcpConnection.token");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_token(), target);
  }

  // string source_ip = 2;
  if (_internal_has_source_ip()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_source_ip().data(), static_cast<int>(this->_internal_source_ip().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "appguard.AppGuardTcpConnection.source_ip");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_source_ip(), target);
  }

  // uint32 source_port = 3;
  if (_internal_has_source_port()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_source_port(), target);
  }

  // string destination_ip = 4;
  if (_internal_has_destination_ip()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_destination_ip().data(), static_cast<int>(this->_internal_destination_ip().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "appguard.AppGuardTcpConnection.destination_ip");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_destination_ip(), target);
  }

  // uint32 destination_port = 5;
  if (_internal_has_destination_port()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_destination_port(), target);
  }

  // string protocol = 6;
  if (this->protocol().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_protocol().data(), static_cast<int>(this->_internal_protocol().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "appguard.AppGuardTcpConnection.protocol");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_protocol(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:appguard.AppGuardTcpConnection)
  return target;
}

size_t AppGuardTcpConnection::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:appguard.AppGuardTcpConnection)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string token = 1;
  if (this->token().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_token());
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // string source_ip = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_source_ip());
    }

    // string destination_ip = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_destination_ip());
    }

  }
  // string protocol = 6;
  if (this->protocol().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_protocol());
  }

  if (cached_has_bits & 0x0000000cu) {
    // uint32 source_port = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_source_port());
    }

    // uint32 destination_port = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_destination_port());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AppGuardTcpConnection::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:appguard.AppGuardTcpConnection)
  GOOGLE_DCHECK_NE(&from, this);
  const AppGuardTcpConnection* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AppGuardTcpConnection>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:appguard.AppGuardTcpConnection)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:appguard.AppGuardTcpConnection)
    MergeFrom(*source);
  }
}

void AppGuardTcpConnection::MergeFrom(const AppGuardTcpConnection& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:appguard.AppGuardTcpConnection)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.token().size() > 0) {
    _internal_set_token(from._internal_token());
  }
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_source_ip(from._internal_source_ip());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_destination_ip(from._internal_destination_ip());
    }
  }
  if (from.protocol().size() > 0) {
    _internal_set_protocol(from._internal_protocol());
  }
  if (cached_has_bits & 0x0000000cu) {
    if (cached_has_bits & 0x00000004u) {
      source_port_ = from.source_port_;
    }
    if (cached_has_bits & 0x00000008u) {
      destination_port_ = from.destination_port_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void AppGuardTcpConnection::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:appguard.AppGuardTcpConnection)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AppGuardTcpConnection::CopyFrom(const AppGuardTcpConnection& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:appguard.AppGuardTcpConnection)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AppGuardTcpConnection::IsInitialized() const {
  return true;
}

void AppGuardTcpConnection::InternalSwap(AppGuardTcpConnection* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  token_.Swap(&other->token_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  source_ip_.Swap(&other->source_ip_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  destination_ip_.Swap(&other->destination_ip_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  protocol_.Swap(&other->protocol_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AppGuardTcpConnection, destination_port_)
      + sizeof(AppGuardTcpConnection::destination_port_)
      - PROTOBUF_FIELD_OFFSET(AppGuardTcpConnection, source_port_)>(
          reinterpret_cast<char*>(&source_port_),
          reinterpret_cast<char*>(&other->source_port_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AppGuardTcpConnection::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AppGuardIpInfo::InitAsDefaultInstance() {
}
class AppGuardIpInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<AppGuardIpInfo>()._has_bits_);
  static void set_has_country(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_asn(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_org(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_continent_code(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_city(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_region(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_postal(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_timezone(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
};

AppGuardIpInfo::AppGuardIpInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:appguard.AppGuardIpInfo)
}
AppGuardIpInfo::AppGuardIpInfo(const AppGuardIpInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_ip().empty()) {
    ip_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_ip(),
      GetArena());
  }
  country_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_country()) {
    country_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_country(),
      GetArena());
  }
  asn_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_asn()) {
    asn_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_asn(),
      GetArena());
  }
  org_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_org()) {
    org_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_org(),
      GetArena());
  }
  continent_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_continent_code()) {
    continent_code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_continent_code(),
      GetArena());
  }
  city_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_city()) {
    city_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_city(),
      GetArena());
  }
  region_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_region()) {
    region_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_region(),
      GetArena());
  }
  postal_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_postal()) {
    postal_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_postal(),
      GetArena());
  }
  timezone_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_timezone()) {
    timezone_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_timezone(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:appguard.AppGuardIpInfo)
}

void AppGuardIpInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AppGuardIpInfo_appguard_2eproto.base);
  ip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  country_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  asn_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  org_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  continent_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  city_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  region_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  postal_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  timezone_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

AppGuardIpInfo::~AppGuardIpInfo() {
  // @@protoc_insertion_point(destructor:appguard.AppGuardIpInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AppGuardIpInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  ip_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  country_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  asn_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  org_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  continent_code_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  city_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  region_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  postal_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  timezone_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void AppGuardIpInfo::ArenaDtor(void* object) {
  AppGuardIpInfo* _this = reinterpret_cast< AppGuardIpInfo* >(object);
  (void)_this;
}
void AppGuardIpInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AppGuardIpInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AppGuardIpInfo& AppGuardIpInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AppGuardIpInfo_appguard_2eproto.base);
  return *internal_default_instance();
}


void AppGuardIpInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:appguard.AppGuardIpInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ip_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      country_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      asn_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      org_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      continent_code_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      city_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000020u) {
      region_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000040u) {
      postal_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000080u) {
      timezone_.ClearNonDefaultToEmpty();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AppGuardIpInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string ip = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_ip();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "appguard.AppGuardIpInfo.ip"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string country = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_country();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "appguard.AppGuardIpInfo.country"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string asn = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_asn();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "appguard.AppGuardIpInfo.asn"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string org = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_org();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "appguard.AppGuardIpInfo.org"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string continent_code = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_continent_code();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "appguard.AppGuardIpInfo.continent_code"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string city = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_city();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "appguard.AppGuardIpInfo.city"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string region = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_region();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "appguard.AppGuardIpInfo.region"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string postal = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_postal();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "appguard.AppGuardIpInfo.postal"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string timezone = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          auto str = _internal_mutable_timezone();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "appguard.AppGuardIpInfo.timezone"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AppGuardIpInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:appguard.AppGuardIpInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string ip = 1;
  if (this->ip().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_ip().data(), static_cast<int>(this->_internal_ip().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "appguard.AppGuardIpInfo.ip");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_ip(), target);
  }

  // string country = 2;
  if (_internal_has_country()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_country().data(), static_cast<int>(this->_internal_country().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "appguard.AppGuardIpInfo.country");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_country(), target);
  }

  // string asn = 3;
  if (_internal_has_asn()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_asn().data(), static_cast<int>(this->_internal_asn().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "appguard.AppGuardIpInfo.asn");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_asn(), target);
  }

  // string org = 4;
  if (_internal_has_org()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_org().data(), static_cast<int>(this->_internal_org().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "appguard.AppGuardIpInfo.org");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_org(), target);
  }

  // string continent_code = 5;
  if (_internal_has_continent_code()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_continent_code().data(), static_cast<int>(this->_internal_continent_code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "appguard.AppGuardIpInfo.continent_code");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_continent_code(), target);
  }

  // string city = 6;
  if (_internal_has_city()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_city().data(), static_cast<int>(this->_internal_city().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "appguard.AppGuardIpInfo.city");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_city(), target);
  }

  // string region = 7;
  if (_internal_has_region()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_region().data(), static_cast<int>(this->_internal_region().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "appguard.AppGuardIpInfo.region");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_region(), target);
  }

  // string postal = 8;
  if (_internal_has_postal()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_postal().data(), static_cast<int>(this->_internal_postal().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "appguard.AppGuardIpInfo.postal");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_postal(), target);
  }

  // string timezone = 9;
  if (_internal_has_timezone()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_timezone().data(), static_cast<int>(this->_internal_timezone().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "appguard.AppGuardIpInfo.timezone");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_timezone(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:appguard.AppGuardIpInfo)
  return target;
}

size_t AppGuardIpInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:appguard.AppGuardIpInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string ip = 1;
  if (this->ip().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_ip());
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // string country = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_country());
    }

    // string asn = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_asn());
    }

    // string org = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_org());
    }

    // string continent_code = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_continent_code());
    }

    // string city = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_city());
    }

    // string region = 7;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_region());
    }

    // string postal = 8;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_postal());
    }

    // string timezone = 9;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_timezone());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AppGuardIpInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:appguard.AppGuardIpInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const AppGuardIpInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AppGuardIpInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:appguard.AppGuardIpInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:appguard.AppGuardIpInfo)
    MergeFrom(*source);
  }
}

void AppGuardIpInfo::MergeFrom(const AppGuardIpInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:appguard.AppGuardIpInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.ip().size() > 0) {
    _internal_set_ip(from._internal_ip());
  }
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_country(from._internal_country());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_asn(from._internal_asn());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_org(from._internal_org());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_set_continent_code(from._internal_continent_code());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_set_city(from._internal_city());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_set_region(from._internal_region());
    }
    if (cached_has_bits & 0x00000040u) {
      _internal_set_postal(from._internal_postal());
    }
    if (cached_has_bits & 0x00000080u) {
      _internal_set_timezone(from._internal_timezone());
    }
  }
}

void AppGuardIpInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:appguard.AppGuardIpInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AppGuardIpInfo::CopyFrom(const AppGuardIpInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:appguard.AppGuardIpInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AppGuardIpInfo::IsInitialized() const {
  return true;
}

void AppGuardIpInfo::InternalSwap(AppGuardIpInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ip_.Swap(&other->ip_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  country_.Swap(&other->country_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  asn_.Swap(&other->asn_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  org_.Swap(&other->org_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  continent_code_.Swap(&other->continent_code_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  city_.Swap(&other->city_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  region_.Swap(&other->region_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  postal_.Swap(&other->postal_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  timezone_.Swap(&other->timezone_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata AppGuardIpInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AppGuardTcpInfo::InitAsDefaultInstance() {
  ::appguard::_AppGuardTcpInfo_default_instance_._instance.get_mutable()->connection_ = const_cast< ::appguard::AppGuardTcpConnection*>(
      ::appguard::AppGuardTcpConnection::internal_default_instance());
  ::appguard::_AppGuardTcpInfo_default_instance_._instance.get_mutable()->ip_info_ = const_cast< ::appguard::AppGuardIpInfo*>(
      ::appguard::AppGuardIpInfo::internal_default_instance());
}
class AppGuardTcpInfo::_Internal {
 public:
  static const ::appguard::AppGuardTcpConnection& connection(const AppGuardTcpInfo* msg);
  static const ::appguard::AppGuardIpInfo& ip_info(const AppGuardTcpInfo* msg);
};

const ::appguard::AppGuardTcpConnection&
AppGuardTcpInfo::_Internal::connection(const AppGuardTcpInfo* msg) {
  return *msg->connection_;
}
const ::appguard::AppGuardIpInfo&
AppGuardTcpInfo::_Internal::ip_info(const AppGuardTcpInfo* msg) {
  return *msg->ip_info_;
}
AppGuardTcpInfo::AppGuardTcpInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:appguard.AppGuardTcpInfo)
}
AppGuardTcpInfo::AppGuardTcpInfo(const AppGuardTcpInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_connection()) {
    connection_ = new ::appguard::AppGuardTcpConnection(*from.connection_);
  } else {
    connection_ = nullptr;
  }
  if (from._internal_has_ip_info()) {
    ip_info_ = new ::appguard::AppGuardIpInfo(*from.ip_info_);
  } else {
    ip_info_ = nullptr;
  }
  tcp_id_ = from.tcp_id_;
  // @@protoc_insertion_point(copy_constructor:appguard.AppGuardTcpInfo)
}

void AppGuardTcpInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AppGuardTcpInfo_appguard_2eproto.base);
  ::memset(&connection_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&tcp_id_) -
      reinterpret_cast<char*>(&connection_)) + sizeof(tcp_id_));
}

AppGuardTcpInfo::~AppGuardTcpInfo() {
  // @@protoc_insertion_point(destructor:appguard.AppGuardTcpInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AppGuardTcpInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete connection_;
  if (this != internal_default_instance()) delete ip_info_;
}

void AppGuardTcpInfo::ArenaDtor(void* object) {
  AppGuardTcpInfo* _this = reinterpret_cast< AppGuardTcpInfo* >(object);
  (void)_this;
}
void AppGuardTcpInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AppGuardTcpInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AppGuardTcpInfo& AppGuardTcpInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AppGuardTcpInfo_appguard_2eproto.base);
  return *internal_default_instance();
}


void AppGuardTcpInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:appguard.AppGuardTcpInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && connection_ != nullptr) {
    delete connection_;
  }
  connection_ = nullptr;
  if (GetArena() == nullptr && ip_info_ != nullptr) {
    delete ip_info_;
  }
  ip_info_ = nullptr;
  tcp_id_ = PROTOBUF_ULONGLONG(0);
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AppGuardTcpInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .appguard.AppGuardTcpConnection connection = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_connection(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .appguard.AppGuardIpInfo ip_info = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_ip_info(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 tcp_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          tcp_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AppGuardTcpInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:appguard.AppGuardTcpInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .appguard.AppGuardTcpConnection connection = 1;
  if (this->has_connection()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::connection(this), target, stream);
  }

  // .appguard.AppGuardIpInfo ip_info = 2;
  if (this->has_ip_info()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::ip_info(this), target, stream);
  }

  // uint64 tcp_id = 3;
  if (this->tcp_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_tcp_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:appguard.AppGuardTcpInfo)
  return target;
}

size_t AppGuardTcpInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:appguard.AppGuardTcpInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .appguard.AppGuardTcpConnection connection = 1;
  if (this->has_connection()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *connection_);
  }

  // .appguard.AppGuardIpInfo ip_info = 2;
  if (this->has_ip_info()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *ip_info_);
  }

  // uint64 tcp_id = 3;
  if (this->tcp_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_tcp_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AppGuardTcpInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:appguard.AppGuardTcpInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const AppGuardTcpInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AppGuardTcpInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:appguard.AppGuardTcpInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:appguard.AppGuardTcpInfo)
    MergeFrom(*source);
  }
}

void AppGuardTcpInfo::MergeFrom(const AppGuardTcpInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:appguard.AppGuardTcpInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_connection()) {
    _internal_mutable_connection()->::appguard::AppGuardTcpConnection::MergeFrom(from._internal_connection());
  }
  if (from.has_ip_info()) {
    _internal_mutable_ip_info()->::appguard::AppGuardIpInfo::MergeFrom(from._internal_ip_info());
  }
  if (from.tcp_id() != 0) {
    _internal_set_tcp_id(from._internal_tcp_id());
  }
}

void AppGuardTcpInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:appguard.AppGuardTcpInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AppGuardTcpInfo::CopyFrom(const AppGuardTcpInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:appguard.AppGuardTcpInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AppGuardTcpInfo::IsInitialized() const {
  return true;
}

void AppGuardTcpInfo::InternalSwap(AppGuardTcpInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AppGuardTcpInfo, tcp_id_)
      + sizeof(AppGuardTcpInfo::tcp_id_)
      - PROTOBUF_FIELD_OFFSET(AppGuardTcpInfo, connection_)>(
          reinterpret_cast<char*>(&connection_),
          reinterpret_cast<char*>(&other->connection_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AppGuardTcpInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

AppGuardHttpRequest_HeadersEntry_DoNotUse::AppGuardHttpRequest_HeadersEntry_DoNotUse() {}
AppGuardHttpRequest_HeadersEntry_DoNotUse::AppGuardHttpRequest_HeadersEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void AppGuardHttpRequest_HeadersEntry_DoNotUse::MergeFrom(const AppGuardHttpRequest_HeadersEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata AppGuardHttpRequest_HeadersEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void AppGuardHttpRequest_HeadersEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

AppGuardHttpRequest_QueryEntry_DoNotUse::AppGuardHttpRequest_QueryEntry_DoNotUse() {}
AppGuardHttpRequest_QueryEntry_DoNotUse::AppGuardHttpRequest_QueryEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void AppGuardHttpRequest_QueryEntry_DoNotUse::MergeFrom(const AppGuardHttpRequest_QueryEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata AppGuardHttpRequest_QueryEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void AppGuardHttpRequest_QueryEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

void AppGuardHttpRequest::InitAsDefaultInstance() {
  ::appguard::_AppGuardHttpRequest_default_instance_._instance.get_mutable()->tcp_info_ = const_cast< ::appguard::AppGuardTcpInfo*>(
      ::appguard::AppGuardTcpInfo::internal_default_instance());
}
class AppGuardHttpRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<AppGuardHttpRequest>()._has_bits_);
  static void set_has_body(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::appguard::AppGuardTcpInfo& tcp_info(const AppGuardHttpRequest* msg);
};

const ::appguard::AppGuardTcpInfo&
AppGuardHttpRequest::_Internal::tcp_info(const AppGuardHttpRequest* msg) {
  return *msg->tcp_info_;
}
AppGuardHttpRequest::AppGuardHttpRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  headers_(arena),
  query_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:appguard.AppGuardHttpRequest)
}
AppGuardHttpRequest::AppGuardHttpRequest(const AppGuardHttpRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  headers_.MergeFrom(from.headers_);
  query_.MergeFrom(from.query_);
  token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_token().empty()) {
    token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_token(),
      GetArena());
  }
  original_url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_original_url().empty()) {
    original_url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_original_url(),
      GetArena());
  }
  method_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_method().empty()) {
    method_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_method(),
      GetArena());
  }
  body_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_body()) {
    body_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_body(),
      GetArena());
  }
  if (from._internal_has_tcp_info()) {
    tcp_info_ = new ::appguard::AppGuardTcpInfo(*from.tcp_info_);
  } else {
    tcp_info_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:appguard.AppGuardHttpRequest)
}

void AppGuardHttpRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AppGuardHttpRequest_appguard_2eproto.base);
  token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  original_url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  method_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  body_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  tcp_info_ = nullptr;
}

AppGuardHttpRequest::~AppGuardHttpRequest() {
  // @@protoc_insertion_point(destructor:appguard.AppGuardHttpRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AppGuardHttpRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  token_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  original_url_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  method_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  body_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete tcp_info_;
}

void AppGuardHttpRequest::ArenaDtor(void* object) {
  AppGuardHttpRequest* _this = reinterpret_cast< AppGuardHttpRequest* >(object);
  (void)_this;
}
void AppGuardHttpRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AppGuardHttpRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AppGuardHttpRequest& AppGuardHttpRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AppGuardHttpRequest_appguard_2eproto.base);
  return *internal_default_instance();
}


void AppGuardHttpRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:appguard.AppGuardHttpRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  headers_.Clear();
  query_.Clear();
  token_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  original_url_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  method_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    body_.ClearNonDefaultToEmpty();
  }
  if (GetArena() == nullptr && tcp_info_ != nullptr) {
    delete tcp_info_;
  }
  tcp_info_ = nullptr;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AppGuardHttpRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string token = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_token();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "appguard.AppGuardHttpRequest.token"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string original_url = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_original_url();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "appguard.AppGuardHttpRequest.original_url"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // map<string, string> headers = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&headers_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // string method = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_method();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "appguard.AppGuardHttpRequest.method"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string body = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_body();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "appguard.AppGuardHttpRequest.body"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // map<string, string> query = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&query_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else goto handle_unusual;
        continue;
      // .appguard.AppGuardTcpInfo tcp_info = 100;
      case 100:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_tcp_info(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AppGuardHttpRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:appguard.AppGuardHttpRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string token = 1;
  if (this->token().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_token().data(), static_cast<int>(this->_internal_token().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "appguard.AppGuardHttpRequest.token");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_token(), target);
  }

  // string original_url = 2;
  if (this->original_url().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_original_url().data(), static_cast<int>(this->_internal_original_url().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "appguard.AppGuardHttpRequest.original_url");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_original_url(), target);
  }

  // map<string, string> headers = 3;
  if (!this->_internal_headers().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "appguard.AppGuardHttpRequest.HeadersEntry.key");
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "appguard.AppGuardHttpRequest.HeadersEntry.value");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_headers().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_headers().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_headers().begin();
          it != this->_internal_headers().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = AppGuardHttpRequest_HeadersEntry_DoNotUse::Funcs::InternalSerialize(3, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_headers().begin();
          it != this->_internal_headers().end(); ++it) {
        target = AppGuardHttpRequest_HeadersEntry_DoNotUse::Funcs::InternalSerialize(3, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // string method = 4;
  if (this->method().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_method().data(), static_cast<int>(this->_internal_method().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "appguard.AppGuardHttpRequest.method");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_method(), target);
  }

  // string body = 5;
  if (_internal_has_body()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_body().data(), static_cast<int>(this->_internal_body().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "appguard.AppGuardHttpRequest.body");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_body(), target);
  }

  // map<string, string> query = 6;
  if (!this->_internal_query().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "appguard.AppGuardHttpRequest.QueryEntry.key");
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "appguard.AppGuardHttpRequest.QueryEntry.value");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_query().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_query().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_query().begin();
          it != this->_internal_query().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = AppGuardHttpRequest_QueryEntry_DoNotUse::Funcs::InternalSerialize(6, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_query().begin();
          it != this->_internal_query().end(); ++it) {
        target = AppGuardHttpRequest_QueryEntry_DoNotUse::Funcs::InternalSerialize(6, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // .appguard.AppGuardTcpInfo tcp_info = 100;
  if (this->has_tcp_info()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        100, _Internal::tcp_info(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:appguard.AppGuardHttpRequest)
  return target;
}

size_t AppGuardHttpRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:appguard.AppGuardHttpRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, string> headers = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_headers_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->_internal_headers().begin();
      it != this->_internal_headers().end(); ++it) {
    total_size += AppGuardHttpRequest_HeadersEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<string, string> query = 6;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_query_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->_internal_query().begin();
      it != this->_internal_query().end(); ++it) {
    total_size += AppGuardHttpRequest_QueryEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // string token = 1;
  if (this->token().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_token());
  }

  // string original_url = 2;
  if (this->original_url().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_original_url());
  }

  // string method = 4;
  if (this->method().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_method());
  }

  // string body = 5;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_body());
  }

  // .appguard.AppGuardTcpInfo tcp_info = 100;
  if (this->has_tcp_info()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *tcp_info_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AppGuardHttpRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:appguard.AppGuardHttpRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const AppGuardHttpRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AppGuardHttpRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:appguard.AppGuardHttpRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:appguard.AppGuardHttpRequest)
    MergeFrom(*source);
  }
}

void AppGuardHttpRequest::MergeFrom(const AppGuardHttpRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:appguard.AppGuardHttpRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  headers_.MergeFrom(from.headers_);
  query_.MergeFrom(from.query_);
  if (from.token().size() > 0) {
    _internal_set_token(from._internal_token());
  }
  if (from.original_url().size() > 0) {
    _internal_set_original_url(from._internal_original_url());
  }
  if (from.method().size() > 0) {
    _internal_set_method(from._internal_method());
  }
  if (from._internal_has_body()) {
    _internal_set_body(from._internal_body());
  }
  if (from.has_tcp_info()) {
    _internal_mutable_tcp_info()->::appguard::AppGuardTcpInfo::MergeFrom(from._internal_tcp_info());
  }
}

void AppGuardHttpRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:appguard.AppGuardHttpRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AppGuardHttpRequest::CopyFrom(const AppGuardHttpRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:appguard.AppGuardHttpRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AppGuardHttpRequest::IsInitialized() const {
  return true;
}

void AppGuardHttpRequest::InternalSwap(AppGuardHttpRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  headers_.Swap(&other->headers_);
  query_.Swap(&other->query_);
  token_.Swap(&other->token_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  original_url_.Swap(&other->original_url_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  method_.Swap(&other->method_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  body_.Swap(&other->body_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(tcp_info_, other->tcp_info_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AppGuardHttpRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

AppGuardHttpResponse_HeadersEntry_DoNotUse::AppGuardHttpResponse_HeadersEntry_DoNotUse() {}
AppGuardHttpResponse_HeadersEntry_DoNotUse::AppGuardHttpResponse_HeadersEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void AppGuardHttpResponse_HeadersEntry_DoNotUse::MergeFrom(const AppGuardHttpResponse_HeadersEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata AppGuardHttpResponse_HeadersEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void AppGuardHttpResponse_HeadersEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

void AppGuardHttpResponse::InitAsDefaultInstance() {
  ::appguard::_AppGuardHttpResponse_default_instance_._instance.get_mutable()->tcp_info_ = const_cast< ::appguard::AppGuardTcpInfo*>(
      ::appguard::AppGuardTcpInfo::internal_default_instance());
}
class AppGuardHttpResponse::_Internal {
 public:
  static const ::appguard::AppGuardTcpInfo& tcp_info(const AppGuardHttpResponse* msg);
};

const ::appguard::AppGuardTcpInfo&
AppGuardHttpResponse::_Internal::tcp_info(const AppGuardHttpResponse* msg) {
  return *msg->tcp_info_;
}
AppGuardHttpResponse::AppGuardHttpResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  headers_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:appguard.AppGuardHttpResponse)
}
AppGuardHttpResponse::AppGuardHttpResponse(const AppGuardHttpResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  headers_.MergeFrom(from.headers_);
  token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_token().empty()) {
    token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_token(),
      GetArena());
  }
  if (from._internal_has_tcp_info()) {
    tcp_info_ = new ::appguard::AppGuardTcpInfo(*from.tcp_info_);
  } else {
    tcp_info_ = nullptr;
  }
  code_ = from.code_;
  // @@protoc_insertion_point(copy_constructor:appguard.AppGuardHttpResponse)
}

void AppGuardHttpResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AppGuardHttpResponse_appguard_2eproto.base);
  token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&tcp_info_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&code_) -
      reinterpret_cast<char*>(&tcp_info_)) + sizeof(code_));
}

AppGuardHttpResponse::~AppGuardHttpResponse() {
  // @@protoc_insertion_point(destructor:appguard.AppGuardHttpResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AppGuardHttpResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  token_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete tcp_info_;
}

void AppGuardHttpResponse::ArenaDtor(void* object) {
  AppGuardHttpResponse* _this = reinterpret_cast< AppGuardHttpResponse* >(object);
  (void)_this;
}
void AppGuardHttpResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AppGuardHttpResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AppGuardHttpResponse& AppGuardHttpResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AppGuardHttpResponse_appguard_2eproto.base);
  return *internal_default_instance();
}


void AppGuardHttpResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:appguard.AppGuardHttpResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  headers_.Clear();
  token_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && tcp_info_ != nullptr) {
    delete tcp_info_;
  }
  tcp_info_ = nullptr;
  code_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AppGuardHttpResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string token = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_token();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "appguard.AppGuardHttpResponse.token"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 code = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // map<string, string> headers = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&headers_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // .appguard.AppGuardTcpInfo tcp_info = 100;
      case 100:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_tcp_info(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AppGuardHttpResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:appguard.AppGuardHttpResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string token = 1;
  if (this->token().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_token().data(), static_cast<int>(this->_internal_token().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "appguard.AppGuardHttpResponse.token");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_token(), target);
  }

  // uint32 code = 2;
  if (this->code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_code(), target);
  }

  // map<string, string> headers = 3;
  if (!this->_internal_headers().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "appguard.AppGuardHttpResponse.HeadersEntry.key");
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "appguard.AppGuardHttpResponse.HeadersEntry.value");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_headers().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_headers().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_headers().begin();
          it != this->_internal_headers().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = AppGuardHttpResponse_HeadersEntry_DoNotUse::Funcs::InternalSerialize(3, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_headers().begin();
          it != this->_internal_headers().end(); ++it) {
        target = AppGuardHttpResponse_HeadersEntry_DoNotUse::Funcs::InternalSerialize(3, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // .appguard.AppGuardTcpInfo tcp_info = 100;
  if (this->has_tcp_info()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        100, _Internal::tcp_info(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:appguard.AppGuardHttpResponse)
  return target;
}

size_t AppGuardHttpResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:appguard.AppGuardHttpResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, string> headers = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_headers_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->_internal_headers().begin();
      it != this->_internal_headers().end(); ++it) {
    total_size += AppGuardHttpResponse_HeadersEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // string token = 1;
  if (this->token().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_token());
  }

  // .appguard.AppGuardTcpInfo tcp_info = 100;
  if (this->has_tcp_info()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *tcp_info_);
  }

  // uint32 code = 2;
  if (this->code() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_code());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AppGuardHttpResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:appguard.AppGuardHttpResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const AppGuardHttpResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AppGuardHttpResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:appguard.AppGuardHttpResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:appguard.AppGuardHttpResponse)
    MergeFrom(*source);
  }
}

void AppGuardHttpResponse::MergeFrom(const AppGuardHttpResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:appguard.AppGuardHttpResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  headers_.MergeFrom(from.headers_);
  if (from.token().size() > 0) {
    _internal_set_token(from._internal_token());
  }
  if (from.has_tcp_info()) {
    _internal_mutable_tcp_info()->::appguard::AppGuardTcpInfo::MergeFrom(from._internal_tcp_info());
  }
  if (from.code() != 0) {
    _internal_set_code(from._internal_code());
  }
}

void AppGuardHttpResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:appguard.AppGuardHttpResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AppGuardHttpResponse::CopyFrom(const AppGuardHttpResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:appguard.AppGuardHttpResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AppGuardHttpResponse::IsInitialized() const {
  return true;
}

void AppGuardHttpResponse::InternalSwap(AppGuardHttpResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  headers_.Swap(&other->headers_);
  token_.Swap(&other->token_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AppGuardHttpResponse, code_)
      + sizeof(AppGuardHttpResponse::code_)
      - PROTOBUF_FIELD_OFFSET(AppGuardHttpResponse, tcp_info_)>(
          reinterpret_cast<char*>(&tcp_info_),
          reinterpret_cast<char*>(&other->tcp_info_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AppGuardHttpResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

AppGuardSmtpRequest_HeadersEntry_DoNotUse::AppGuardSmtpRequest_HeadersEntry_DoNotUse() {}
AppGuardSmtpRequest_HeadersEntry_DoNotUse::AppGuardSmtpRequest_HeadersEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void AppGuardSmtpRequest_HeadersEntry_DoNotUse::MergeFrom(const AppGuardSmtpRequest_HeadersEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata AppGuardSmtpRequest_HeadersEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void AppGuardSmtpRequest_HeadersEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

void AppGuardSmtpRequest::InitAsDefaultInstance() {
  ::appguard::_AppGuardSmtpRequest_default_instance_._instance.get_mutable()->tcp_info_ = const_cast< ::appguard::AppGuardTcpInfo*>(
      ::appguard::AppGuardTcpInfo::internal_default_instance());
}
class AppGuardSmtpRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<AppGuardSmtpRequest>()._has_bits_);
  static void set_has_body(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::appguard::AppGuardTcpInfo& tcp_info(const AppGuardSmtpRequest* msg);
};

const ::appguard::AppGuardTcpInfo&
AppGuardSmtpRequest::_Internal::tcp_info(const AppGuardSmtpRequest* msg) {
  return *msg->tcp_info_;
}
AppGuardSmtpRequest::AppGuardSmtpRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  headers_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:appguard.AppGuardSmtpRequest)
}
AppGuardSmtpRequest::AppGuardSmtpRequest(const AppGuardSmtpRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  headers_.MergeFrom(from.headers_);
  token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_token().empty()) {
    token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_token(),
      GetArena());
  }
  body_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_body()) {
    body_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_body(),
      GetArena());
  }
  if (from._internal_has_tcp_info()) {
    tcp_info_ = new ::appguard::AppGuardTcpInfo(*from.tcp_info_);
  } else {
    tcp_info_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:appguard.AppGuardSmtpRequest)
}

void AppGuardSmtpRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AppGuardSmtpRequest_appguard_2eproto.base);
  token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  body_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  tcp_info_ = nullptr;
}

AppGuardSmtpRequest::~AppGuardSmtpRequest() {
  // @@protoc_insertion_point(destructor:appguard.AppGuardSmtpRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AppGuardSmtpRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  token_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  body_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete tcp_info_;
}

void AppGuardSmtpRequest::ArenaDtor(void* object) {
  AppGuardSmtpRequest* _this = reinterpret_cast< AppGuardSmtpRequest* >(object);
  (void)_this;
}
void AppGuardSmtpRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AppGuardSmtpRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AppGuardSmtpRequest& AppGuardSmtpRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AppGuardSmtpRequest_appguard_2eproto.base);
  return *internal_default_instance();
}


void AppGuardSmtpRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:appguard.AppGuardSmtpRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  headers_.Clear();
  token_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    body_.ClearNonDefaultToEmpty();
  }
  if (GetArena() == nullptr && tcp_info_ != nullptr) {
    delete tcp_info_;
  }
  tcp_info_ = nullptr;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AppGuardSmtpRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string token = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_token();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "appguard.AppGuardSmtpRequest.token"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // map<string, string> headers = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&headers_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // string body = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_body();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "appguard.AppGuardSmtpRequest.body"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .appguard.AppGuardTcpInfo tcp_info = 100;
      case 100:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_tcp_info(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AppGuardSmtpRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:appguard.AppGuardSmtpRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string token = 1;
  if (this->token().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_token().data(), static_cast<int>(this->_internal_token().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "appguard.AppGuardSmtpRequest.token");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_token(), target);
  }

  // map<string, string> headers = 2;
  if (!this->_internal_headers().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "appguard.AppGuardSmtpRequest.HeadersEntry.key");
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "appguard.AppGuardSmtpRequest.HeadersEntry.value");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_headers().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_headers().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_headers().begin();
          it != this->_internal_headers().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = AppGuardSmtpRequest_HeadersEntry_DoNotUse::Funcs::InternalSerialize(2, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_headers().begin();
          it != this->_internal_headers().end(); ++it) {
        target = AppGuardSmtpRequest_HeadersEntry_DoNotUse::Funcs::InternalSerialize(2, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // string body = 3;
  if (_internal_has_body()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_body().data(), static_cast<int>(this->_internal_body().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "appguard.AppGuardSmtpRequest.body");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_body(), target);
  }

  // .appguard.AppGuardTcpInfo tcp_info = 100;
  if (this->has_tcp_info()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        100, _Internal::tcp_info(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:appguard.AppGuardSmtpRequest)
  return target;
}

size_t AppGuardSmtpRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:appguard.AppGuardSmtpRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, string> headers = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_headers_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->_internal_headers().begin();
      it != this->_internal_headers().end(); ++it) {
    total_size += AppGuardSmtpRequest_HeadersEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // string token = 1;
  if (this->token().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_token());
  }

  // string body = 3;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_body());
  }

  // .appguard.AppGuardTcpInfo tcp_info = 100;
  if (this->has_tcp_info()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *tcp_info_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AppGuardSmtpRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:appguard.AppGuardSmtpRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const AppGuardSmtpRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AppGuardSmtpRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:appguard.AppGuardSmtpRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:appguard.AppGuardSmtpRequest)
    MergeFrom(*source);
  }
}

void AppGuardSmtpRequest::MergeFrom(const AppGuardSmtpRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:appguard.AppGuardSmtpRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  headers_.MergeFrom(from.headers_);
  if (from.token().size() > 0) {
    _internal_set_token(from._internal_token());
  }
  if (from._internal_has_body()) {
    _internal_set_body(from._internal_body());
  }
  if (from.has_tcp_info()) {
    _internal_mutable_tcp_info()->::appguard::AppGuardTcpInfo::MergeFrom(from._internal_tcp_info());
  }
}

void AppGuardSmtpRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:appguard.AppGuardSmtpRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AppGuardSmtpRequest::CopyFrom(const AppGuardSmtpRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:appguard.AppGuardSmtpRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AppGuardSmtpRequest::IsInitialized() const {
  return true;
}

void AppGuardSmtpRequest::InternalSwap(AppGuardSmtpRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  headers_.Swap(&other->headers_);
  token_.Swap(&other->token_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  body_.Swap(&other->body_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(tcp_info_, other->tcp_info_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AppGuardSmtpRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AppGuardSmtpResponse::InitAsDefaultInstance() {
  ::appguard::_AppGuardSmtpResponse_default_instance_._instance.get_mutable()->tcp_info_ = const_cast< ::appguard::AppGuardTcpInfo*>(
      ::appguard::AppGuardTcpInfo::internal_default_instance());
}
class AppGuardSmtpResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<AppGuardSmtpResponse>()._has_bits_);
  static void set_has_code(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::appguard::AppGuardTcpInfo& tcp_info(const AppGuardSmtpResponse* msg);
};

const ::appguard::AppGuardTcpInfo&
AppGuardSmtpResponse::_Internal::tcp_info(const AppGuardSmtpResponse* msg) {
  return *msg->tcp_info_;
}
AppGuardSmtpResponse::AppGuardSmtpResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:appguard.AppGuardSmtpResponse)
}
AppGuardSmtpResponse::AppGuardSmtpResponse(const AppGuardSmtpResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_token().empty()) {
    token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_token(),
      GetArena());
  }
  if (from._internal_has_tcp_info()) {
    tcp_info_ = new ::appguard::AppGuardTcpInfo(*from.tcp_info_);
  } else {
    tcp_info_ = nullptr;
  }
  code_ = from.code_;
  // @@protoc_insertion_point(copy_constructor:appguard.AppGuardSmtpResponse)
}

void AppGuardSmtpResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AppGuardSmtpResponse_appguard_2eproto.base);
  token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&tcp_info_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&code_) -
      reinterpret_cast<char*>(&tcp_info_)) + sizeof(code_));
}

AppGuardSmtpResponse::~AppGuardSmtpResponse() {
  // @@protoc_insertion_point(destructor:appguard.AppGuardSmtpResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AppGuardSmtpResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  token_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete tcp_info_;
}

void AppGuardSmtpResponse::ArenaDtor(void* object) {
  AppGuardSmtpResponse* _this = reinterpret_cast< AppGuardSmtpResponse* >(object);
  (void)_this;
}
void AppGuardSmtpResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AppGuardSmtpResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AppGuardSmtpResponse& AppGuardSmtpResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AppGuardSmtpResponse_appguard_2eproto.base);
  return *internal_default_instance();
}


void AppGuardSmtpResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:appguard.AppGuardSmtpResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  token_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && tcp_info_ != nullptr) {
    delete tcp_info_;
  }
  tcp_info_ = nullptr;
  code_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AppGuardSmtpResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string token = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_token();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "appguard.AppGuardSmtpResponse.token"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 code = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_code(&has_bits);
          code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .appguard.AppGuardTcpInfo tcp_info = 100;
      case 100:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_tcp_info(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AppGuardSmtpResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:appguard.AppGuardSmtpResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string token = 1;
  if (this->token().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_token().data(), static_cast<int>(this->_internal_token().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "appguard.AppGuardSmtpResponse.token");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_token(), target);
  }

  // uint32 code = 2;
  if (_internal_has_code()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_code(), target);
  }

  // .appguard.AppGuardTcpInfo tcp_info = 100;
  if (this->has_tcp_info()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        100, _Internal::tcp_info(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:appguard.AppGuardSmtpResponse)
  return target;
}

size_t AppGuardSmtpResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:appguard.AppGuardSmtpResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string token = 1;
  if (this->token().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_token());
  }

  // .appguard.AppGuardTcpInfo tcp_info = 100;
  if (this->has_tcp_info()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *tcp_info_);
  }

  // uint32 code = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_code());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AppGuardSmtpResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:appguard.AppGuardSmtpResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const AppGuardSmtpResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AppGuardSmtpResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:appguard.AppGuardSmtpResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:appguard.AppGuardSmtpResponse)
    MergeFrom(*source);
  }
}

void AppGuardSmtpResponse::MergeFrom(const AppGuardSmtpResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:appguard.AppGuardSmtpResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.token().size() > 0) {
    _internal_set_token(from._internal_token());
  }
  if (from.has_tcp_info()) {
    _internal_mutable_tcp_info()->::appguard::AppGuardTcpInfo::MergeFrom(from._internal_tcp_info());
  }
  if (from._internal_has_code()) {
    _internal_set_code(from._internal_code());
  }
}

void AppGuardSmtpResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:appguard.AppGuardSmtpResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AppGuardSmtpResponse::CopyFrom(const AppGuardSmtpResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:appguard.AppGuardSmtpResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AppGuardSmtpResponse::IsInitialized() const {
  return true;
}

void AppGuardSmtpResponse::InternalSwap(AppGuardSmtpResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  token_.Swap(&other->token_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AppGuardSmtpResponse, code_)
      + sizeof(AppGuardSmtpResponse::code_)
      - PROTOBUF_FIELD_OFFSET(AppGuardSmtpResponse, tcp_info_)>(
          reinterpret_cast<char*>(&tcp_info_),
          reinterpret_cast<char*>(&other->tcp_info_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AppGuardSmtpResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AppGuardResponse::InitAsDefaultInstance() {
}
class AppGuardResponse::_Internal {
 public:
};

AppGuardResponse::AppGuardResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:appguard.AppGuardResponse)
}
AppGuardResponse::AppGuardResponse(const AppGuardResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  policy_ = from.policy_;
  // @@protoc_insertion_point(copy_constructor:appguard.AppGuardResponse)
}

void AppGuardResponse::SharedCtor() {
  policy_ = 0;
}

AppGuardResponse::~AppGuardResponse() {
  // @@protoc_insertion_point(destructor:appguard.AppGuardResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AppGuardResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void AppGuardResponse::ArenaDtor(void* object) {
  AppGuardResponse* _this = reinterpret_cast< AppGuardResponse* >(object);
  (void)_this;
}
void AppGuardResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AppGuardResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AppGuardResponse& AppGuardResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AppGuardResponse_appguard_2eproto.base);
  return *internal_default_instance();
}


void AppGuardResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:appguard.AppGuardResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  policy_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AppGuardResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .appguard_commands.FirewallPolicy policy = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_policy(static_cast<::appguard_commands::FirewallPolicy>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AppGuardResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:appguard.AppGuardResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .appguard_commands.FirewallPolicy policy = 2;
  if (this->policy() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_policy(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:appguard.AppGuardResponse)
  return target;
}

size_t AppGuardResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:appguard.AppGuardResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .appguard_commands.FirewallPolicy policy = 2;
  if (this->policy() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_policy());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AppGuardResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:appguard.AppGuardResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const AppGuardResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AppGuardResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:appguard.AppGuardResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:appguard.AppGuardResponse)
    MergeFrom(*source);
  }
}

void AppGuardResponse::MergeFrom(const AppGuardResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:appguard.AppGuardResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.policy() != 0) {
    _internal_set_policy(from._internal_policy());
  }
}

void AppGuardResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:appguard.AppGuardResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AppGuardResponse::CopyFrom(const AppGuardResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:appguard.AppGuardResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AppGuardResponse::IsInitialized() const {
  return true;
}

void AppGuardResponse::InternalSwap(AppGuardResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(policy_, other->policy_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AppGuardResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AppGuardTcpResponse::InitAsDefaultInstance() {
  ::appguard::_AppGuardTcpResponse_default_instance_._instance.get_mutable()->tcp_info_ = const_cast< ::appguard::AppGuardTcpInfo*>(
      ::appguard::AppGuardTcpInfo::internal_default_instance());
}
class AppGuardTcpResponse::_Internal {
 public:
  static const ::appguard::AppGuardTcpInfo& tcp_info(const AppGuardTcpResponse* msg);
};

const ::appguard::AppGuardTcpInfo&
AppGuardTcpResponse::_Internal::tcp_info(const AppGuardTcpResponse* msg) {
  return *msg->tcp_info_;
}
AppGuardTcpResponse::AppGuardTcpResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:appguard.AppGuardTcpResponse)
}
AppGuardTcpResponse::AppGuardTcpResponse(const AppGuardTcpResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_tcp_info()) {
    tcp_info_ = new ::appguard::AppGuardTcpInfo(*from.tcp_info_);
  } else {
    tcp_info_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:appguard.AppGuardTcpResponse)
}

void AppGuardTcpResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AppGuardTcpResponse_appguard_2eproto.base);
  tcp_info_ = nullptr;
}

AppGuardTcpResponse::~AppGuardTcpResponse() {
  // @@protoc_insertion_point(destructor:appguard.AppGuardTcpResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AppGuardTcpResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete tcp_info_;
}

void AppGuardTcpResponse::ArenaDtor(void* object) {
  AppGuardTcpResponse* _this = reinterpret_cast< AppGuardTcpResponse* >(object);
  (void)_this;
}
void AppGuardTcpResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AppGuardTcpResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AppGuardTcpResponse& AppGuardTcpResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AppGuardTcpResponse_appguard_2eproto.base);
  return *internal_default_instance();
}


void AppGuardTcpResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:appguard.AppGuardTcpResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && tcp_info_ != nullptr) {
    delete tcp_info_;
  }
  tcp_info_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AppGuardTcpResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .appguard.AppGuardTcpInfo tcp_info = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_tcp_info(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AppGuardTcpResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:appguard.AppGuardTcpResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .appguard.AppGuardTcpInfo tcp_info = 1;
  if (this->has_tcp_info()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::tcp_info(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:appguard.AppGuardTcpResponse)
  return target;
}

size_t AppGuardTcpResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:appguard.AppGuardTcpResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .appguard.AppGuardTcpInfo tcp_info = 1;
  if (this->has_tcp_info()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *tcp_info_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AppGuardTcpResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:appguard.AppGuardTcpResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const AppGuardTcpResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AppGuardTcpResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:appguard.AppGuardTcpResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:appguard.AppGuardTcpResponse)
    MergeFrom(*source);
  }
}

void AppGuardTcpResponse::MergeFrom(const AppGuardTcpResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:appguard.AppGuardTcpResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_tcp_info()) {
    _internal_mutable_tcp_info()->::appguard::AppGuardTcpInfo::MergeFrom(from._internal_tcp_info());
  }
}

void AppGuardTcpResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:appguard.AppGuardTcpResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AppGuardTcpResponse::CopyFrom(const AppGuardTcpResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:appguard.AppGuardTcpResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AppGuardTcpResponse::IsInitialized() const {
  return true;
}

void AppGuardTcpResponse::InternalSwap(AppGuardTcpResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(tcp_info_, other->tcp_info_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AppGuardTcpResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Token::InitAsDefaultInstance() {
}
class Token::_Internal {
 public:
};

Token::Token(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:appguard.Token)
}
Token::Token(const Token& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_token().empty()) {
    token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_token(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:appguard.Token)
}

void Token::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Token_appguard_2eproto.base);
  token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

Token::~Token() {
  // @@protoc_insertion_point(destructor:appguard.Token)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Token::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  token_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Token::ArenaDtor(void* object) {
  Token* _this = reinterpret_cast< Token* >(object);
  (void)_this;
}
void Token::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Token::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Token& Token::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Token_appguard_2eproto.base);
  return *internal_default_instance();
}


void Token::Clear() {
// @@protoc_insertion_point(message_clear_start:appguard.Token)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  token_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Token::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string token = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_token();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "appguard.Token.token"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Token::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:appguard.Token)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string token = 1;
  if (this->token().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_token().data(), static_cast<int>(this->_internal_token().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "appguard.Token.token");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_token(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:appguard.Token)
  return target;
}

size_t Token::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:appguard.Token)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string token = 1;
  if (this->token().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_token());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Token::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:appguard.Token)
  GOOGLE_DCHECK_NE(&from, this);
  const Token* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Token>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:appguard.Token)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:appguard.Token)
    MergeFrom(*source);
  }
}

void Token::MergeFrom(const Token& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:appguard.Token)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.token().size() > 0) {
    _internal_set_token(from._internal_token());
  }
}

void Token::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:appguard.Token)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Token::CopyFrom(const Token& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:appguard.Token)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Token::IsInitialized() const {
  return true;
}

void Token::InternalSwap(Token* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  token_.Swap(&other->token_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata Token::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace appguard
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::appguard::Logs* Arena::CreateMaybeMessage< ::appguard::Logs >(Arena* arena) {
  return Arena::CreateMessageInternal< ::appguard::Logs >(arena);
}
template<> PROTOBUF_NOINLINE ::appguard::Log* Arena::CreateMaybeMessage< ::appguard::Log >(Arena* arena) {
  return Arena::CreateMessageInternal< ::appguard::Log >(arena);
}
template<> PROTOBUF_NOINLINE ::appguard::AppGuardTcpConnection* Arena::CreateMaybeMessage< ::appguard::AppGuardTcpConnection >(Arena* arena) {
  return Arena::CreateMessageInternal< ::appguard::AppGuardTcpConnection >(arena);
}
template<> PROTOBUF_NOINLINE ::appguard::AppGuardIpInfo* Arena::CreateMaybeMessage< ::appguard::AppGuardIpInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::appguard::AppGuardIpInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::appguard::AppGuardTcpInfo* Arena::CreateMaybeMessage< ::appguard::AppGuardTcpInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::appguard::AppGuardTcpInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::appguard::AppGuardHttpRequest_HeadersEntry_DoNotUse* Arena::CreateMaybeMessage< ::appguard::AppGuardHttpRequest_HeadersEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::appguard::AppGuardHttpRequest_HeadersEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::appguard::AppGuardHttpRequest_QueryEntry_DoNotUse* Arena::CreateMaybeMessage< ::appguard::AppGuardHttpRequest_QueryEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::appguard::AppGuardHttpRequest_QueryEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::appguard::AppGuardHttpRequest* Arena::CreateMaybeMessage< ::appguard::AppGuardHttpRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::appguard::AppGuardHttpRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::appguard::AppGuardHttpResponse_HeadersEntry_DoNotUse* Arena::CreateMaybeMessage< ::appguard::AppGuardHttpResponse_HeadersEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::appguard::AppGuardHttpResponse_HeadersEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::appguard::AppGuardHttpResponse* Arena::CreateMaybeMessage< ::appguard::AppGuardHttpResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::appguard::AppGuardHttpResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::appguard::AppGuardSmtpRequest_HeadersEntry_DoNotUse* Arena::CreateMaybeMessage< ::appguard::AppGuardSmtpRequest_HeadersEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::appguard::AppGuardSmtpRequest_HeadersEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::appguard::AppGuardSmtpRequest* Arena::CreateMaybeMessage< ::appguard::AppGuardSmtpRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::appguard::AppGuardSmtpRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::appguard::AppGuardSmtpResponse* Arena::CreateMaybeMessage< ::appguard::AppGuardSmtpResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::appguard::AppGuardSmtpResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::appguard::AppGuardResponse* Arena::CreateMaybeMessage< ::appguard::AppGuardResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::appguard::AppGuardResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::appguard::AppGuardTcpResponse* Arena::CreateMaybeMessage< ::appguard::AppGuardTcpResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::appguard::AppGuardTcpResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::appguard::Token* Arena::CreateMaybeMessage< ::appguard::Token >(Arena* arena) {
  return Arena::CreateMessageInternal< ::appguard::Token >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
