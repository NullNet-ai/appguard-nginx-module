// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: commands.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_commands_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_commands_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/empty.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_commands_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_commands_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[6]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_commands_2eproto;
namespace appguard_commands {
class Authentication;
class AuthenticationDefaultTypeInternal;
extern AuthenticationDefaultTypeInternal _Authentication_default_instance_;
class AuthenticationData;
class AuthenticationDataDefaultTypeInternal;
extern AuthenticationDataDefaultTypeInternal _AuthenticationData_default_instance_;
class AuthorizationRequest;
class AuthorizationRequestDefaultTypeInternal;
extern AuthorizationRequestDefaultTypeInternal _AuthorizationRequest_default_instance_;
class ClientMessage;
class ClientMessageDefaultTypeInternal;
extern ClientMessageDefaultTypeInternal _ClientMessage_default_instance_;
class FirewallDefaults;
class FirewallDefaultsDefaultTypeInternal;
extern FirewallDefaultsDefaultTypeInternal _FirewallDefaults_default_instance_;
class ServerMessage;
class ServerMessageDefaultTypeInternal;
extern ServerMessageDefaultTypeInternal _ServerMessage_default_instance_;
}  // namespace appguard_commands
PROTOBUF_NAMESPACE_OPEN
template<> ::appguard_commands::Authentication* Arena::CreateMaybeMessage<::appguard_commands::Authentication>(Arena*);
template<> ::appguard_commands::AuthenticationData* Arena::CreateMaybeMessage<::appguard_commands::AuthenticationData>(Arena*);
template<> ::appguard_commands::AuthorizationRequest* Arena::CreateMaybeMessage<::appguard_commands::AuthorizationRequest>(Arena*);
template<> ::appguard_commands::ClientMessage* Arena::CreateMaybeMessage<::appguard_commands::ClientMessage>(Arena*);
template<> ::appguard_commands::FirewallDefaults* Arena::CreateMaybeMessage<::appguard_commands::FirewallDefaults>(Arena*);
template<> ::appguard_commands::ServerMessage* Arena::CreateMaybeMessage<::appguard_commands::ServerMessage>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace appguard_commands {

enum FirewallPolicy : int {
  UNKNOWN = 0,
  ALLOW = 1,
  DENY = 2,
  FirewallPolicy_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  FirewallPolicy_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool FirewallPolicy_IsValid(int value);
constexpr FirewallPolicy FirewallPolicy_MIN = UNKNOWN;
constexpr FirewallPolicy FirewallPolicy_MAX = DENY;
constexpr int FirewallPolicy_ARRAYSIZE = FirewallPolicy_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* FirewallPolicy_descriptor();
template<typename T>
inline const std::string& FirewallPolicy_Name(T enum_t_value) {
  static_assert(::std::is_same<T, FirewallPolicy>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function FirewallPolicy_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    FirewallPolicy_descriptor(), enum_t_value);
}
inline bool FirewallPolicy_Parse(
    const std::string& name, FirewallPolicy* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<FirewallPolicy>(
    FirewallPolicy_descriptor(), name, value);
}
// ===================================================================

class AuthorizationRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:appguard_commands.AuthorizationRequest) */ {
 public:
  inline AuthorizationRequest() : AuthorizationRequest(nullptr) {};
  virtual ~AuthorizationRequest();

  AuthorizationRequest(const AuthorizationRequest& from);
  AuthorizationRequest(AuthorizationRequest&& from) noexcept
    : AuthorizationRequest() {
    *this = ::std::move(from);
  }

  inline AuthorizationRequest& operator=(const AuthorizationRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline AuthorizationRequest& operator=(AuthorizationRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AuthorizationRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AuthorizationRequest* internal_default_instance() {
    return reinterpret_cast<const AuthorizationRequest*>(
               &_AuthorizationRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(AuthorizationRequest& a, AuthorizationRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(AuthorizationRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AuthorizationRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AuthorizationRequest* New() const final {
    return CreateMaybeMessage<AuthorizationRequest>(nullptr);
  }

  AuthorizationRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AuthorizationRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AuthorizationRequest& from);
  void MergeFrom(const AuthorizationRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AuthorizationRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "appguard_commands.AuthorizationRequest";
  }
  protected:
  explicit AuthorizationRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_commands_2eproto);
    return ::descriptor_table_commands_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUuidFieldNumber = 1,
    kCodeFieldNumber = 2,
    kCategoryFieldNumber = 3,
    kTypeFieldNumber = 4,
    kTargetOsFieldNumber = 5,
  };
  // string uuid = 1;
  void clear_uuid();
  const std::string& uuid() const;
  void set_uuid(const std::string& value);
  void set_uuid(std::string&& value);
  void set_uuid(const char* value);
  void set_uuid(const char* value, size_t size);
  std::string* mutable_uuid();
  std::string* release_uuid();
  void set_allocated_uuid(std::string* uuid);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_uuid();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_uuid(
      std::string* uuid);
  private:
  const std::string& _internal_uuid() const;
  void _internal_set_uuid(const std::string& value);
  std::string* _internal_mutable_uuid();
  public:

  // string code = 2;
  void clear_code();
  const std::string& code() const;
  void set_code(const std::string& value);
  void set_code(std::string&& value);
  void set_code(const char* value);
  void set_code(const char* value, size_t size);
  std::string* mutable_code();
  std::string* release_code();
  void set_allocated_code(std::string* code);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_code();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_code(
      std::string* code);
  private:
  const std::string& _internal_code() const;
  void _internal_set_code(const std::string& value);
  std::string* _internal_mutable_code();
  public:

  // string category = 3;
  void clear_category();
  const std::string& category() const;
  void set_category(const std::string& value);
  void set_category(std::string&& value);
  void set_category(const char* value);
  void set_category(const char* value, size_t size);
  std::string* mutable_category();
  std::string* release_category();
  void set_allocated_category(std::string* category);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_category();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_category(
      std::string* category);
  private:
  const std::string& _internal_category() const;
  void _internal_set_category(const std::string& value);
  std::string* _internal_mutable_category();
  public:

  // string type = 4;
  void clear_type();
  const std::string& type() const;
  void set_type(const std::string& value);
  void set_type(std::string&& value);
  void set_type(const char* value);
  void set_type(const char* value, size_t size);
  std::string* mutable_type();
  std::string* release_type();
  void set_allocated_type(std::string* type);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_type();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_type(
      std::string* type);
  private:
  const std::string& _internal_type() const;
  void _internal_set_type(const std::string& value);
  std::string* _internal_mutable_type();
  public:

  // string target_os = 5;
  void clear_target_os();
  const std::string& target_os() const;
  void set_target_os(const std::string& value);
  void set_target_os(std::string&& value);
  void set_target_os(const char* value);
  void set_target_os(const char* value, size_t size);
  std::string* mutable_target_os();
  std::string* release_target_os();
  void set_allocated_target_os(std::string* target_os);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_target_os();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_target_os(
      std::string* target_os);
  private:
  const std::string& _internal_target_os() const;
  void _internal_set_target_os(const std::string& value);
  std::string* _internal_mutable_target_os();
  public:

  // @@protoc_insertion_point(class_scope:appguard_commands.AuthorizationRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr uuid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr code_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr category_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr type_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr target_os_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_commands_2eproto;
};
// -------------------------------------------------------------------

class Authentication PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:appguard_commands.Authentication) */ {
 public:
  inline Authentication() : Authentication(nullptr) {};
  virtual ~Authentication();

  Authentication(const Authentication& from);
  Authentication(Authentication&& from) noexcept
    : Authentication() {
    *this = ::std::move(from);
  }

  inline Authentication& operator=(const Authentication& from) {
    CopyFrom(from);
    return *this;
  }
  inline Authentication& operator=(Authentication&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Authentication& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Authentication* internal_default_instance() {
    return reinterpret_cast<const Authentication*>(
               &_Authentication_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Authentication& a, Authentication& b) {
    a.Swap(&b);
  }
  inline void Swap(Authentication* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Authentication* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Authentication* New() const final {
    return CreateMaybeMessage<Authentication>(nullptr);
  }

  Authentication* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Authentication>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Authentication& from);
  void MergeFrom(const Authentication& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Authentication* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "appguard_commands.Authentication";
  }
  protected:
  explicit Authentication(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_commands_2eproto);
    return ::descriptor_table_commands_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAppIdFieldNumber = 1,
    kAppSecretFieldNumber = 2,
  };
  // string app_id = 1;
  void clear_app_id();
  const std::string& app_id() const;
  void set_app_id(const std::string& value);
  void set_app_id(std::string&& value);
  void set_app_id(const char* value);
  void set_app_id(const char* value, size_t size);
  std::string* mutable_app_id();
  std::string* release_app_id();
  void set_allocated_app_id(std::string* app_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_app_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_app_id(
      std::string* app_id);
  private:
  const std::string& _internal_app_id() const;
  void _internal_set_app_id(const std::string& value);
  std::string* _internal_mutable_app_id();
  public:

  // string app_secret = 2;
  void clear_app_secret();
  const std::string& app_secret() const;
  void set_app_secret(const std::string& value);
  void set_app_secret(std::string&& value);
  void set_app_secret(const char* value);
  void set_app_secret(const char* value, size_t size);
  std::string* mutable_app_secret();
  std::string* release_app_secret();
  void set_allocated_app_secret(std::string* app_secret);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_app_secret();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_app_secret(
      std::string* app_secret);
  private:
  const std::string& _internal_app_secret() const;
  void _internal_set_app_secret(const std::string& value);
  std::string* _internal_mutable_app_secret();
  public:

  // @@protoc_insertion_point(class_scope:appguard_commands.Authentication)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr app_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr app_secret_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_commands_2eproto;
};
// -------------------------------------------------------------------

class ClientMessage PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:appguard_commands.ClientMessage) */ {
 public:
  inline ClientMessage() : ClientMessage(nullptr) {};
  virtual ~ClientMessage();

  ClientMessage(const ClientMessage& from);
  ClientMessage(ClientMessage&& from) noexcept
    : ClientMessage() {
    *this = ::std::move(from);
  }

  inline ClientMessage& operator=(const ClientMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline ClientMessage& operator=(ClientMessage&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ClientMessage& default_instance();

  enum MessageCase {
    kAuthorizationRequest = 1,
    kAuthentication = 2,
    MESSAGE_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ClientMessage* internal_default_instance() {
    return reinterpret_cast<const ClientMessage*>(
               &_ClientMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ClientMessage& a, ClientMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(ClientMessage* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ClientMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ClientMessage* New() const final {
    return CreateMaybeMessage<ClientMessage>(nullptr);
  }

  ClientMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ClientMessage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ClientMessage& from);
  void MergeFrom(const ClientMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ClientMessage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "appguard_commands.ClientMessage";
  }
  protected:
  explicit ClientMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_commands_2eproto);
    return ::descriptor_table_commands_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAuthorizationRequestFieldNumber = 1,
    kAuthenticationFieldNumber = 2,
  };
  // .appguard_commands.AuthorizationRequest authorization_request = 1;
  bool has_authorization_request() const;
  private:
  bool _internal_has_authorization_request() const;
  public:
  void clear_authorization_request();
  const ::appguard_commands::AuthorizationRequest& authorization_request() const;
  ::appguard_commands::AuthorizationRequest* release_authorization_request();
  ::appguard_commands::AuthorizationRequest* mutable_authorization_request();
  void set_allocated_authorization_request(::appguard_commands::AuthorizationRequest* authorization_request);
  private:
  const ::appguard_commands::AuthorizationRequest& _internal_authorization_request() const;
  ::appguard_commands::AuthorizationRequest* _internal_mutable_authorization_request();
  public:
  void unsafe_arena_set_allocated_authorization_request(
      ::appguard_commands::AuthorizationRequest* authorization_request);
  ::appguard_commands::AuthorizationRequest* unsafe_arena_release_authorization_request();

  // .appguard_commands.Authentication authentication = 2;
  bool has_authentication() const;
  private:
  bool _internal_has_authentication() const;
  public:
  void clear_authentication();
  const ::appguard_commands::Authentication& authentication() const;
  ::appguard_commands::Authentication* release_authentication();
  ::appguard_commands::Authentication* mutable_authentication();
  void set_allocated_authentication(::appguard_commands::Authentication* authentication);
  private:
  const ::appguard_commands::Authentication& _internal_authentication() const;
  ::appguard_commands::Authentication* _internal_mutable_authentication();
  public:
  void unsafe_arena_set_allocated_authentication(
      ::appguard_commands::Authentication* authentication);
  ::appguard_commands::Authentication* unsafe_arena_release_authentication();

  void clear_message();
  MessageCase message_case() const;
  // @@protoc_insertion_point(class_scope:appguard_commands.ClientMessage)
 private:
  class _Internal;
  void set_has_authorization_request();
  void set_has_authentication();

  inline bool has_message() const;
  inline void clear_has_message();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  union MessageUnion {
    MessageUnion() {}
    ::appguard_commands::AuthorizationRequest* authorization_request_;
    ::appguard_commands::Authentication* authentication_;
  } message_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_commands_2eproto;
};
// -------------------------------------------------------------------

class AuthenticationData PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:appguard_commands.AuthenticationData) */ {
 public:
  inline AuthenticationData() : AuthenticationData(nullptr) {};
  virtual ~AuthenticationData();

  AuthenticationData(const AuthenticationData& from);
  AuthenticationData(AuthenticationData&& from) noexcept
    : AuthenticationData() {
    *this = ::std::move(from);
  }

  inline AuthenticationData& operator=(const AuthenticationData& from) {
    CopyFrom(from);
    return *this;
  }
  inline AuthenticationData& operator=(AuthenticationData&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AuthenticationData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AuthenticationData* internal_default_instance() {
    return reinterpret_cast<const AuthenticationData*>(
               &_AuthenticationData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(AuthenticationData& a, AuthenticationData& b) {
    a.Swap(&b);
  }
  inline void Swap(AuthenticationData* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AuthenticationData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AuthenticationData* New() const final {
    return CreateMaybeMessage<AuthenticationData>(nullptr);
  }

  AuthenticationData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AuthenticationData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AuthenticationData& from);
  void MergeFrom(const AuthenticationData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AuthenticationData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "appguard_commands.AuthenticationData";
  }
  protected:
  explicit AuthenticationData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_commands_2eproto);
    return ::descriptor_table_commands_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAppIdFieldNumber = 1,
    kAppSecretFieldNumber = 2,
  };
  // string app_id = 1;
  bool has_app_id() const;
  private:
  bool _internal_has_app_id() const;
  public:
  void clear_app_id();
  const std::string& app_id() const;
  void set_app_id(const std::string& value);
  void set_app_id(std::string&& value);
  void set_app_id(const char* value);
  void set_app_id(const char* value, size_t size);
  std::string* mutable_app_id();
  std::string* release_app_id();
  void set_allocated_app_id(std::string* app_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_app_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_app_id(
      std::string* app_id);
  private:
  const std::string& _internal_app_id() const;
  void _internal_set_app_id(const std::string& value);
  std::string* _internal_mutable_app_id();
  public:

  // string app_secret = 2;
  bool has_app_secret() const;
  private:
  bool _internal_has_app_secret() const;
  public:
  void clear_app_secret();
  const std::string& app_secret() const;
  void set_app_secret(const std::string& value);
  void set_app_secret(std::string&& value);
  void set_app_secret(const char* value);
  void set_app_secret(const char* value, size_t size);
  std::string* mutable_app_secret();
  std::string* release_app_secret();
  void set_allocated_app_secret(std::string* app_secret);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_app_secret();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_app_secret(
      std::string* app_secret);
  private:
  const std::string& _internal_app_secret() const;
  void _internal_set_app_secret(const std::string& value);
  std::string* _internal_mutable_app_secret();
  public:

  // @@protoc_insertion_point(class_scope:appguard_commands.AuthenticationData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr app_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr app_secret_;
  friend struct ::TableStruct_commands_2eproto;
};
// -------------------------------------------------------------------

class ServerMessage PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:appguard_commands.ServerMessage) */ {
 public:
  inline ServerMessage() : ServerMessage(nullptr) {};
  virtual ~ServerMessage();

  ServerMessage(const ServerMessage& from);
  ServerMessage(ServerMessage&& from) noexcept
    : ServerMessage() {
    *this = ::std::move(from);
  }

  inline ServerMessage& operator=(const ServerMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline ServerMessage& operator=(ServerMessage&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ServerMessage& default_instance();

  enum MessageCase {
    kUpdateTokenCommand = 1,
    kSetFirewallDefaults = 2,
    kHeartbeat = 3,
    kDeviceAuthorized = 4,
    kDeviceDeauthorized = 5,
    kAuthorizationRejected = 6,
    MESSAGE_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ServerMessage* internal_default_instance() {
    return reinterpret_cast<const ServerMessage*>(
               &_ServerMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(ServerMessage& a, ServerMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(ServerMessage* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ServerMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ServerMessage* New() const final {
    return CreateMaybeMessage<ServerMessage>(nullptr);
  }

  ServerMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ServerMessage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ServerMessage& from);
  void MergeFrom(const ServerMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ServerMessage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "appguard_commands.ServerMessage";
  }
  protected:
  explicit ServerMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_commands_2eproto);
    return ::descriptor_table_commands_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUpdateTokenCommandFieldNumber = 1,
    kSetFirewallDefaultsFieldNumber = 2,
    kHeartbeatFieldNumber = 3,
    kDeviceAuthorizedFieldNumber = 4,
    kDeviceDeauthorizedFieldNumber = 5,
    kAuthorizationRejectedFieldNumber = 6,
  };
  // string update_token_command = 1;
  private:
  bool _internal_has_update_token_command() const;
  public:
  void clear_update_token_command();
  const std::string& update_token_command() const;
  void set_update_token_command(const std::string& value);
  void set_update_token_command(std::string&& value);
  void set_update_token_command(const char* value);
  void set_update_token_command(const char* value, size_t size);
  std::string* mutable_update_token_command();
  std::string* release_update_token_command();
  void set_allocated_update_token_command(std::string* update_token_command);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_update_token_command();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_update_token_command(
      std::string* update_token_command);
  private:
  const std::string& _internal_update_token_command() const;
  void _internal_set_update_token_command(const std::string& value);
  std::string* _internal_mutable_update_token_command();
  public:

  // .appguard_commands.FirewallDefaults set_firewall_defaults = 2;
  bool has_set_firewall_defaults() const;
  private:
  bool _internal_has_set_firewall_defaults() const;
  public:
  void clear_set_firewall_defaults();
  const ::appguard_commands::FirewallDefaults& set_firewall_defaults() const;
  ::appguard_commands::FirewallDefaults* release_set_firewall_defaults();
  ::appguard_commands::FirewallDefaults* mutable_set_firewall_defaults();
  void set_allocated_set_firewall_defaults(::appguard_commands::FirewallDefaults* set_firewall_defaults);
  private:
  const ::appguard_commands::FirewallDefaults& _internal_set_firewall_defaults() const;
  ::appguard_commands::FirewallDefaults* _internal_mutable_set_firewall_defaults();
  public:
  void unsafe_arena_set_allocated_set_firewall_defaults(
      ::appguard_commands::FirewallDefaults* set_firewall_defaults);
  ::appguard_commands::FirewallDefaults* unsafe_arena_release_set_firewall_defaults();

  // .google.protobuf.Empty heartbeat = 3;
  bool has_heartbeat() const;
  private:
  bool _internal_has_heartbeat() const;
  public:
  void clear_heartbeat();
  const PROTOBUF_NAMESPACE_ID::Empty& heartbeat() const;
  PROTOBUF_NAMESPACE_ID::Empty* release_heartbeat();
  PROTOBUF_NAMESPACE_ID::Empty* mutable_heartbeat();
  void set_allocated_heartbeat(PROTOBUF_NAMESPACE_ID::Empty* heartbeat);
  private:
  const PROTOBUF_NAMESPACE_ID::Empty& _internal_heartbeat() const;
  PROTOBUF_NAMESPACE_ID::Empty* _internal_mutable_heartbeat();
  public:
  void unsafe_arena_set_allocated_heartbeat(
      PROTOBUF_NAMESPACE_ID::Empty* heartbeat);
  PROTOBUF_NAMESPACE_ID::Empty* unsafe_arena_release_heartbeat();

  // .appguard_commands.AuthenticationData device_authorized = 4;
  bool has_device_authorized() const;
  private:
  bool _internal_has_device_authorized() const;
  public:
  void clear_device_authorized();
  const ::appguard_commands::AuthenticationData& device_authorized() const;
  ::appguard_commands::AuthenticationData* release_device_authorized();
  ::appguard_commands::AuthenticationData* mutable_device_authorized();
  void set_allocated_device_authorized(::appguard_commands::AuthenticationData* device_authorized);
  private:
  const ::appguard_commands::AuthenticationData& _internal_device_authorized() const;
  ::appguard_commands::AuthenticationData* _internal_mutable_device_authorized();
  public:
  void unsafe_arena_set_allocated_device_authorized(
      ::appguard_commands::AuthenticationData* device_authorized);
  ::appguard_commands::AuthenticationData* unsafe_arena_release_device_authorized();

  // .google.protobuf.Empty device_deauthorized = 5;
  bool has_device_deauthorized() const;
  private:
  bool _internal_has_device_deauthorized() const;
  public:
  void clear_device_deauthorized();
  const PROTOBUF_NAMESPACE_ID::Empty& device_deauthorized() const;
  PROTOBUF_NAMESPACE_ID::Empty* release_device_deauthorized();
  PROTOBUF_NAMESPACE_ID::Empty* mutable_device_deauthorized();
  void set_allocated_device_deauthorized(PROTOBUF_NAMESPACE_ID::Empty* device_deauthorized);
  private:
  const PROTOBUF_NAMESPACE_ID::Empty& _internal_device_deauthorized() const;
  PROTOBUF_NAMESPACE_ID::Empty* _internal_mutable_device_deauthorized();
  public:
  void unsafe_arena_set_allocated_device_deauthorized(
      PROTOBUF_NAMESPACE_ID::Empty* device_deauthorized);
  PROTOBUF_NAMESPACE_ID::Empty* unsafe_arena_release_device_deauthorized();

  // .google.protobuf.Empty authorization_rejected = 6;
  bool has_authorization_rejected() const;
  private:
  bool _internal_has_authorization_rejected() const;
  public:
  void clear_authorization_rejected();
  const PROTOBUF_NAMESPACE_ID::Empty& authorization_rejected() const;
  PROTOBUF_NAMESPACE_ID::Empty* release_authorization_rejected();
  PROTOBUF_NAMESPACE_ID::Empty* mutable_authorization_rejected();
  void set_allocated_authorization_rejected(PROTOBUF_NAMESPACE_ID::Empty* authorization_rejected);
  private:
  const PROTOBUF_NAMESPACE_ID::Empty& _internal_authorization_rejected() const;
  PROTOBUF_NAMESPACE_ID::Empty* _internal_mutable_authorization_rejected();
  public:
  void unsafe_arena_set_allocated_authorization_rejected(
      PROTOBUF_NAMESPACE_ID::Empty* authorization_rejected);
  PROTOBUF_NAMESPACE_ID::Empty* unsafe_arena_release_authorization_rejected();

  void clear_message();
  MessageCase message_case() const;
  // @@protoc_insertion_point(class_scope:appguard_commands.ServerMessage)
 private:
  class _Internal;
  void set_has_update_token_command();
  void set_has_set_firewall_defaults();
  void set_has_heartbeat();
  void set_has_device_authorized();
  void set_has_device_deauthorized();
  void set_has_authorization_rejected();

  inline bool has_message() const;
  inline void clear_has_message();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  union MessageUnion {
    MessageUnion() {}
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr update_token_command_;
    ::appguard_commands::FirewallDefaults* set_firewall_defaults_;
    PROTOBUF_NAMESPACE_ID::Empty* heartbeat_;
    ::appguard_commands::AuthenticationData* device_authorized_;
    PROTOBUF_NAMESPACE_ID::Empty* device_deauthorized_;
    PROTOBUF_NAMESPACE_ID::Empty* authorization_rejected_;
  } message_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_commands_2eproto;
};
// -------------------------------------------------------------------

class FirewallDefaults PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:appguard_commands.FirewallDefaults) */ {
 public:
  inline FirewallDefaults() : FirewallDefaults(nullptr) {};
  virtual ~FirewallDefaults();

  FirewallDefaults(const FirewallDefaults& from);
  FirewallDefaults(FirewallDefaults&& from) noexcept
    : FirewallDefaults() {
    *this = ::std::move(from);
  }

  inline FirewallDefaults& operator=(const FirewallDefaults& from) {
    CopyFrom(from);
    return *this;
  }
  inline FirewallDefaults& operator=(FirewallDefaults&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FirewallDefaults& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FirewallDefaults* internal_default_instance() {
    return reinterpret_cast<const FirewallDefaults*>(
               &_FirewallDefaults_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(FirewallDefaults& a, FirewallDefaults& b) {
    a.Swap(&b);
  }
  inline void Swap(FirewallDefaults* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FirewallDefaults* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FirewallDefaults* New() const final {
    return CreateMaybeMessage<FirewallDefaults>(nullptr);
  }

  FirewallDefaults* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FirewallDefaults>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FirewallDefaults& from);
  void MergeFrom(const FirewallDefaults& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FirewallDefaults* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "appguard_commands.FirewallDefaults";
  }
  protected:
  explicit FirewallDefaults(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_commands_2eproto);
    return ::descriptor_table_commands_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTimeoutFieldNumber = 1,
    kPolicyFieldNumber = 2,
    kCacheFieldNumber = 3,
  };
  // uint32 timeout = 1;
  void clear_timeout();
  ::PROTOBUF_NAMESPACE_ID::uint32 timeout() const;
  void set_timeout(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_timeout() const;
  void _internal_set_timeout(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // .appguard_commands.FirewallPolicy policy = 2;
  void clear_policy();
  ::appguard_commands::FirewallPolicy policy() const;
  void set_policy(::appguard_commands::FirewallPolicy value);
  private:
  ::appguard_commands::FirewallPolicy _internal_policy() const;
  void _internal_set_policy(::appguard_commands::FirewallPolicy value);
  public:

  // bool cache = 3;
  void clear_cache();
  bool cache() const;
  void set_cache(bool value);
  private:
  bool _internal_cache() const;
  void _internal_set_cache(bool value);
  public:

  // @@protoc_insertion_point(class_scope:appguard_commands.FirewallDefaults)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint32 timeout_;
  int policy_;
  bool cache_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_commands_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// AuthorizationRequest

// string uuid = 1;
inline void AuthorizationRequest::clear_uuid() {
  uuid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& AuthorizationRequest::uuid() const {
  // @@protoc_insertion_point(field_get:appguard_commands.AuthorizationRequest.uuid)
  return _internal_uuid();
}
inline void AuthorizationRequest::set_uuid(const std::string& value) {
  _internal_set_uuid(value);
  // @@protoc_insertion_point(field_set:appguard_commands.AuthorizationRequest.uuid)
}
inline std::string* AuthorizationRequest::mutable_uuid() {
  // @@protoc_insertion_point(field_mutable:appguard_commands.AuthorizationRequest.uuid)
  return _internal_mutable_uuid();
}
inline const std::string& AuthorizationRequest::_internal_uuid() const {
  return uuid_.Get();
}
inline void AuthorizationRequest::_internal_set_uuid(const std::string& value) {
  
  uuid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void AuthorizationRequest::set_uuid(std::string&& value) {
  
  uuid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:appguard_commands.AuthorizationRequest.uuid)
}
inline void AuthorizationRequest::set_uuid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  uuid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:appguard_commands.AuthorizationRequest.uuid)
}
inline void AuthorizationRequest::set_uuid(const char* value,
    size_t size) {
  
  uuid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:appguard_commands.AuthorizationRequest.uuid)
}
inline std::string* AuthorizationRequest::_internal_mutable_uuid() {
  
  return uuid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* AuthorizationRequest::release_uuid() {
  // @@protoc_insertion_point(field_release:appguard_commands.AuthorizationRequest.uuid)
  return uuid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AuthorizationRequest::set_allocated_uuid(std::string* uuid) {
  if (uuid != nullptr) {
    
  } else {
    
  }
  uuid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), uuid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:appguard_commands.AuthorizationRequest.uuid)
}
inline std::string* AuthorizationRequest::unsafe_arena_release_uuid() {
  // @@protoc_insertion_point(field_unsafe_arena_release:appguard_commands.AuthorizationRequest.uuid)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return uuid_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void AuthorizationRequest::unsafe_arena_set_allocated_uuid(
    std::string* uuid) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (uuid != nullptr) {
    
  } else {
    
  }
  uuid_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      uuid, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:appguard_commands.AuthorizationRequest.uuid)
}

// string code = 2;
inline void AuthorizationRequest::clear_code() {
  code_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& AuthorizationRequest::code() const {
  // @@protoc_insertion_point(field_get:appguard_commands.AuthorizationRequest.code)
  return _internal_code();
}
inline void AuthorizationRequest::set_code(const std::string& value) {
  _internal_set_code(value);
  // @@protoc_insertion_point(field_set:appguard_commands.AuthorizationRequest.code)
}
inline std::string* AuthorizationRequest::mutable_code() {
  // @@protoc_insertion_point(field_mutable:appguard_commands.AuthorizationRequest.code)
  return _internal_mutable_code();
}
inline const std::string& AuthorizationRequest::_internal_code() const {
  return code_.Get();
}
inline void AuthorizationRequest::_internal_set_code(const std::string& value) {
  
  code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void AuthorizationRequest::set_code(std::string&& value) {
  
  code_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:appguard_commands.AuthorizationRequest.code)
}
inline void AuthorizationRequest::set_code(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:appguard_commands.AuthorizationRequest.code)
}
inline void AuthorizationRequest::set_code(const char* value,
    size_t size) {
  
  code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:appguard_commands.AuthorizationRequest.code)
}
inline std::string* AuthorizationRequest::_internal_mutable_code() {
  
  return code_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* AuthorizationRequest::release_code() {
  // @@protoc_insertion_point(field_release:appguard_commands.AuthorizationRequest.code)
  return code_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AuthorizationRequest::set_allocated_code(std::string* code) {
  if (code != nullptr) {
    
  } else {
    
  }
  code_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), code,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:appguard_commands.AuthorizationRequest.code)
}
inline std::string* AuthorizationRequest::unsafe_arena_release_code() {
  // @@protoc_insertion_point(field_unsafe_arena_release:appguard_commands.AuthorizationRequest.code)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return code_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void AuthorizationRequest::unsafe_arena_set_allocated_code(
    std::string* code) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (code != nullptr) {
    
  } else {
    
  }
  code_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      code, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:appguard_commands.AuthorizationRequest.code)
}

// string category = 3;
inline void AuthorizationRequest::clear_category() {
  category_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& AuthorizationRequest::category() const {
  // @@protoc_insertion_point(field_get:appguard_commands.AuthorizationRequest.category)
  return _internal_category();
}
inline void AuthorizationRequest::set_category(const std::string& value) {
  _internal_set_category(value);
  // @@protoc_insertion_point(field_set:appguard_commands.AuthorizationRequest.category)
}
inline std::string* AuthorizationRequest::mutable_category() {
  // @@protoc_insertion_point(field_mutable:appguard_commands.AuthorizationRequest.category)
  return _internal_mutable_category();
}
inline const std::string& AuthorizationRequest::_internal_category() const {
  return category_.Get();
}
inline void AuthorizationRequest::_internal_set_category(const std::string& value) {
  
  category_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void AuthorizationRequest::set_category(std::string&& value) {
  
  category_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:appguard_commands.AuthorizationRequest.category)
}
inline void AuthorizationRequest::set_category(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  category_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:appguard_commands.AuthorizationRequest.category)
}
inline void AuthorizationRequest::set_category(const char* value,
    size_t size) {
  
  category_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:appguard_commands.AuthorizationRequest.category)
}
inline std::string* AuthorizationRequest::_internal_mutable_category() {
  
  return category_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* AuthorizationRequest::release_category() {
  // @@protoc_insertion_point(field_release:appguard_commands.AuthorizationRequest.category)
  return category_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AuthorizationRequest::set_allocated_category(std::string* category) {
  if (category != nullptr) {
    
  } else {
    
  }
  category_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), category,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:appguard_commands.AuthorizationRequest.category)
}
inline std::string* AuthorizationRequest::unsafe_arena_release_category() {
  // @@protoc_insertion_point(field_unsafe_arena_release:appguard_commands.AuthorizationRequest.category)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return category_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void AuthorizationRequest::unsafe_arena_set_allocated_category(
    std::string* category) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (category != nullptr) {
    
  } else {
    
  }
  category_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      category, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:appguard_commands.AuthorizationRequest.category)
}

// string type = 4;
inline void AuthorizationRequest::clear_type() {
  type_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& AuthorizationRequest::type() const {
  // @@protoc_insertion_point(field_get:appguard_commands.AuthorizationRequest.type)
  return _internal_type();
}
inline void AuthorizationRequest::set_type(const std::string& value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:appguard_commands.AuthorizationRequest.type)
}
inline std::string* AuthorizationRequest::mutable_type() {
  // @@protoc_insertion_point(field_mutable:appguard_commands.AuthorizationRequest.type)
  return _internal_mutable_type();
}
inline const std::string& AuthorizationRequest::_internal_type() const {
  return type_.Get();
}
inline void AuthorizationRequest::_internal_set_type(const std::string& value) {
  
  type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void AuthorizationRequest::set_type(std::string&& value) {
  
  type_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:appguard_commands.AuthorizationRequest.type)
}
inline void AuthorizationRequest::set_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:appguard_commands.AuthorizationRequest.type)
}
inline void AuthorizationRequest::set_type(const char* value,
    size_t size) {
  
  type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:appguard_commands.AuthorizationRequest.type)
}
inline std::string* AuthorizationRequest::_internal_mutable_type() {
  
  return type_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* AuthorizationRequest::release_type() {
  // @@protoc_insertion_point(field_release:appguard_commands.AuthorizationRequest.type)
  return type_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AuthorizationRequest::set_allocated_type(std::string* type) {
  if (type != nullptr) {
    
  } else {
    
  }
  type_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), type,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:appguard_commands.AuthorizationRequest.type)
}
inline std::string* AuthorizationRequest::unsafe_arena_release_type() {
  // @@protoc_insertion_point(field_unsafe_arena_release:appguard_commands.AuthorizationRequest.type)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return type_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void AuthorizationRequest::unsafe_arena_set_allocated_type(
    std::string* type) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (type != nullptr) {
    
  } else {
    
  }
  type_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      type, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:appguard_commands.AuthorizationRequest.type)
}

// string target_os = 5;
inline void AuthorizationRequest::clear_target_os() {
  target_os_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& AuthorizationRequest::target_os() const {
  // @@protoc_insertion_point(field_get:appguard_commands.AuthorizationRequest.target_os)
  return _internal_target_os();
}
inline void AuthorizationRequest::set_target_os(const std::string& value) {
  _internal_set_target_os(value);
  // @@protoc_insertion_point(field_set:appguard_commands.AuthorizationRequest.target_os)
}
inline std::string* AuthorizationRequest::mutable_target_os() {
  // @@protoc_insertion_point(field_mutable:appguard_commands.AuthorizationRequest.target_os)
  return _internal_mutable_target_os();
}
inline const std::string& AuthorizationRequest::_internal_target_os() const {
  return target_os_.Get();
}
inline void AuthorizationRequest::_internal_set_target_os(const std::string& value) {
  
  target_os_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void AuthorizationRequest::set_target_os(std::string&& value) {
  
  target_os_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:appguard_commands.AuthorizationRequest.target_os)
}
inline void AuthorizationRequest::set_target_os(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  target_os_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:appguard_commands.AuthorizationRequest.target_os)
}
inline void AuthorizationRequest::set_target_os(const char* value,
    size_t size) {
  
  target_os_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:appguard_commands.AuthorizationRequest.target_os)
}
inline std::string* AuthorizationRequest::_internal_mutable_target_os() {
  
  return target_os_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* AuthorizationRequest::release_target_os() {
  // @@protoc_insertion_point(field_release:appguard_commands.AuthorizationRequest.target_os)
  return target_os_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AuthorizationRequest::set_allocated_target_os(std::string* target_os) {
  if (target_os != nullptr) {
    
  } else {
    
  }
  target_os_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), target_os,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:appguard_commands.AuthorizationRequest.target_os)
}
inline std::string* AuthorizationRequest::unsafe_arena_release_target_os() {
  // @@protoc_insertion_point(field_unsafe_arena_release:appguard_commands.AuthorizationRequest.target_os)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return target_os_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void AuthorizationRequest::unsafe_arena_set_allocated_target_os(
    std::string* target_os) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (target_os != nullptr) {
    
  } else {
    
  }
  target_os_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      target_os, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:appguard_commands.AuthorizationRequest.target_os)
}

// -------------------------------------------------------------------

// Authentication

// string app_id = 1;
inline void Authentication::clear_app_id() {
  app_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Authentication::app_id() const {
  // @@protoc_insertion_point(field_get:appguard_commands.Authentication.app_id)
  return _internal_app_id();
}
inline void Authentication::set_app_id(const std::string& value) {
  _internal_set_app_id(value);
  // @@protoc_insertion_point(field_set:appguard_commands.Authentication.app_id)
}
inline std::string* Authentication::mutable_app_id() {
  // @@protoc_insertion_point(field_mutable:appguard_commands.Authentication.app_id)
  return _internal_mutable_app_id();
}
inline const std::string& Authentication::_internal_app_id() const {
  return app_id_.Get();
}
inline void Authentication::_internal_set_app_id(const std::string& value) {
  
  app_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Authentication::set_app_id(std::string&& value) {
  
  app_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:appguard_commands.Authentication.app_id)
}
inline void Authentication::set_app_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  app_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:appguard_commands.Authentication.app_id)
}
inline void Authentication::set_app_id(const char* value,
    size_t size) {
  
  app_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:appguard_commands.Authentication.app_id)
}
inline std::string* Authentication::_internal_mutable_app_id() {
  
  return app_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Authentication::release_app_id() {
  // @@protoc_insertion_point(field_release:appguard_commands.Authentication.app_id)
  return app_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Authentication::set_allocated_app_id(std::string* app_id) {
  if (app_id != nullptr) {
    
  } else {
    
  }
  app_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), app_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:appguard_commands.Authentication.app_id)
}
inline std::string* Authentication::unsafe_arena_release_app_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:appguard_commands.Authentication.app_id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return app_id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Authentication::unsafe_arena_set_allocated_app_id(
    std::string* app_id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (app_id != nullptr) {
    
  } else {
    
  }
  app_id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      app_id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:appguard_commands.Authentication.app_id)
}

// string app_secret = 2;
inline void Authentication::clear_app_secret() {
  app_secret_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Authentication::app_secret() const {
  // @@protoc_insertion_point(field_get:appguard_commands.Authentication.app_secret)
  return _internal_app_secret();
}
inline void Authentication::set_app_secret(const std::string& value) {
  _internal_set_app_secret(value);
  // @@protoc_insertion_point(field_set:appguard_commands.Authentication.app_secret)
}
inline std::string* Authentication::mutable_app_secret() {
  // @@protoc_insertion_point(field_mutable:appguard_commands.Authentication.app_secret)
  return _internal_mutable_app_secret();
}
inline const std::string& Authentication::_internal_app_secret() const {
  return app_secret_.Get();
}
inline void Authentication::_internal_set_app_secret(const std::string& value) {
  
  app_secret_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Authentication::set_app_secret(std::string&& value) {
  
  app_secret_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:appguard_commands.Authentication.app_secret)
}
inline void Authentication::set_app_secret(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  app_secret_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:appguard_commands.Authentication.app_secret)
}
inline void Authentication::set_app_secret(const char* value,
    size_t size) {
  
  app_secret_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:appguard_commands.Authentication.app_secret)
}
inline std::string* Authentication::_internal_mutable_app_secret() {
  
  return app_secret_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Authentication::release_app_secret() {
  // @@protoc_insertion_point(field_release:appguard_commands.Authentication.app_secret)
  return app_secret_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Authentication::set_allocated_app_secret(std::string* app_secret) {
  if (app_secret != nullptr) {
    
  } else {
    
  }
  app_secret_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), app_secret,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:appguard_commands.Authentication.app_secret)
}
inline std::string* Authentication::unsafe_arena_release_app_secret() {
  // @@protoc_insertion_point(field_unsafe_arena_release:appguard_commands.Authentication.app_secret)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return app_secret_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Authentication::unsafe_arena_set_allocated_app_secret(
    std::string* app_secret) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (app_secret != nullptr) {
    
  } else {
    
  }
  app_secret_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      app_secret, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:appguard_commands.Authentication.app_secret)
}

// -------------------------------------------------------------------

// ClientMessage

// .appguard_commands.AuthorizationRequest authorization_request = 1;
inline bool ClientMessage::_internal_has_authorization_request() const {
  return message_case() == kAuthorizationRequest;
}
inline bool ClientMessage::has_authorization_request() const {
  return _internal_has_authorization_request();
}
inline void ClientMessage::set_has_authorization_request() {
  _oneof_case_[0] = kAuthorizationRequest;
}
inline void ClientMessage::clear_authorization_request() {
  if (_internal_has_authorization_request()) {
    if (GetArena() == nullptr) {
      delete message_.authorization_request_;
    }
    clear_has_message();
  }
}
inline ::appguard_commands::AuthorizationRequest* ClientMessage::release_authorization_request() {
  // @@protoc_insertion_point(field_release:appguard_commands.ClientMessage.authorization_request)
  if (_internal_has_authorization_request()) {
    clear_has_message();
      ::appguard_commands::AuthorizationRequest* temp = message_.authorization_request_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    message_.authorization_request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::appguard_commands::AuthorizationRequest& ClientMessage::_internal_authorization_request() const {
  return _internal_has_authorization_request()
      ? *message_.authorization_request_
      : *reinterpret_cast< ::appguard_commands::AuthorizationRequest*>(&::appguard_commands::_AuthorizationRequest_default_instance_);
}
inline const ::appguard_commands::AuthorizationRequest& ClientMessage::authorization_request() const {
  // @@protoc_insertion_point(field_get:appguard_commands.ClientMessage.authorization_request)
  return _internal_authorization_request();
}
inline ::appguard_commands::AuthorizationRequest* ClientMessage::unsafe_arena_release_authorization_request() {
  // @@protoc_insertion_point(field_unsafe_arena_release:appguard_commands.ClientMessage.authorization_request)
  if (_internal_has_authorization_request()) {
    clear_has_message();
    ::appguard_commands::AuthorizationRequest* temp = message_.authorization_request_;
    message_.authorization_request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ClientMessage::unsafe_arena_set_allocated_authorization_request(::appguard_commands::AuthorizationRequest* authorization_request) {
  clear_message();
  if (authorization_request) {
    set_has_authorization_request();
    message_.authorization_request_ = authorization_request;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:appguard_commands.ClientMessage.authorization_request)
}
inline ::appguard_commands::AuthorizationRequest* ClientMessage::_internal_mutable_authorization_request() {
  if (!_internal_has_authorization_request()) {
    clear_message();
    set_has_authorization_request();
    message_.authorization_request_ = CreateMaybeMessage< ::appguard_commands::AuthorizationRequest >(GetArena());
  }
  return message_.authorization_request_;
}
inline ::appguard_commands::AuthorizationRequest* ClientMessage::mutable_authorization_request() {
  // @@protoc_insertion_point(field_mutable:appguard_commands.ClientMessage.authorization_request)
  return _internal_mutable_authorization_request();
}

// .appguard_commands.Authentication authentication = 2;
inline bool ClientMessage::_internal_has_authentication() const {
  return message_case() == kAuthentication;
}
inline bool ClientMessage::has_authentication() const {
  return _internal_has_authentication();
}
inline void ClientMessage::set_has_authentication() {
  _oneof_case_[0] = kAuthentication;
}
inline void ClientMessage::clear_authentication() {
  if (_internal_has_authentication()) {
    if (GetArena() == nullptr) {
      delete message_.authentication_;
    }
    clear_has_message();
  }
}
inline ::appguard_commands::Authentication* ClientMessage::release_authentication() {
  // @@protoc_insertion_point(field_release:appguard_commands.ClientMessage.authentication)
  if (_internal_has_authentication()) {
    clear_has_message();
      ::appguard_commands::Authentication* temp = message_.authentication_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    message_.authentication_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::appguard_commands::Authentication& ClientMessage::_internal_authentication() const {
  return _internal_has_authentication()
      ? *message_.authentication_
      : *reinterpret_cast< ::appguard_commands::Authentication*>(&::appguard_commands::_Authentication_default_instance_);
}
inline const ::appguard_commands::Authentication& ClientMessage::authentication() const {
  // @@protoc_insertion_point(field_get:appguard_commands.ClientMessage.authentication)
  return _internal_authentication();
}
inline ::appguard_commands::Authentication* ClientMessage::unsafe_arena_release_authentication() {
  // @@protoc_insertion_point(field_unsafe_arena_release:appguard_commands.ClientMessage.authentication)
  if (_internal_has_authentication()) {
    clear_has_message();
    ::appguard_commands::Authentication* temp = message_.authentication_;
    message_.authentication_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ClientMessage::unsafe_arena_set_allocated_authentication(::appguard_commands::Authentication* authentication) {
  clear_message();
  if (authentication) {
    set_has_authentication();
    message_.authentication_ = authentication;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:appguard_commands.ClientMessage.authentication)
}
inline ::appguard_commands::Authentication* ClientMessage::_internal_mutable_authentication() {
  if (!_internal_has_authentication()) {
    clear_message();
    set_has_authentication();
    message_.authentication_ = CreateMaybeMessage< ::appguard_commands::Authentication >(GetArena());
  }
  return message_.authentication_;
}
inline ::appguard_commands::Authentication* ClientMessage::mutable_authentication() {
  // @@protoc_insertion_point(field_mutable:appguard_commands.ClientMessage.authentication)
  return _internal_mutable_authentication();
}

inline bool ClientMessage::has_message() const {
  return message_case() != MESSAGE_NOT_SET;
}
inline void ClientMessage::clear_has_message() {
  _oneof_case_[0] = MESSAGE_NOT_SET;
}
inline ClientMessage::MessageCase ClientMessage::message_case() const {
  return ClientMessage::MessageCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// AuthenticationData

// string app_id = 1;
inline bool AuthenticationData::_internal_has_app_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool AuthenticationData::has_app_id() const {
  return _internal_has_app_id();
}
inline void AuthenticationData::clear_app_id() {
  app_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& AuthenticationData::app_id() const {
  // @@protoc_insertion_point(field_get:appguard_commands.AuthenticationData.app_id)
  return _internal_app_id();
}
inline void AuthenticationData::set_app_id(const std::string& value) {
  _internal_set_app_id(value);
  // @@protoc_insertion_point(field_set:appguard_commands.AuthenticationData.app_id)
}
inline std::string* AuthenticationData::mutable_app_id() {
  // @@protoc_insertion_point(field_mutable:appguard_commands.AuthenticationData.app_id)
  return _internal_mutable_app_id();
}
inline const std::string& AuthenticationData::_internal_app_id() const {
  return app_id_.Get();
}
inline void AuthenticationData::_internal_set_app_id(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  app_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void AuthenticationData::set_app_id(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  app_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:appguard_commands.AuthenticationData.app_id)
}
inline void AuthenticationData::set_app_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  app_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:appguard_commands.AuthenticationData.app_id)
}
inline void AuthenticationData::set_app_id(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  app_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:appguard_commands.AuthenticationData.app_id)
}
inline std::string* AuthenticationData::_internal_mutable_app_id() {
  _has_bits_[0] |= 0x00000001u;
  return app_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* AuthenticationData::release_app_id() {
  // @@protoc_insertion_point(field_release:appguard_commands.AuthenticationData.app_id)
  if (!_internal_has_app_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return app_id_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AuthenticationData::set_allocated_app_id(std::string* app_id) {
  if (app_id != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  app_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), app_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:appguard_commands.AuthenticationData.app_id)
}
inline std::string* AuthenticationData::unsafe_arena_release_app_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:appguard_commands.AuthenticationData.app_id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000001u;
  return app_id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void AuthenticationData::unsafe_arena_set_allocated_app_id(
    std::string* app_id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (app_id != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  app_id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      app_id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:appguard_commands.AuthenticationData.app_id)
}

// string app_secret = 2;
inline bool AuthenticationData::_internal_has_app_secret() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool AuthenticationData::has_app_secret() const {
  return _internal_has_app_secret();
}
inline void AuthenticationData::clear_app_secret() {
  app_secret_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& AuthenticationData::app_secret() const {
  // @@protoc_insertion_point(field_get:appguard_commands.AuthenticationData.app_secret)
  return _internal_app_secret();
}
inline void AuthenticationData::set_app_secret(const std::string& value) {
  _internal_set_app_secret(value);
  // @@protoc_insertion_point(field_set:appguard_commands.AuthenticationData.app_secret)
}
inline std::string* AuthenticationData::mutable_app_secret() {
  // @@protoc_insertion_point(field_mutable:appguard_commands.AuthenticationData.app_secret)
  return _internal_mutable_app_secret();
}
inline const std::string& AuthenticationData::_internal_app_secret() const {
  return app_secret_.Get();
}
inline void AuthenticationData::_internal_set_app_secret(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  app_secret_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void AuthenticationData::set_app_secret(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  app_secret_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:appguard_commands.AuthenticationData.app_secret)
}
inline void AuthenticationData::set_app_secret(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  app_secret_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:appguard_commands.AuthenticationData.app_secret)
}
inline void AuthenticationData::set_app_secret(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  app_secret_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:appguard_commands.AuthenticationData.app_secret)
}
inline std::string* AuthenticationData::_internal_mutable_app_secret() {
  _has_bits_[0] |= 0x00000002u;
  return app_secret_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* AuthenticationData::release_app_secret() {
  // @@protoc_insertion_point(field_release:appguard_commands.AuthenticationData.app_secret)
  if (!_internal_has_app_secret()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return app_secret_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AuthenticationData::set_allocated_app_secret(std::string* app_secret) {
  if (app_secret != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  app_secret_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), app_secret,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:appguard_commands.AuthenticationData.app_secret)
}
inline std::string* AuthenticationData::unsafe_arena_release_app_secret() {
  // @@protoc_insertion_point(field_unsafe_arena_release:appguard_commands.AuthenticationData.app_secret)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000002u;
  return app_secret_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void AuthenticationData::unsafe_arena_set_allocated_app_secret(
    std::string* app_secret) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (app_secret != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  app_secret_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      app_secret, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:appguard_commands.AuthenticationData.app_secret)
}

// -------------------------------------------------------------------

// ServerMessage

// string update_token_command = 1;
inline bool ServerMessage::_internal_has_update_token_command() const {
  return message_case() == kUpdateTokenCommand;
}
inline void ServerMessage::set_has_update_token_command() {
  _oneof_case_[0] = kUpdateTokenCommand;
}
inline void ServerMessage::clear_update_token_command() {
  if (_internal_has_update_token_command()) {
    message_.update_token_command_.Destroy(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
    clear_has_message();
  }
}
inline const std::string& ServerMessage::update_token_command() const {
  // @@protoc_insertion_point(field_get:appguard_commands.ServerMessage.update_token_command)
  return _internal_update_token_command();
}
inline void ServerMessage::set_update_token_command(const std::string& value) {
  _internal_set_update_token_command(value);
  // @@protoc_insertion_point(field_set:appguard_commands.ServerMessage.update_token_command)
}
inline std::string* ServerMessage::mutable_update_token_command() {
  // @@protoc_insertion_point(field_mutable:appguard_commands.ServerMessage.update_token_command)
  return _internal_mutable_update_token_command();
}
inline const std::string& ServerMessage::_internal_update_token_command() const {
  if (_internal_has_update_token_command()) {
    return message_.update_token_command_.Get();
  }
  return *&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void ServerMessage::_internal_set_update_token_command(const std::string& value) {
  if (!_internal_has_update_token_command()) {
    clear_message();
    set_has_update_token_command();
    message_.update_token_command_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  message_.update_token_command_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ServerMessage::set_update_token_command(std::string&& value) {
  // @@protoc_insertion_point(field_set:appguard_commands.ServerMessage.update_token_command)
  if (!_internal_has_update_token_command()) {
    clear_message();
    set_has_update_token_command();
    message_.update_token_command_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  message_.update_token_command_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:appguard_commands.ServerMessage.update_token_command)
}
inline void ServerMessage::set_update_token_command(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  if (!_internal_has_update_token_command()) {
    clear_message();
    set_has_update_token_command();
    message_.update_token_command_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  message_.update_token_command_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:appguard_commands.ServerMessage.update_token_command)
}
inline void ServerMessage::set_update_token_command(const char* value,
                             size_t size) {
  if (!_internal_has_update_token_command()) {
    clear_message();
    set_has_update_token_command();
    message_.update_token_command_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  message_.update_token_command_.Set(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size),
      GetArena());
  // @@protoc_insertion_point(field_set_pointer:appguard_commands.ServerMessage.update_token_command)
}
inline std::string* ServerMessage::_internal_mutable_update_token_command() {
  if (!_internal_has_update_token_command()) {
    clear_message();
    set_has_update_token_command();
    message_.update_token_command_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return message_.update_token_command_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ServerMessage::release_update_token_command() {
  // @@protoc_insertion_point(field_release:appguard_commands.ServerMessage.update_token_command)
  if (_internal_has_update_token_command()) {
    clear_has_message();
    return message_.update_token_command_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  } else {
    return nullptr;
  }
}
inline void ServerMessage::set_allocated_update_token_command(std::string* update_token_command) {
  if (has_message()) {
    clear_message();
  }
  if (update_token_command != nullptr) {
    set_has_update_token_command();
    message_.update_token_command_.UnsafeSetDefault(update_token_command);
  }
  // @@protoc_insertion_point(field_set_allocated:appguard_commands.ServerMessage.update_token_command)
}
inline std::string* ServerMessage::unsafe_arena_release_update_token_command() {
  // @@protoc_insertion_point(field_unsafe_arena_release:appguard_commands.ServerMessage.update_token_command)
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (_internal_has_update_token_command()) {
    clear_has_message();
    return message_.update_token_command_.UnsafeArenaRelease(
        &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  } else {
    return nullptr;
  }
}
inline void ServerMessage::unsafe_arena_set_allocated_update_token_command(std::string* update_token_command) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (!_internal_has_update_token_command()) {
    message_.update_token_command_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  clear_message();
  if (update_token_command) {
    set_has_update_token_command();
    message_.update_token_command_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), update_token_command, GetArena());
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:appguard_commands.ServerMessage.update_token_command)
}

// .appguard_commands.FirewallDefaults set_firewall_defaults = 2;
inline bool ServerMessage::_internal_has_set_firewall_defaults() const {
  return message_case() == kSetFirewallDefaults;
}
inline bool ServerMessage::has_set_firewall_defaults() const {
  return _internal_has_set_firewall_defaults();
}
inline void ServerMessage::set_has_set_firewall_defaults() {
  _oneof_case_[0] = kSetFirewallDefaults;
}
inline void ServerMessage::clear_set_firewall_defaults() {
  if (_internal_has_set_firewall_defaults()) {
    if (GetArena() == nullptr) {
      delete message_.set_firewall_defaults_;
    }
    clear_has_message();
  }
}
inline ::appguard_commands::FirewallDefaults* ServerMessage::release_set_firewall_defaults() {
  // @@protoc_insertion_point(field_release:appguard_commands.ServerMessage.set_firewall_defaults)
  if (_internal_has_set_firewall_defaults()) {
    clear_has_message();
      ::appguard_commands::FirewallDefaults* temp = message_.set_firewall_defaults_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    message_.set_firewall_defaults_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::appguard_commands::FirewallDefaults& ServerMessage::_internal_set_firewall_defaults() const {
  return _internal_has_set_firewall_defaults()
      ? *message_.set_firewall_defaults_
      : *reinterpret_cast< ::appguard_commands::FirewallDefaults*>(&::appguard_commands::_FirewallDefaults_default_instance_);
}
inline const ::appguard_commands::FirewallDefaults& ServerMessage::set_firewall_defaults() const {
  // @@protoc_insertion_point(field_get:appguard_commands.ServerMessage.set_firewall_defaults)
  return _internal_set_firewall_defaults();
}
inline ::appguard_commands::FirewallDefaults* ServerMessage::unsafe_arena_release_set_firewall_defaults() {
  // @@protoc_insertion_point(field_unsafe_arena_release:appguard_commands.ServerMessage.set_firewall_defaults)
  if (_internal_has_set_firewall_defaults()) {
    clear_has_message();
    ::appguard_commands::FirewallDefaults* temp = message_.set_firewall_defaults_;
    message_.set_firewall_defaults_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ServerMessage::unsafe_arena_set_allocated_set_firewall_defaults(::appguard_commands::FirewallDefaults* set_firewall_defaults) {
  clear_message();
  if (set_firewall_defaults) {
    set_has_set_firewall_defaults();
    message_.set_firewall_defaults_ = set_firewall_defaults;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:appguard_commands.ServerMessage.set_firewall_defaults)
}
inline ::appguard_commands::FirewallDefaults* ServerMessage::_internal_mutable_set_firewall_defaults() {
  if (!_internal_has_set_firewall_defaults()) {
    clear_message();
    set_has_set_firewall_defaults();
    message_.set_firewall_defaults_ = CreateMaybeMessage< ::appguard_commands::FirewallDefaults >(GetArena());
  }
  return message_.set_firewall_defaults_;
}
inline ::appguard_commands::FirewallDefaults* ServerMessage::mutable_set_firewall_defaults() {
  // @@protoc_insertion_point(field_mutable:appguard_commands.ServerMessage.set_firewall_defaults)
  return _internal_mutable_set_firewall_defaults();
}

// .google.protobuf.Empty heartbeat = 3;
inline bool ServerMessage::_internal_has_heartbeat() const {
  return message_case() == kHeartbeat;
}
inline bool ServerMessage::has_heartbeat() const {
  return _internal_has_heartbeat();
}
inline void ServerMessage::set_has_heartbeat() {
  _oneof_case_[0] = kHeartbeat;
}
inline PROTOBUF_NAMESPACE_ID::Empty* ServerMessage::release_heartbeat() {
  // @@protoc_insertion_point(field_release:appguard_commands.ServerMessage.heartbeat)
  if (_internal_has_heartbeat()) {
    clear_has_message();
      PROTOBUF_NAMESPACE_ID::Empty* temp = message_.heartbeat_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    message_.heartbeat_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const PROTOBUF_NAMESPACE_ID::Empty& ServerMessage::_internal_heartbeat() const {
  return _internal_has_heartbeat()
      ? *message_.heartbeat_
      : *reinterpret_cast< PROTOBUF_NAMESPACE_ID::Empty*>(&PROTOBUF_NAMESPACE_ID::_Empty_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Empty& ServerMessage::heartbeat() const {
  // @@protoc_insertion_point(field_get:appguard_commands.ServerMessage.heartbeat)
  return _internal_heartbeat();
}
inline PROTOBUF_NAMESPACE_ID::Empty* ServerMessage::unsafe_arena_release_heartbeat() {
  // @@protoc_insertion_point(field_unsafe_arena_release:appguard_commands.ServerMessage.heartbeat)
  if (_internal_has_heartbeat()) {
    clear_has_message();
    PROTOBUF_NAMESPACE_ID::Empty* temp = message_.heartbeat_;
    message_.heartbeat_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ServerMessage::unsafe_arena_set_allocated_heartbeat(PROTOBUF_NAMESPACE_ID::Empty* heartbeat) {
  clear_message();
  if (heartbeat) {
    set_has_heartbeat();
    message_.heartbeat_ = heartbeat;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:appguard_commands.ServerMessage.heartbeat)
}
inline PROTOBUF_NAMESPACE_ID::Empty* ServerMessage::_internal_mutable_heartbeat() {
  if (!_internal_has_heartbeat()) {
    clear_message();
    set_has_heartbeat();
    message_.heartbeat_ = CreateMaybeMessage< PROTOBUF_NAMESPACE_ID::Empty >(GetArena());
  }
  return message_.heartbeat_;
}
inline PROTOBUF_NAMESPACE_ID::Empty* ServerMessage::mutable_heartbeat() {
  // @@protoc_insertion_point(field_mutable:appguard_commands.ServerMessage.heartbeat)
  return _internal_mutable_heartbeat();
}

// .appguard_commands.AuthenticationData device_authorized = 4;
inline bool ServerMessage::_internal_has_device_authorized() const {
  return message_case() == kDeviceAuthorized;
}
inline bool ServerMessage::has_device_authorized() const {
  return _internal_has_device_authorized();
}
inline void ServerMessage::set_has_device_authorized() {
  _oneof_case_[0] = kDeviceAuthorized;
}
inline void ServerMessage::clear_device_authorized() {
  if (_internal_has_device_authorized()) {
    if (GetArena() == nullptr) {
      delete message_.device_authorized_;
    }
    clear_has_message();
  }
}
inline ::appguard_commands::AuthenticationData* ServerMessage::release_device_authorized() {
  // @@protoc_insertion_point(field_release:appguard_commands.ServerMessage.device_authorized)
  if (_internal_has_device_authorized()) {
    clear_has_message();
      ::appguard_commands::AuthenticationData* temp = message_.device_authorized_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    message_.device_authorized_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::appguard_commands::AuthenticationData& ServerMessage::_internal_device_authorized() const {
  return _internal_has_device_authorized()
      ? *message_.device_authorized_
      : *reinterpret_cast< ::appguard_commands::AuthenticationData*>(&::appguard_commands::_AuthenticationData_default_instance_);
}
inline const ::appguard_commands::AuthenticationData& ServerMessage::device_authorized() const {
  // @@protoc_insertion_point(field_get:appguard_commands.ServerMessage.device_authorized)
  return _internal_device_authorized();
}
inline ::appguard_commands::AuthenticationData* ServerMessage::unsafe_arena_release_device_authorized() {
  // @@protoc_insertion_point(field_unsafe_arena_release:appguard_commands.ServerMessage.device_authorized)
  if (_internal_has_device_authorized()) {
    clear_has_message();
    ::appguard_commands::AuthenticationData* temp = message_.device_authorized_;
    message_.device_authorized_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ServerMessage::unsafe_arena_set_allocated_device_authorized(::appguard_commands::AuthenticationData* device_authorized) {
  clear_message();
  if (device_authorized) {
    set_has_device_authorized();
    message_.device_authorized_ = device_authorized;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:appguard_commands.ServerMessage.device_authorized)
}
inline ::appguard_commands::AuthenticationData* ServerMessage::_internal_mutable_device_authorized() {
  if (!_internal_has_device_authorized()) {
    clear_message();
    set_has_device_authorized();
    message_.device_authorized_ = CreateMaybeMessage< ::appguard_commands::AuthenticationData >(GetArena());
  }
  return message_.device_authorized_;
}
inline ::appguard_commands::AuthenticationData* ServerMessage::mutable_device_authorized() {
  // @@protoc_insertion_point(field_mutable:appguard_commands.ServerMessage.device_authorized)
  return _internal_mutable_device_authorized();
}

// .google.protobuf.Empty device_deauthorized = 5;
inline bool ServerMessage::_internal_has_device_deauthorized() const {
  return message_case() == kDeviceDeauthorized;
}
inline bool ServerMessage::has_device_deauthorized() const {
  return _internal_has_device_deauthorized();
}
inline void ServerMessage::set_has_device_deauthorized() {
  _oneof_case_[0] = kDeviceDeauthorized;
}
inline PROTOBUF_NAMESPACE_ID::Empty* ServerMessage::release_device_deauthorized() {
  // @@protoc_insertion_point(field_release:appguard_commands.ServerMessage.device_deauthorized)
  if (_internal_has_device_deauthorized()) {
    clear_has_message();
      PROTOBUF_NAMESPACE_ID::Empty* temp = message_.device_deauthorized_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    message_.device_deauthorized_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const PROTOBUF_NAMESPACE_ID::Empty& ServerMessage::_internal_device_deauthorized() const {
  return _internal_has_device_deauthorized()
      ? *message_.device_deauthorized_
      : *reinterpret_cast< PROTOBUF_NAMESPACE_ID::Empty*>(&PROTOBUF_NAMESPACE_ID::_Empty_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Empty& ServerMessage::device_deauthorized() const {
  // @@protoc_insertion_point(field_get:appguard_commands.ServerMessage.device_deauthorized)
  return _internal_device_deauthorized();
}
inline PROTOBUF_NAMESPACE_ID::Empty* ServerMessage::unsafe_arena_release_device_deauthorized() {
  // @@protoc_insertion_point(field_unsafe_arena_release:appguard_commands.ServerMessage.device_deauthorized)
  if (_internal_has_device_deauthorized()) {
    clear_has_message();
    PROTOBUF_NAMESPACE_ID::Empty* temp = message_.device_deauthorized_;
    message_.device_deauthorized_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ServerMessage::unsafe_arena_set_allocated_device_deauthorized(PROTOBUF_NAMESPACE_ID::Empty* device_deauthorized) {
  clear_message();
  if (device_deauthorized) {
    set_has_device_deauthorized();
    message_.device_deauthorized_ = device_deauthorized;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:appguard_commands.ServerMessage.device_deauthorized)
}
inline PROTOBUF_NAMESPACE_ID::Empty* ServerMessage::_internal_mutable_device_deauthorized() {
  if (!_internal_has_device_deauthorized()) {
    clear_message();
    set_has_device_deauthorized();
    message_.device_deauthorized_ = CreateMaybeMessage< PROTOBUF_NAMESPACE_ID::Empty >(GetArena());
  }
  return message_.device_deauthorized_;
}
inline PROTOBUF_NAMESPACE_ID::Empty* ServerMessage::mutable_device_deauthorized() {
  // @@protoc_insertion_point(field_mutable:appguard_commands.ServerMessage.device_deauthorized)
  return _internal_mutable_device_deauthorized();
}

// .google.protobuf.Empty authorization_rejected = 6;
inline bool ServerMessage::_internal_has_authorization_rejected() const {
  return message_case() == kAuthorizationRejected;
}
inline bool ServerMessage::has_authorization_rejected() const {
  return _internal_has_authorization_rejected();
}
inline void ServerMessage::set_has_authorization_rejected() {
  _oneof_case_[0] = kAuthorizationRejected;
}
inline PROTOBUF_NAMESPACE_ID::Empty* ServerMessage::release_authorization_rejected() {
  // @@protoc_insertion_point(field_release:appguard_commands.ServerMessage.authorization_rejected)
  if (_internal_has_authorization_rejected()) {
    clear_has_message();
      PROTOBUF_NAMESPACE_ID::Empty* temp = message_.authorization_rejected_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    message_.authorization_rejected_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const PROTOBUF_NAMESPACE_ID::Empty& ServerMessage::_internal_authorization_rejected() const {
  return _internal_has_authorization_rejected()
      ? *message_.authorization_rejected_
      : *reinterpret_cast< PROTOBUF_NAMESPACE_ID::Empty*>(&PROTOBUF_NAMESPACE_ID::_Empty_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Empty& ServerMessage::authorization_rejected() const {
  // @@protoc_insertion_point(field_get:appguard_commands.ServerMessage.authorization_rejected)
  return _internal_authorization_rejected();
}
inline PROTOBUF_NAMESPACE_ID::Empty* ServerMessage::unsafe_arena_release_authorization_rejected() {
  // @@protoc_insertion_point(field_unsafe_arena_release:appguard_commands.ServerMessage.authorization_rejected)
  if (_internal_has_authorization_rejected()) {
    clear_has_message();
    PROTOBUF_NAMESPACE_ID::Empty* temp = message_.authorization_rejected_;
    message_.authorization_rejected_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ServerMessage::unsafe_arena_set_allocated_authorization_rejected(PROTOBUF_NAMESPACE_ID::Empty* authorization_rejected) {
  clear_message();
  if (authorization_rejected) {
    set_has_authorization_rejected();
    message_.authorization_rejected_ = authorization_rejected;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:appguard_commands.ServerMessage.authorization_rejected)
}
inline PROTOBUF_NAMESPACE_ID::Empty* ServerMessage::_internal_mutable_authorization_rejected() {
  if (!_internal_has_authorization_rejected()) {
    clear_message();
    set_has_authorization_rejected();
    message_.authorization_rejected_ = CreateMaybeMessage< PROTOBUF_NAMESPACE_ID::Empty >(GetArena());
  }
  return message_.authorization_rejected_;
}
inline PROTOBUF_NAMESPACE_ID::Empty* ServerMessage::mutable_authorization_rejected() {
  // @@protoc_insertion_point(field_mutable:appguard_commands.ServerMessage.authorization_rejected)
  return _internal_mutable_authorization_rejected();
}

inline bool ServerMessage::has_message() const {
  return message_case() != MESSAGE_NOT_SET;
}
inline void ServerMessage::clear_has_message() {
  _oneof_case_[0] = MESSAGE_NOT_SET;
}
inline ServerMessage::MessageCase ServerMessage::message_case() const {
  return ServerMessage::MessageCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// FirewallDefaults

// uint32 timeout = 1;
inline void FirewallDefaults::clear_timeout() {
  timeout_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FirewallDefaults::_internal_timeout() const {
  return timeout_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FirewallDefaults::timeout() const {
  // @@protoc_insertion_point(field_get:appguard_commands.FirewallDefaults.timeout)
  return _internal_timeout();
}
inline void FirewallDefaults::_internal_set_timeout(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  timeout_ = value;
}
inline void FirewallDefaults::set_timeout(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_timeout(value);
  // @@protoc_insertion_point(field_set:appguard_commands.FirewallDefaults.timeout)
}

// .appguard_commands.FirewallPolicy policy = 2;
inline void FirewallDefaults::clear_policy() {
  policy_ = 0;
}
inline ::appguard_commands::FirewallPolicy FirewallDefaults::_internal_policy() const {
  return static_cast< ::appguard_commands::FirewallPolicy >(policy_);
}
inline ::appguard_commands::FirewallPolicy FirewallDefaults::policy() const {
  // @@protoc_insertion_point(field_get:appguard_commands.FirewallDefaults.policy)
  return _internal_policy();
}
inline void FirewallDefaults::_internal_set_policy(::appguard_commands::FirewallPolicy value) {
  
  policy_ = value;
}
inline void FirewallDefaults::set_policy(::appguard_commands::FirewallPolicy value) {
  _internal_set_policy(value);
  // @@protoc_insertion_point(field_set:appguard_commands.FirewallDefaults.policy)
}

// bool cache = 3;
inline void FirewallDefaults::clear_cache() {
  cache_ = false;
}
inline bool FirewallDefaults::_internal_cache() const {
  return cache_;
}
inline bool FirewallDefaults::cache() const {
  // @@protoc_insertion_point(field_get:appguard_commands.FirewallDefaults.cache)
  return _internal_cache();
}
inline void FirewallDefaults::_internal_set_cache(bool value) {
  
  cache_ = value;
}
inline void FirewallDefaults::set_cache(bool value) {
  _internal_set_cache(value);
  // @@protoc_insertion_point(field_set:appguard_commands.FirewallDefaults.cache)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace appguard_commands

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::appguard_commands::FirewallPolicy> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::appguard_commands::FirewallPolicy>() {
  return ::appguard_commands::FirewallPolicy_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_commands_2eproto
