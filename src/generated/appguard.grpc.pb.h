// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: appguard.proto
#ifndef GRPC_appguard_2eproto__INCLUDED
#define GRPC_appguard_2eproto__INCLUDED

#include "appguard.pb.h"

#include <functional>
#include <grpc/impl/codegen/port_platform.h>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace appguard {

class AppGuard final {
 public:
  static constexpr char const* service_full_name() {
    return "appguard.AppGuard";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // Control channel
    std::unique_ptr< ::grpc::ClientReaderWriterInterface< ::appguard_commands::ClientMessage, ::appguard_commands::ServerMessage>> ControlChannel(::grpc::ClientContext* context) {
      return std::unique_ptr< ::grpc::ClientReaderWriterInterface< ::appguard_commands::ClientMessage, ::appguard_commands::ServerMessage>>(ControlChannelRaw(context));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::appguard_commands::ClientMessage, ::appguard_commands::ServerMessage>> AsyncControlChannel(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::appguard_commands::ClientMessage, ::appguard_commands::ServerMessage>>(AsyncControlChannelRaw(context, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::appguard_commands::ClientMessage, ::appguard_commands::ServerMessage>> PrepareAsyncControlChannel(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::appguard_commands::ClientMessage, ::appguard_commands::ServerMessage>>(PrepareAsyncControlChannelRaw(context, cq));
    }
    // Logs
    virtual ::grpc::Status HandleLogs(::grpc::ClientContext* context, const ::appguard::Logs& request, ::google::protobuf::Empty* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> AsyncHandleLogs(::grpc::ClientContext* context, const ::appguard::Logs& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(AsyncHandleLogsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> PrepareAsyncHandleLogs(::grpc::ClientContext* context, const ::appguard::Logs& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(PrepareAsyncHandleLogsRaw(context, request, cq));
    }
    // TCP
    virtual ::grpc::Status HandleTcpConnection(::grpc::ClientContext* context, const ::appguard::AppGuardTcpConnection& request, ::appguard::AppGuardTcpResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::appguard::AppGuardTcpResponse>> AsyncHandleTcpConnection(::grpc::ClientContext* context, const ::appguard::AppGuardTcpConnection& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::appguard::AppGuardTcpResponse>>(AsyncHandleTcpConnectionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::appguard::AppGuardTcpResponse>> PrepareAsyncHandleTcpConnection(::grpc::ClientContext* context, const ::appguard::AppGuardTcpConnection& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::appguard::AppGuardTcpResponse>>(PrepareAsyncHandleTcpConnectionRaw(context, request, cq));
    }
    // HTTP
    virtual ::grpc::Status HandleHttpRequest(::grpc::ClientContext* context, const ::appguard::AppGuardHttpRequest& request, ::appguard::AppGuardResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::appguard::AppGuardResponse>> AsyncHandleHttpRequest(::grpc::ClientContext* context, const ::appguard::AppGuardHttpRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::appguard::AppGuardResponse>>(AsyncHandleHttpRequestRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::appguard::AppGuardResponse>> PrepareAsyncHandleHttpRequest(::grpc::ClientContext* context, const ::appguard::AppGuardHttpRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::appguard::AppGuardResponse>>(PrepareAsyncHandleHttpRequestRaw(context, request, cq));
    }
    virtual ::grpc::Status HandleHttpResponse(::grpc::ClientContext* context, const ::appguard::AppGuardHttpResponse& request, ::appguard::AppGuardResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::appguard::AppGuardResponse>> AsyncHandleHttpResponse(::grpc::ClientContext* context, const ::appguard::AppGuardHttpResponse& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::appguard::AppGuardResponse>>(AsyncHandleHttpResponseRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::appguard::AppGuardResponse>> PrepareAsyncHandleHttpResponse(::grpc::ClientContext* context, const ::appguard::AppGuardHttpResponse& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::appguard::AppGuardResponse>>(PrepareAsyncHandleHttpResponseRaw(context, request, cq));
    }
    // SMTP
    virtual ::grpc::Status HandleSmtpRequest(::grpc::ClientContext* context, const ::appguard::AppGuardSmtpRequest& request, ::appguard::AppGuardResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::appguard::AppGuardResponse>> AsyncHandleSmtpRequest(::grpc::ClientContext* context, const ::appguard::AppGuardSmtpRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::appguard::AppGuardResponse>>(AsyncHandleSmtpRequestRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::appguard::AppGuardResponse>> PrepareAsyncHandleSmtpRequest(::grpc::ClientContext* context, const ::appguard::AppGuardSmtpRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::appguard::AppGuardResponse>>(PrepareAsyncHandleSmtpRequestRaw(context, request, cq));
    }
    virtual ::grpc::Status HandleSmtpResponse(::grpc::ClientContext* context, const ::appguard::AppGuardSmtpResponse& request, ::appguard::AppGuardResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::appguard::AppGuardResponse>> AsyncHandleSmtpResponse(::grpc::ClientContext* context, const ::appguard::AppGuardSmtpResponse& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::appguard::AppGuardResponse>>(AsyncHandleSmtpResponseRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::appguard::AppGuardResponse>> PrepareAsyncHandleSmtpResponse(::grpc::ClientContext* context, const ::appguard::AppGuardSmtpResponse& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::appguard::AppGuardResponse>>(PrepareAsyncHandleSmtpResponseRaw(context, request, cq));
    }
    // Other
    virtual ::grpc::Status FirewallDefaultsRequest(::grpc::ClientContext* context, const ::appguard::Token& request, ::appguard_commands::FirewallDefaults* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::appguard_commands::FirewallDefaults>> AsyncFirewallDefaultsRequest(::grpc::ClientContext* context, const ::appguard::Token& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::appguard_commands::FirewallDefaults>>(AsyncFirewallDefaultsRequestRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::appguard_commands::FirewallDefaults>> PrepareAsyncFirewallDefaultsRequest(::grpc::ClientContext* context, const ::appguard::Token& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::appguard_commands::FirewallDefaults>>(PrepareAsyncFirewallDefaultsRequestRaw(context, request, cq));
    }
    class experimental_async_interface {
     public:
      virtual ~experimental_async_interface() {}
      // Control channel
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void ControlChannel(::grpc::ClientContext* context, ::grpc::ClientBidiReactor< ::appguard_commands::ClientMessage,::appguard_commands::ServerMessage>* reactor) = 0;
      #else
      virtual void ControlChannel(::grpc::ClientContext* context, ::grpc::experimental::ClientBidiReactor< ::appguard_commands::ClientMessage,::appguard_commands::ServerMessage>* reactor) = 0;
      #endif
      // Logs
      virtual void HandleLogs(::grpc::ClientContext* context, const ::appguard::Logs* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)>) = 0;
      virtual void HandleLogs(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void HandleLogs(::grpc::ClientContext* context, const ::appguard::Logs* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void HandleLogs(::grpc::ClientContext* context, const ::appguard::Logs* request, ::google::protobuf::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void HandleLogs(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void HandleLogs(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::google::protobuf::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // TCP
      virtual void HandleTcpConnection(::grpc::ClientContext* context, const ::appguard::AppGuardTcpConnection* request, ::appguard::AppGuardTcpResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void HandleTcpConnection(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::appguard::AppGuardTcpResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void HandleTcpConnection(::grpc::ClientContext* context, const ::appguard::AppGuardTcpConnection* request, ::appguard::AppGuardTcpResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void HandleTcpConnection(::grpc::ClientContext* context, const ::appguard::AppGuardTcpConnection* request, ::appguard::AppGuardTcpResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void HandleTcpConnection(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::appguard::AppGuardTcpResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void HandleTcpConnection(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::appguard::AppGuardTcpResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // HTTP
      virtual void HandleHttpRequest(::grpc::ClientContext* context, const ::appguard::AppGuardHttpRequest* request, ::appguard::AppGuardResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void HandleHttpRequest(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::appguard::AppGuardResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void HandleHttpRequest(::grpc::ClientContext* context, const ::appguard::AppGuardHttpRequest* request, ::appguard::AppGuardResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void HandleHttpRequest(::grpc::ClientContext* context, const ::appguard::AppGuardHttpRequest* request, ::appguard::AppGuardResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void HandleHttpRequest(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::appguard::AppGuardResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void HandleHttpRequest(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::appguard::AppGuardResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void HandleHttpResponse(::grpc::ClientContext* context, const ::appguard::AppGuardHttpResponse* request, ::appguard::AppGuardResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void HandleHttpResponse(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::appguard::AppGuardResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void HandleHttpResponse(::grpc::ClientContext* context, const ::appguard::AppGuardHttpResponse* request, ::appguard::AppGuardResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void HandleHttpResponse(::grpc::ClientContext* context, const ::appguard::AppGuardHttpResponse* request, ::appguard::AppGuardResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void HandleHttpResponse(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::appguard::AppGuardResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void HandleHttpResponse(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::appguard::AppGuardResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // SMTP
      virtual void HandleSmtpRequest(::grpc::ClientContext* context, const ::appguard::AppGuardSmtpRequest* request, ::appguard::AppGuardResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void HandleSmtpRequest(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::appguard::AppGuardResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void HandleSmtpRequest(::grpc::ClientContext* context, const ::appguard::AppGuardSmtpRequest* request, ::appguard::AppGuardResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void HandleSmtpRequest(::grpc::ClientContext* context, const ::appguard::AppGuardSmtpRequest* request, ::appguard::AppGuardResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void HandleSmtpRequest(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::appguard::AppGuardResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void HandleSmtpRequest(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::appguard::AppGuardResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void HandleSmtpResponse(::grpc::ClientContext* context, const ::appguard::AppGuardSmtpResponse* request, ::appguard::AppGuardResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void HandleSmtpResponse(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::appguard::AppGuardResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void HandleSmtpResponse(::grpc::ClientContext* context, const ::appguard::AppGuardSmtpResponse* request, ::appguard::AppGuardResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void HandleSmtpResponse(::grpc::ClientContext* context, const ::appguard::AppGuardSmtpResponse* request, ::appguard::AppGuardResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void HandleSmtpResponse(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::appguard::AppGuardResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void HandleSmtpResponse(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::appguard::AppGuardResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // Other
      virtual void FirewallDefaultsRequest(::grpc::ClientContext* context, const ::appguard::Token* request, ::appguard_commands::FirewallDefaults* response, std::function<void(::grpc::Status)>) = 0;
      virtual void FirewallDefaultsRequest(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::appguard_commands::FirewallDefaults* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void FirewallDefaultsRequest(::grpc::ClientContext* context, const ::appguard::Token* request, ::appguard_commands::FirewallDefaults* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void FirewallDefaultsRequest(::grpc::ClientContext* context, const ::appguard::Token* request, ::appguard_commands::FirewallDefaults* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void FirewallDefaultsRequest(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::appguard_commands::FirewallDefaults* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void FirewallDefaultsRequest(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::appguard_commands::FirewallDefaults* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
    };
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    typedef class experimental_async_interface async_interface;
    #endif
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    async_interface* async() { return experimental_async(); }
    #endif
    virtual class experimental_async_interface* experimental_async() { return nullptr; }
  private:
    virtual ::grpc::ClientReaderWriterInterface< ::appguard_commands::ClientMessage, ::appguard_commands::ServerMessage>* ControlChannelRaw(::grpc::ClientContext* context) = 0;
    virtual ::grpc::ClientAsyncReaderWriterInterface< ::appguard_commands::ClientMessage, ::appguard_commands::ServerMessage>* AsyncControlChannelRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderWriterInterface< ::appguard_commands::ClientMessage, ::appguard_commands::ServerMessage>* PrepareAsyncControlChannelRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* AsyncHandleLogsRaw(::grpc::ClientContext* context, const ::appguard::Logs& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* PrepareAsyncHandleLogsRaw(::grpc::ClientContext* context, const ::appguard::Logs& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::appguard::AppGuardTcpResponse>* AsyncHandleTcpConnectionRaw(::grpc::ClientContext* context, const ::appguard::AppGuardTcpConnection& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::appguard::AppGuardTcpResponse>* PrepareAsyncHandleTcpConnectionRaw(::grpc::ClientContext* context, const ::appguard::AppGuardTcpConnection& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::appguard::AppGuardResponse>* AsyncHandleHttpRequestRaw(::grpc::ClientContext* context, const ::appguard::AppGuardHttpRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::appguard::AppGuardResponse>* PrepareAsyncHandleHttpRequestRaw(::grpc::ClientContext* context, const ::appguard::AppGuardHttpRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::appguard::AppGuardResponse>* AsyncHandleHttpResponseRaw(::grpc::ClientContext* context, const ::appguard::AppGuardHttpResponse& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::appguard::AppGuardResponse>* PrepareAsyncHandleHttpResponseRaw(::grpc::ClientContext* context, const ::appguard::AppGuardHttpResponse& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::appguard::AppGuardResponse>* AsyncHandleSmtpRequestRaw(::grpc::ClientContext* context, const ::appguard::AppGuardSmtpRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::appguard::AppGuardResponse>* PrepareAsyncHandleSmtpRequestRaw(::grpc::ClientContext* context, const ::appguard::AppGuardSmtpRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::appguard::AppGuardResponse>* AsyncHandleSmtpResponseRaw(::grpc::ClientContext* context, const ::appguard::AppGuardSmtpResponse& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::appguard::AppGuardResponse>* PrepareAsyncHandleSmtpResponseRaw(::grpc::ClientContext* context, const ::appguard::AppGuardSmtpResponse& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::appguard_commands::FirewallDefaults>* AsyncFirewallDefaultsRequestRaw(::grpc::ClientContext* context, const ::appguard::Token& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::appguard_commands::FirewallDefaults>* PrepareAsyncFirewallDefaultsRequestRaw(::grpc::ClientContext* context, const ::appguard::Token& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    std::unique_ptr< ::grpc::ClientReaderWriter< ::appguard_commands::ClientMessage, ::appguard_commands::ServerMessage>> ControlChannel(::grpc::ClientContext* context) {
      return std::unique_ptr< ::grpc::ClientReaderWriter< ::appguard_commands::ClientMessage, ::appguard_commands::ServerMessage>>(ControlChannelRaw(context));
    }
    std::unique_ptr<  ::grpc::ClientAsyncReaderWriter< ::appguard_commands::ClientMessage, ::appguard_commands::ServerMessage>> AsyncControlChannel(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriter< ::appguard_commands::ClientMessage, ::appguard_commands::ServerMessage>>(AsyncControlChannelRaw(context, cq, tag));
    }
    std::unique_ptr<  ::grpc::ClientAsyncReaderWriter< ::appguard_commands::ClientMessage, ::appguard_commands::ServerMessage>> PrepareAsyncControlChannel(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriter< ::appguard_commands::ClientMessage, ::appguard_commands::ServerMessage>>(PrepareAsyncControlChannelRaw(context, cq));
    }
    ::grpc::Status HandleLogs(::grpc::ClientContext* context, const ::appguard::Logs& request, ::google::protobuf::Empty* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> AsyncHandleLogs(::grpc::ClientContext* context, const ::appguard::Logs& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(AsyncHandleLogsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> PrepareAsyncHandleLogs(::grpc::ClientContext* context, const ::appguard::Logs& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(PrepareAsyncHandleLogsRaw(context, request, cq));
    }
    ::grpc::Status HandleTcpConnection(::grpc::ClientContext* context, const ::appguard::AppGuardTcpConnection& request, ::appguard::AppGuardTcpResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::appguard::AppGuardTcpResponse>> AsyncHandleTcpConnection(::grpc::ClientContext* context, const ::appguard::AppGuardTcpConnection& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::appguard::AppGuardTcpResponse>>(AsyncHandleTcpConnectionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::appguard::AppGuardTcpResponse>> PrepareAsyncHandleTcpConnection(::grpc::ClientContext* context, const ::appguard::AppGuardTcpConnection& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::appguard::AppGuardTcpResponse>>(PrepareAsyncHandleTcpConnectionRaw(context, request, cq));
    }
    ::grpc::Status HandleHttpRequest(::grpc::ClientContext* context, const ::appguard::AppGuardHttpRequest& request, ::appguard::AppGuardResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::appguard::AppGuardResponse>> AsyncHandleHttpRequest(::grpc::ClientContext* context, const ::appguard::AppGuardHttpRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::appguard::AppGuardResponse>>(AsyncHandleHttpRequestRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::appguard::AppGuardResponse>> PrepareAsyncHandleHttpRequest(::grpc::ClientContext* context, const ::appguard::AppGuardHttpRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::appguard::AppGuardResponse>>(PrepareAsyncHandleHttpRequestRaw(context, request, cq));
    }
    ::grpc::Status HandleHttpResponse(::grpc::ClientContext* context, const ::appguard::AppGuardHttpResponse& request, ::appguard::AppGuardResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::appguard::AppGuardResponse>> AsyncHandleHttpResponse(::grpc::ClientContext* context, const ::appguard::AppGuardHttpResponse& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::appguard::AppGuardResponse>>(AsyncHandleHttpResponseRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::appguard::AppGuardResponse>> PrepareAsyncHandleHttpResponse(::grpc::ClientContext* context, const ::appguard::AppGuardHttpResponse& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::appguard::AppGuardResponse>>(PrepareAsyncHandleHttpResponseRaw(context, request, cq));
    }
    ::grpc::Status HandleSmtpRequest(::grpc::ClientContext* context, const ::appguard::AppGuardSmtpRequest& request, ::appguard::AppGuardResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::appguard::AppGuardResponse>> AsyncHandleSmtpRequest(::grpc::ClientContext* context, const ::appguard::AppGuardSmtpRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::appguard::AppGuardResponse>>(AsyncHandleSmtpRequestRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::appguard::AppGuardResponse>> PrepareAsyncHandleSmtpRequest(::grpc::ClientContext* context, const ::appguard::AppGuardSmtpRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::appguard::AppGuardResponse>>(PrepareAsyncHandleSmtpRequestRaw(context, request, cq));
    }
    ::grpc::Status HandleSmtpResponse(::grpc::ClientContext* context, const ::appguard::AppGuardSmtpResponse& request, ::appguard::AppGuardResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::appguard::AppGuardResponse>> AsyncHandleSmtpResponse(::grpc::ClientContext* context, const ::appguard::AppGuardSmtpResponse& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::appguard::AppGuardResponse>>(AsyncHandleSmtpResponseRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::appguard::AppGuardResponse>> PrepareAsyncHandleSmtpResponse(::grpc::ClientContext* context, const ::appguard::AppGuardSmtpResponse& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::appguard::AppGuardResponse>>(PrepareAsyncHandleSmtpResponseRaw(context, request, cq));
    }
    ::grpc::Status FirewallDefaultsRequest(::grpc::ClientContext* context, const ::appguard::Token& request, ::appguard_commands::FirewallDefaults* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::appguard_commands::FirewallDefaults>> AsyncFirewallDefaultsRequest(::grpc::ClientContext* context, const ::appguard::Token& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::appguard_commands::FirewallDefaults>>(AsyncFirewallDefaultsRequestRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::appguard_commands::FirewallDefaults>> PrepareAsyncFirewallDefaultsRequest(::grpc::ClientContext* context, const ::appguard::Token& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::appguard_commands::FirewallDefaults>>(PrepareAsyncFirewallDefaultsRequestRaw(context, request, cq));
    }
    class experimental_async final :
      public StubInterface::experimental_async_interface {
     public:
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void ControlChannel(::grpc::ClientContext* context, ::grpc::ClientBidiReactor< ::appguard_commands::ClientMessage,::appguard_commands::ServerMessage>* reactor) override;
      #else
      void ControlChannel(::grpc::ClientContext* context, ::grpc::experimental::ClientBidiReactor< ::appguard_commands::ClientMessage,::appguard_commands::ServerMessage>* reactor) override;
      #endif
      void HandleLogs(::grpc::ClientContext* context, const ::appguard::Logs* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)>) override;
      void HandleLogs(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void HandleLogs(::grpc::ClientContext* context, const ::appguard::Logs* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void HandleLogs(::grpc::ClientContext* context, const ::appguard::Logs* request, ::google::protobuf::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void HandleLogs(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void HandleLogs(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::google::protobuf::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void HandleTcpConnection(::grpc::ClientContext* context, const ::appguard::AppGuardTcpConnection* request, ::appguard::AppGuardTcpResponse* response, std::function<void(::grpc::Status)>) override;
      void HandleTcpConnection(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::appguard::AppGuardTcpResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void HandleTcpConnection(::grpc::ClientContext* context, const ::appguard::AppGuardTcpConnection* request, ::appguard::AppGuardTcpResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void HandleTcpConnection(::grpc::ClientContext* context, const ::appguard::AppGuardTcpConnection* request, ::appguard::AppGuardTcpResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void HandleTcpConnection(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::appguard::AppGuardTcpResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void HandleTcpConnection(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::appguard::AppGuardTcpResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void HandleHttpRequest(::grpc::ClientContext* context, const ::appguard::AppGuardHttpRequest* request, ::appguard::AppGuardResponse* response, std::function<void(::grpc::Status)>) override;
      void HandleHttpRequest(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::appguard::AppGuardResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void HandleHttpRequest(::grpc::ClientContext* context, const ::appguard::AppGuardHttpRequest* request, ::appguard::AppGuardResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void HandleHttpRequest(::grpc::ClientContext* context, const ::appguard::AppGuardHttpRequest* request, ::appguard::AppGuardResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void HandleHttpRequest(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::appguard::AppGuardResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void HandleHttpRequest(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::appguard::AppGuardResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void HandleHttpResponse(::grpc::ClientContext* context, const ::appguard::AppGuardHttpResponse* request, ::appguard::AppGuardResponse* response, std::function<void(::grpc::Status)>) override;
      void HandleHttpResponse(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::appguard::AppGuardResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void HandleHttpResponse(::grpc::ClientContext* context, const ::appguard::AppGuardHttpResponse* request, ::appguard::AppGuardResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void HandleHttpResponse(::grpc::ClientContext* context, const ::appguard::AppGuardHttpResponse* request, ::appguard::AppGuardResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void HandleHttpResponse(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::appguard::AppGuardResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void HandleHttpResponse(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::appguard::AppGuardResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void HandleSmtpRequest(::grpc::ClientContext* context, const ::appguard::AppGuardSmtpRequest* request, ::appguard::AppGuardResponse* response, std::function<void(::grpc::Status)>) override;
      void HandleSmtpRequest(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::appguard::AppGuardResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void HandleSmtpRequest(::grpc::ClientContext* context, const ::appguard::AppGuardSmtpRequest* request, ::appguard::AppGuardResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void HandleSmtpRequest(::grpc::ClientContext* context, const ::appguard::AppGuardSmtpRequest* request, ::appguard::AppGuardResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void HandleSmtpRequest(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::appguard::AppGuardResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void HandleSmtpRequest(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::appguard::AppGuardResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void HandleSmtpResponse(::grpc::ClientContext* context, const ::appguard::AppGuardSmtpResponse* request, ::appguard::AppGuardResponse* response, std::function<void(::grpc::Status)>) override;
      void HandleSmtpResponse(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::appguard::AppGuardResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void HandleSmtpResponse(::grpc::ClientContext* context, const ::appguard::AppGuardSmtpResponse* request, ::appguard::AppGuardResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void HandleSmtpResponse(::grpc::ClientContext* context, const ::appguard::AppGuardSmtpResponse* request, ::appguard::AppGuardResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void HandleSmtpResponse(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::appguard::AppGuardResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void HandleSmtpResponse(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::appguard::AppGuardResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void FirewallDefaultsRequest(::grpc::ClientContext* context, const ::appguard::Token* request, ::appguard_commands::FirewallDefaults* response, std::function<void(::grpc::Status)>) override;
      void FirewallDefaultsRequest(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::appguard_commands::FirewallDefaults* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void FirewallDefaultsRequest(::grpc::ClientContext* context, const ::appguard::Token* request, ::appguard_commands::FirewallDefaults* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void FirewallDefaultsRequest(::grpc::ClientContext* context, const ::appguard::Token* request, ::appguard_commands::FirewallDefaults* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void FirewallDefaultsRequest(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::appguard_commands::FirewallDefaults* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void FirewallDefaultsRequest(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::appguard_commands::FirewallDefaults* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
     private:
      friend class Stub;
      explicit experimental_async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_{this};
    ::grpc::ClientReaderWriter< ::appguard_commands::ClientMessage, ::appguard_commands::ServerMessage>* ControlChannelRaw(::grpc::ClientContext* context) override;
    ::grpc::ClientAsyncReaderWriter< ::appguard_commands::ClientMessage, ::appguard_commands::ServerMessage>* AsyncControlChannelRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReaderWriter< ::appguard_commands::ClientMessage, ::appguard_commands::ServerMessage>* PrepareAsyncControlChannelRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* AsyncHandleLogsRaw(::grpc::ClientContext* context, const ::appguard::Logs& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* PrepareAsyncHandleLogsRaw(::grpc::ClientContext* context, const ::appguard::Logs& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::appguard::AppGuardTcpResponse>* AsyncHandleTcpConnectionRaw(::grpc::ClientContext* context, const ::appguard::AppGuardTcpConnection& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::appguard::AppGuardTcpResponse>* PrepareAsyncHandleTcpConnectionRaw(::grpc::ClientContext* context, const ::appguard::AppGuardTcpConnection& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::appguard::AppGuardResponse>* AsyncHandleHttpRequestRaw(::grpc::ClientContext* context, const ::appguard::AppGuardHttpRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::appguard::AppGuardResponse>* PrepareAsyncHandleHttpRequestRaw(::grpc::ClientContext* context, const ::appguard::AppGuardHttpRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::appguard::AppGuardResponse>* AsyncHandleHttpResponseRaw(::grpc::ClientContext* context, const ::appguard::AppGuardHttpResponse& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::appguard::AppGuardResponse>* PrepareAsyncHandleHttpResponseRaw(::grpc::ClientContext* context, const ::appguard::AppGuardHttpResponse& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::appguard::AppGuardResponse>* AsyncHandleSmtpRequestRaw(::grpc::ClientContext* context, const ::appguard::AppGuardSmtpRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::appguard::AppGuardResponse>* PrepareAsyncHandleSmtpRequestRaw(::grpc::ClientContext* context, const ::appguard::AppGuardSmtpRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::appguard::AppGuardResponse>* AsyncHandleSmtpResponseRaw(::grpc::ClientContext* context, const ::appguard::AppGuardSmtpResponse& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::appguard::AppGuardResponse>* PrepareAsyncHandleSmtpResponseRaw(::grpc::ClientContext* context, const ::appguard::AppGuardSmtpResponse& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::appguard_commands::FirewallDefaults>* AsyncFirewallDefaultsRequestRaw(::grpc::ClientContext* context, const ::appguard::Token& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::appguard_commands::FirewallDefaults>* PrepareAsyncFirewallDefaultsRequestRaw(::grpc::ClientContext* context, const ::appguard::Token& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_ControlChannel_;
    const ::grpc::internal::RpcMethod rpcmethod_HandleLogs_;
    const ::grpc::internal::RpcMethod rpcmethod_HandleTcpConnection_;
    const ::grpc::internal::RpcMethod rpcmethod_HandleHttpRequest_;
    const ::grpc::internal::RpcMethod rpcmethod_HandleHttpResponse_;
    const ::grpc::internal::RpcMethod rpcmethod_HandleSmtpRequest_;
    const ::grpc::internal::RpcMethod rpcmethod_HandleSmtpResponse_;
    const ::grpc::internal::RpcMethod rpcmethod_FirewallDefaultsRequest_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // Control channel
    virtual ::grpc::Status ControlChannel(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::appguard_commands::ServerMessage, ::appguard_commands::ClientMessage>* stream);
    // Logs
    virtual ::grpc::Status HandleLogs(::grpc::ServerContext* context, const ::appguard::Logs* request, ::google::protobuf::Empty* response);
    // TCP
    virtual ::grpc::Status HandleTcpConnection(::grpc::ServerContext* context, const ::appguard::AppGuardTcpConnection* request, ::appguard::AppGuardTcpResponse* response);
    // HTTP
    virtual ::grpc::Status HandleHttpRequest(::grpc::ServerContext* context, const ::appguard::AppGuardHttpRequest* request, ::appguard::AppGuardResponse* response);
    virtual ::grpc::Status HandleHttpResponse(::grpc::ServerContext* context, const ::appguard::AppGuardHttpResponse* request, ::appguard::AppGuardResponse* response);
    // SMTP
    virtual ::grpc::Status HandleSmtpRequest(::grpc::ServerContext* context, const ::appguard::AppGuardSmtpRequest* request, ::appguard::AppGuardResponse* response);
    virtual ::grpc::Status HandleSmtpResponse(::grpc::ServerContext* context, const ::appguard::AppGuardSmtpResponse* request, ::appguard::AppGuardResponse* response);
    // Other
    virtual ::grpc::Status FirewallDefaultsRequest(::grpc::ServerContext* context, const ::appguard::Token* request, ::appguard_commands::FirewallDefaults* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_ControlChannel : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ControlChannel() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_ControlChannel() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ControlChannel(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::appguard_commands::ServerMessage, ::appguard_commands::ClientMessage>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestControlChannel(::grpc::ServerContext* context, ::grpc::ServerAsyncReaderWriter< ::appguard_commands::ServerMessage, ::appguard_commands::ClientMessage>* stream, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncBidiStreaming(0, context, stream, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_HandleLogs : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_HandleLogs() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_HandleLogs() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status HandleLogs(::grpc::ServerContext* /*context*/, const ::appguard::Logs* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestHandleLogs(::grpc::ServerContext* context, ::appguard::Logs* request, ::grpc::ServerAsyncResponseWriter< ::google::protobuf::Empty>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_HandleTcpConnection : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_HandleTcpConnection() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_HandleTcpConnection() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status HandleTcpConnection(::grpc::ServerContext* /*context*/, const ::appguard::AppGuardTcpConnection* /*request*/, ::appguard::AppGuardTcpResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestHandleTcpConnection(::grpc::ServerContext* context, ::appguard::AppGuardTcpConnection* request, ::grpc::ServerAsyncResponseWriter< ::appguard::AppGuardTcpResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_HandleHttpRequest : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_HandleHttpRequest() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_HandleHttpRequest() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status HandleHttpRequest(::grpc::ServerContext* /*context*/, const ::appguard::AppGuardHttpRequest* /*request*/, ::appguard::AppGuardResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestHandleHttpRequest(::grpc::ServerContext* context, ::appguard::AppGuardHttpRequest* request, ::grpc::ServerAsyncResponseWriter< ::appguard::AppGuardResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_HandleHttpResponse : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_HandleHttpResponse() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_HandleHttpResponse() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status HandleHttpResponse(::grpc::ServerContext* /*context*/, const ::appguard::AppGuardHttpResponse* /*request*/, ::appguard::AppGuardResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestHandleHttpResponse(::grpc::ServerContext* context, ::appguard::AppGuardHttpResponse* request, ::grpc::ServerAsyncResponseWriter< ::appguard::AppGuardResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_HandleSmtpRequest : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_HandleSmtpRequest() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_HandleSmtpRequest() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status HandleSmtpRequest(::grpc::ServerContext* /*context*/, const ::appguard::AppGuardSmtpRequest* /*request*/, ::appguard::AppGuardResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestHandleSmtpRequest(::grpc::ServerContext* context, ::appguard::AppGuardSmtpRequest* request, ::grpc::ServerAsyncResponseWriter< ::appguard::AppGuardResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_HandleSmtpResponse : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_HandleSmtpResponse() {
      ::grpc::Service::MarkMethodAsync(6);
    }
    ~WithAsyncMethod_HandleSmtpResponse() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status HandleSmtpResponse(::grpc::ServerContext* /*context*/, const ::appguard::AppGuardSmtpResponse* /*request*/, ::appguard::AppGuardResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestHandleSmtpResponse(::grpc::ServerContext* context, ::appguard::AppGuardSmtpResponse* request, ::grpc::ServerAsyncResponseWriter< ::appguard::AppGuardResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_FirewallDefaultsRequest : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_FirewallDefaultsRequest() {
      ::grpc::Service::MarkMethodAsync(7);
    }
    ~WithAsyncMethod_FirewallDefaultsRequest() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FirewallDefaultsRequest(::grpc::ServerContext* /*context*/, const ::appguard::Token* /*request*/, ::appguard_commands::FirewallDefaults* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestFirewallDefaultsRequest(::grpc::ServerContext* context, ::appguard::Token* request, ::grpc::ServerAsyncResponseWriter< ::appguard_commands::FirewallDefaults>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_ControlChannel<WithAsyncMethod_HandleLogs<WithAsyncMethod_HandleTcpConnection<WithAsyncMethod_HandleHttpRequest<WithAsyncMethod_HandleHttpResponse<WithAsyncMethod_HandleSmtpRequest<WithAsyncMethod_HandleSmtpResponse<WithAsyncMethod_FirewallDefaultsRequest<Service > > > > > > > > AsyncService;
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_ControlChannel : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_ControlChannel() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(0,
          new ::grpc_impl::internal::CallbackBidiHandler< ::appguard_commands::ClientMessage, ::appguard_commands::ServerMessage>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context) { return this->ControlChannel(context); }));
    }
    ~ExperimentalWithCallbackMethod_ControlChannel() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ControlChannel(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::appguard_commands::ServerMessage, ::appguard_commands::ClientMessage>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerBidiReactor< ::appguard_commands::ClientMessage, ::appguard_commands::ServerMessage>* ControlChannel(
      ::grpc::CallbackServerContext* /*context*/)
    #else
    virtual ::grpc::experimental::ServerBidiReactor< ::appguard_commands::ClientMessage, ::appguard_commands::ServerMessage>* ControlChannel(
      ::grpc::experimental::CallbackServerContext* /*context*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_HandleLogs : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_HandleLogs() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(1,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::appguard::Logs, ::google::protobuf::Empty>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::appguard::Logs* request, ::google::protobuf::Empty* response) { return this->HandleLogs(context, request, response); }));}
    void SetMessageAllocatorFor_HandleLogs(
        ::grpc::experimental::MessageAllocator< ::appguard::Logs, ::google::protobuf::Empty>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(1);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::appguard::Logs, ::google::protobuf::Empty>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_HandleLogs() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status HandleLogs(::grpc::ServerContext* /*context*/, const ::appguard::Logs* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* HandleLogs(
      ::grpc::CallbackServerContext* /*context*/, const ::appguard::Logs* /*request*/, ::google::protobuf::Empty* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* HandleLogs(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::appguard::Logs* /*request*/, ::google::protobuf::Empty* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_HandleTcpConnection : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_HandleTcpConnection() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(2,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::appguard::AppGuardTcpConnection, ::appguard::AppGuardTcpResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::appguard::AppGuardTcpConnection* request, ::appguard::AppGuardTcpResponse* response) { return this->HandleTcpConnection(context, request, response); }));}
    void SetMessageAllocatorFor_HandleTcpConnection(
        ::grpc::experimental::MessageAllocator< ::appguard::AppGuardTcpConnection, ::appguard::AppGuardTcpResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(2);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::appguard::AppGuardTcpConnection, ::appguard::AppGuardTcpResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_HandleTcpConnection() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status HandleTcpConnection(::grpc::ServerContext* /*context*/, const ::appguard::AppGuardTcpConnection* /*request*/, ::appguard::AppGuardTcpResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* HandleTcpConnection(
      ::grpc::CallbackServerContext* /*context*/, const ::appguard::AppGuardTcpConnection* /*request*/, ::appguard::AppGuardTcpResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* HandleTcpConnection(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::appguard::AppGuardTcpConnection* /*request*/, ::appguard::AppGuardTcpResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_HandleHttpRequest : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_HandleHttpRequest() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(3,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::appguard::AppGuardHttpRequest, ::appguard::AppGuardResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::appguard::AppGuardHttpRequest* request, ::appguard::AppGuardResponse* response) { return this->HandleHttpRequest(context, request, response); }));}
    void SetMessageAllocatorFor_HandleHttpRequest(
        ::grpc::experimental::MessageAllocator< ::appguard::AppGuardHttpRequest, ::appguard::AppGuardResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(3);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::appguard::AppGuardHttpRequest, ::appguard::AppGuardResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_HandleHttpRequest() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status HandleHttpRequest(::grpc::ServerContext* /*context*/, const ::appguard::AppGuardHttpRequest* /*request*/, ::appguard::AppGuardResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* HandleHttpRequest(
      ::grpc::CallbackServerContext* /*context*/, const ::appguard::AppGuardHttpRequest* /*request*/, ::appguard::AppGuardResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* HandleHttpRequest(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::appguard::AppGuardHttpRequest* /*request*/, ::appguard::AppGuardResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_HandleHttpResponse : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_HandleHttpResponse() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(4,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::appguard::AppGuardHttpResponse, ::appguard::AppGuardResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::appguard::AppGuardHttpResponse* request, ::appguard::AppGuardResponse* response) { return this->HandleHttpResponse(context, request, response); }));}
    void SetMessageAllocatorFor_HandleHttpResponse(
        ::grpc::experimental::MessageAllocator< ::appguard::AppGuardHttpResponse, ::appguard::AppGuardResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(4);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(4);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::appguard::AppGuardHttpResponse, ::appguard::AppGuardResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_HandleHttpResponse() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status HandleHttpResponse(::grpc::ServerContext* /*context*/, const ::appguard::AppGuardHttpResponse* /*request*/, ::appguard::AppGuardResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* HandleHttpResponse(
      ::grpc::CallbackServerContext* /*context*/, const ::appguard::AppGuardHttpResponse* /*request*/, ::appguard::AppGuardResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* HandleHttpResponse(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::appguard::AppGuardHttpResponse* /*request*/, ::appguard::AppGuardResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_HandleSmtpRequest : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_HandleSmtpRequest() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(5,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::appguard::AppGuardSmtpRequest, ::appguard::AppGuardResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::appguard::AppGuardSmtpRequest* request, ::appguard::AppGuardResponse* response) { return this->HandleSmtpRequest(context, request, response); }));}
    void SetMessageAllocatorFor_HandleSmtpRequest(
        ::grpc::experimental::MessageAllocator< ::appguard::AppGuardSmtpRequest, ::appguard::AppGuardResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(5);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(5);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::appguard::AppGuardSmtpRequest, ::appguard::AppGuardResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_HandleSmtpRequest() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status HandleSmtpRequest(::grpc::ServerContext* /*context*/, const ::appguard::AppGuardSmtpRequest* /*request*/, ::appguard::AppGuardResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* HandleSmtpRequest(
      ::grpc::CallbackServerContext* /*context*/, const ::appguard::AppGuardSmtpRequest* /*request*/, ::appguard::AppGuardResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* HandleSmtpRequest(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::appguard::AppGuardSmtpRequest* /*request*/, ::appguard::AppGuardResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_HandleSmtpResponse : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_HandleSmtpResponse() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(6,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::appguard::AppGuardSmtpResponse, ::appguard::AppGuardResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::appguard::AppGuardSmtpResponse* request, ::appguard::AppGuardResponse* response) { return this->HandleSmtpResponse(context, request, response); }));}
    void SetMessageAllocatorFor_HandleSmtpResponse(
        ::grpc::experimental::MessageAllocator< ::appguard::AppGuardSmtpResponse, ::appguard::AppGuardResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(6);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(6);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::appguard::AppGuardSmtpResponse, ::appguard::AppGuardResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_HandleSmtpResponse() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status HandleSmtpResponse(::grpc::ServerContext* /*context*/, const ::appguard::AppGuardSmtpResponse* /*request*/, ::appguard::AppGuardResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* HandleSmtpResponse(
      ::grpc::CallbackServerContext* /*context*/, const ::appguard::AppGuardSmtpResponse* /*request*/, ::appguard::AppGuardResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* HandleSmtpResponse(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::appguard::AppGuardSmtpResponse* /*request*/, ::appguard::AppGuardResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_FirewallDefaultsRequest : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_FirewallDefaultsRequest() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(7,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::appguard::Token, ::appguard_commands::FirewallDefaults>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::appguard::Token* request, ::appguard_commands::FirewallDefaults* response) { return this->FirewallDefaultsRequest(context, request, response); }));}
    void SetMessageAllocatorFor_FirewallDefaultsRequest(
        ::grpc::experimental::MessageAllocator< ::appguard::Token, ::appguard_commands::FirewallDefaults>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(7);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(7);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::appguard::Token, ::appguard_commands::FirewallDefaults>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_FirewallDefaultsRequest() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FirewallDefaultsRequest(::grpc::ServerContext* /*context*/, const ::appguard::Token* /*request*/, ::appguard_commands::FirewallDefaults* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* FirewallDefaultsRequest(
      ::grpc::CallbackServerContext* /*context*/, const ::appguard::Token* /*request*/, ::appguard_commands::FirewallDefaults* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* FirewallDefaultsRequest(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::appguard::Token* /*request*/, ::appguard_commands::FirewallDefaults* /*response*/)
    #endif
      { return nullptr; }
  };
  #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
  typedef ExperimentalWithCallbackMethod_ControlChannel<ExperimentalWithCallbackMethod_HandleLogs<ExperimentalWithCallbackMethod_HandleTcpConnection<ExperimentalWithCallbackMethod_HandleHttpRequest<ExperimentalWithCallbackMethod_HandleHttpResponse<ExperimentalWithCallbackMethod_HandleSmtpRequest<ExperimentalWithCallbackMethod_HandleSmtpResponse<ExperimentalWithCallbackMethod_FirewallDefaultsRequest<Service > > > > > > > > CallbackService;
  #endif

  typedef ExperimentalWithCallbackMethod_ControlChannel<ExperimentalWithCallbackMethod_HandleLogs<ExperimentalWithCallbackMethod_HandleTcpConnection<ExperimentalWithCallbackMethod_HandleHttpRequest<ExperimentalWithCallbackMethod_HandleHttpResponse<ExperimentalWithCallbackMethod_HandleSmtpRequest<ExperimentalWithCallbackMethod_HandleSmtpResponse<ExperimentalWithCallbackMethod_FirewallDefaultsRequest<Service > > > > > > > > ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_ControlChannel : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ControlChannel() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_ControlChannel() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ControlChannel(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::appguard_commands::ServerMessage, ::appguard_commands::ClientMessage>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_HandleLogs : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_HandleLogs() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_HandleLogs() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status HandleLogs(::grpc::ServerContext* /*context*/, const ::appguard::Logs* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_HandleTcpConnection : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_HandleTcpConnection() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_HandleTcpConnection() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status HandleTcpConnection(::grpc::ServerContext* /*context*/, const ::appguard::AppGuardTcpConnection* /*request*/, ::appguard::AppGuardTcpResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_HandleHttpRequest : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_HandleHttpRequest() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_HandleHttpRequest() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status HandleHttpRequest(::grpc::ServerContext* /*context*/, const ::appguard::AppGuardHttpRequest* /*request*/, ::appguard::AppGuardResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_HandleHttpResponse : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_HandleHttpResponse() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_HandleHttpResponse() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status HandleHttpResponse(::grpc::ServerContext* /*context*/, const ::appguard::AppGuardHttpResponse* /*request*/, ::appguard::AppGuardResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_HandleSmtpRequest : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_HandleSmtpRequest() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_HandleSmtpRequest() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status HandleSmtpRequest(::grpc::ServerContext* /*context*/, const ::appguard::AppGuardSmtpRequest* /*request*/, ::appguard::AppGuardResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_HandleSmtpResponse : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_HandleSmtpResponse() {
      ::grpc::Service::MarkMethodGeneric(6);
    }
    ~WithGenericMethod_HandleSmtpResponse() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status HandleSmtpResponse(::grpc::ServerContext* /*context*/, const ::appguard::AppGuardSmtpResponse* /*request*/, ::appguard::AppGuardResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_FirewallDefaultsRequest : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_FirewallDefaultsRequest() {
      ::grpc::Service::MarkMethodGeneric(7);
    }
    ~WithGenericMethod_FirewallDefaultsRequest() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FirewallDefaultsRequest(::grpc::ServerContext* /*context*/, const ::appguard::Token* /*request*/, ::appguard_commands::FirewallDefaults* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_ControlChannel : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ControlChannel() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_ControlChannel() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ControlChannel(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::appguard_commands::ServerMessage, ::appguard_commands::ClientMessage>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestControlChannel(::grpc::ServerContext* context, ::grpc::ServerAsyncReaderWriter< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* stream, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncBidiStreaming(0, context, stream, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_HandleLogs : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_HandleLogs() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_HandleLogs() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status HandleLogs(::grpc::ServerContext* /*context*/, const ::appguard::Logs* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestHandleLogs(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_HandleTcpConnection : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_HandleTcpConnection() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_HandleTcpConnection() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status HandleTcpConnection(::grpc::ServerContext* /*context*/, const ::appguard::AppGuardTcpConnection* /*request*/, ::appguard::AppGuardTcpResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestHandleTcpConnection(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_HandleHttpRequest : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_HandleHttpRequest() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_HandleHttpRequest() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status HandleHttpRequest(::grpc::ServerContext* /*context*/, const ::appguard::AppGuardHttpRequest* /*request*/, ::appguard::AppGuardResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestHandleHttpRequest(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_HandleHttpResponse : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_HandleHttpResponse() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_HandleHttpResponse() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status HandleHttpResponse(::grpc::ServerContext* /*context*/, const ::appguard::AppGuardHttpResponse* /*request*/, ::appguard::AppGuardResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestHandleHttpResponse(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_HandleSmtpRequest : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_HandleSmtpRequest() {
      ::grpc::Service::MarkMethodRaw(5);
    }
    ~WithRawMethod_HandleSmtpRequest() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status HandleSmtpRequest(::grpc::ServerContext* /*context*/, const ::appguard::AppGuardSmtpRequest* /*request*/, ::appguard::AppGuardResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestHandleSmtpRequest(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_HandleSmtpResponse : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_HandleSmtpResponse() {
      ::grpc::Service::MarkMethodRaw(6);
    }
    ~WithRawMethod_HandleSmtpResponse() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status HandleSmtpResponse(::grpc::ServerContext* /*context*/, const ::appguard::AppGuardSmtpResponse* /*request*/, ::appguard::AppGuardResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestHandleSmtpResponse(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_FirewallDefaultsRequest : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_FirewallDefaultsRequest() {
      ::grpc::Service::MarkMethodRaw(7);
    }
    ~WithRawMethod_FirewallDefaultsRequest() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FirewallDefaultsRequest(::grpc::ServerContext* /*context*/, const ::appguard::Token* /*request*/, ::appguard_commands::FirewallDefaults* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestFirewallDefaultsRequest(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_ControlChannel : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_ControlChannel() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(0,
          new ::grpc_impl::internal::CallbackBidiHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context) { return this->ControlChannel(context); }));
    }
    ~ExperimentalWithRawCallbackMethod_ControlChannel() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ControlChannel(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::appguard_commands::ServerMessage, ::appguard_commands::ClientMessage>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerBidiReactor< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* ControlChannel(
      ::grpc::CallbackServerContext* /*context*/)
    #else
    virtual ::grpc::experimental::ServerBidiReactor< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* ControlChannel(
      ::grpc::experimental::CallbackServerContext* /*context*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_HandleLogs : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_HandleLogs() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(1,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->HandleLogs(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_HandleLogs() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status HandleLogs(::grpc::ServerContext* /*context*/, const ::appguard::Logs* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* HandleLogs(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* HandleLogs(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_HandleTcpConnection : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_HandleTcpConnection() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(2,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->HandleTcpConnection(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_HandleTcpConnection() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status HandleTcpConnection(::grpc::ServerContext* /*context*/, const ::appguard::AppGuardTcpConnection* /*request*/, ::appguard::AppGuardTcpResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* HandleTcpConnection(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* HandleTcpConnection(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_HandleHttpRequest : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_HandleHttpRequest() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(3,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->HandleHttpRequest(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_HandleHttpRequest() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status HandleHttpRequest(::grpc::ServerContext* /*context*/, const ::appguard::AppGuardHttpRequest* /*request*/, ::appguard::AppGuardResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* HandleHttpRequest(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* HandleHttpRequest(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_HandleHttpResponse : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_HandleHttpResponse() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(4,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->HandleHttpResponse(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_HandleHttpResponse() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status HandleHttpResponse(::grpc::ServerContext* /*context*/, const ::appguard::AppGuardHttpResponse* /*request*/, ::appguard::AppGuardResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* HandleHttpResponse(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* HandleHttpResponse(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_HandleSmtpRequest : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_HandleSmtpRequest() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(5,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->HandleSmtpRequest(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_HandleSmtpRequest() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status HandleSmtpRequest(::grpc::ServerContext* /*context*/, const ::appguard::AppGuardSmtpRequest* /*request*/, ::appguard::AppGuardResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* HandleSmtpRequest(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* HandleSmtpRequest(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_HandleSmtpResponse : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_HandleSmtpResponse() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(6,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->HandleSmtpResponse(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_HandleSmtpResponse() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status HandleSmtpResponse(::grpc::ServerContext* /*context*/, const ::appguard::AppGuardSmtpResponse* /*request*/, ::appguard::AppGuardResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* HandleSmtpResponse(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* HandleSmtpResponse(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_FirewallDefaultsRequest : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_FirewallDefaultsRequest() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(7,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->FirewallDefaultsRequest(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_FirewallDefaultsRequest() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FirewallDefaultsRequest(::grpc::ServerContext* /*context*/, const ::appguard::Token* /*request*/, ::appguard_commands::FirewallDefaults* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* FirewallDefaultsRequest(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* FirewallDefaultsRequest(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_HandleLogs : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_HandleLogs() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::appguard::Logs, ::google::protobuf::Empty>(
            [this](::grpc_impl::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::appguard::Logs, ::google::protobuf::Empty>* streamer) {
                       return this->StreamedHandleLogs(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_HandleLogs() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status HandleLogs(::grpc::ServerContext* /*context*/, const ::appguard::Logs* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedHandleLogs(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::appguard::Logs,::google::protobuf::Empty>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_HandleTcpConnection : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_HandleTcpConnection() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::appguard::AppGuardTcpConnection, ::appguard::AppGuardTcpResponse>(
            [this](::grpc_impl::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::appguard::AppGuardTcpConnection, ::appguard::AppGuardTcpResponse>* streamer) {
                       return this->StreamedHandleTcpConnection(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_HandleTcpConnection() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status HandleTcpConnection(::grpc::ServerContext* /*context*/, const ::appguard::AppGuardTcpConnection* /*request*/, ::appguard::AppGuardTcpResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedHandleTcpConnection(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::appguard::AppGuardTcpConnection,::appguard::AppGuardTcpResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_HandleHttpRequest : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_HandleHttpRequest() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::appguard::AppGuardHttpRequest, ::appguard::AppGuardResponse>(
            [this](::grpc_impl::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::appguard::AppGuardHttpRequest, ::appguard::AppGuardResponse>* streamer) {
                       return this->StreamedHandleHttpRequest(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_HandleHttpRequest() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status HandleHttpRequest(::grpc::ServerContext* /*context*/, const ::appguard::AppGuardHttpRequest* /*request*/, ::appguard::AppGuardResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedHandleHttpRequest(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::appguard::AppGuardHttpRequest,::appguard::AppGuardResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_HandleHttpResponse : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_HandleHttpResponse() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler<
          ::appguard::AppGuardHttpResponse, ::appguard::AppGuardResponse>(
            [this](::grpc_impl::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::appguard::AppGuardHttpResponse, ::appguard::AppGuardResponse>* streamer) {
                       return this->StreamedHandleHttpResponse(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_HandleHttpResponse() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status HandleHttpResponse(::grpc::ServerContext* /*context*/, const ::appguard::AppGuardHttpResponse* /*request*/, ::appguard::AppGuardResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedHandleHttpResponse(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::appguard::AppGuardHttpResponse,::appguard::AppGuardResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_HandleSmtpRequest : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_HandleSmtpRequest() {
      ::grpc::Service::MarkMethodStreamed(5,
        new ::grpc::internal::StreamedUnaryHandler<
          ::appguard::AppGuardSmtpRequest, ::appguard::AppGuardResponse>(
            [this](::grpc_impl::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::appguard::AppGuardSmtpRequest, ::appguard::AppGuardResponse>* streamer) {
                       return this->StreamedHandleSmtpRequest(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_HandleSmtpRequest() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status HandleSmtpRequest(::grpc::ServerContext* /*context*/, const ::appguard::AppGuardSmtpRequest* /*request*/, ::appguard::AppGuardResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedHandleSmtpRequest(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::appguard::AppGuardSmtpRequest,::appguard::AppGuardResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_HandleSmtpResponse : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_HandleSmtpResponse() {
      ::grpc::Service::MarkMethodStreamed(6,
        new ::grpc::internal::StreamedUnaryHandler<
          ::appguard::AppGuardSmtpResponse, ::appguard::AppGuardResponse>(
            [this](::grpc_impl::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::appguard::AppGuardSmtpResponse, ::appguard::AppGuardResponse>* streamer) {
                       return this->StreamedHandleSmtpResponse(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_HandleSmtpResponse() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status HandleSmtpResponse(::grpc::ServerContext* /*context*/, const ::appguard::AppGuardSmtpResponse* /*request*/, ::appguard::AppGuardResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedHandleSmtpResponse(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::appguard::AppGuardSmtpResponse,::appguard::AppGuardResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_FirewallDefaultsRequest : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_FirewallDefaultsRequest() {
      ::grpc::Service::MarkMethodStreamed(7,
        new ::grpc::internal::StreamedUnaryHandler<
          ::appguard::Token, ::appguard_commands::FirewallDefaults>(
            [this](::grpc_impl::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::appguard::Token, ::appguard_commands::FirewallDefaults>* streamer) {
                       return this->StreamedFirewallDefaultsRequest(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_FirewallDefaultsRequest() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status FirewallDefaultsRequest(::grpc::ServerContext* /*context*/, const ::appguard::Token* /*request*/, ::appguard_commands::FirewallDefaults* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedFirewallDefaultsRequest(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::appguard::Token,::appguard_commands::FirewallDefaults>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_HandleLogs<WithStreamedUnaryMethod_HandleTcpConnection<WithStreamedUnaryMethod_HandleHttpRequest<WithStreamedUnaryMethod_HandleHttpResponse<WithStreamedUnaryMethod_HandleSmtpRequest<WithStreamedUnaryMethod_HandleSmtpResponse<WithStreamedUnaryMethod_FirewallDefaultsRequest<Service > > > > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_HandleLogs<WithStreamedUnaryMethod_HandleTcpConnection<WithStreamedUnaryMethod_HandleHttpRequest<WithStreamedUnaryMethod_HandleHttpResponse<WithStreamedUnaryMethod_HandleSmtpRequest<WithStreamedUnaryMethod_HandleSmtpResponse<WithStreamedUnaryMethod_FirewallDefaultsRequest<Service > > > > > > > StreamedService;
};

}  // namespace appguard


#endif  // GRPC_appguard_2eproto__INCLUDED
