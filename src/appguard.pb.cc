// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: appguard.proto

#include "appguard.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace appguard {
PROTOBUF_CONSTEXPR HeartbeatRequest::HeartbeatRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.app_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.app_secret_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct HeartbeatRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR HeartbeatRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~HeartbeatRequestDefaultTypeInternal() {}
  union {
    HeartbeatRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 HeartbeatRequestDefaultTypeInternal _HeartbeatRequest_default_instance_;
PROTOBUF_CONSTEXPR HeartbeatResponse::HeartbeatResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.token_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.status_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct HeartbeatResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR HeartbeatResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~HeartbeatResponseDefaultTypeInternal() {}
  union {
    HeartbeatResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 HeartbeatResponseDefaultTypeInternal _HeartbeatResponse_default_instance_;
PROTOBUF_CONSTEXPR AppGuardTcpConnection::AppGuardTcpConnection(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.token_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.source_ip_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.destination_ip_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.protocol_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.source_port_)*/0u
  , /*decltype(_impl_.destination_port_)*/0u} {}
struct AppGuardTcpConnectionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AppGuardTcpConnectionDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AppGuardTcpConnectionDefaultTypeInternal() {}
  union {
    AppGuardTcpConnection _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AppGuardTcpConnectionDefaultTypeInternal _AppGuardTcpConnection_default_instance_;
PROTOBUF_CONSTEXPR AppGuardIpInfo::AppGuardIpInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.ip_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.country_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.asn_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.org_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.continent_code_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.city_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.region_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.postal_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.timezone_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.blacklist_)*/false} {}
struct AppGuardIpInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AppGuardIpInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AppGuardIpInfoDefaultTypeInternal() {}
  union {
    AppGuardIpInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AppGuardIpInfoDefaultTypeInternal _AppGuardIpInfo_default_instance_;
PROTOBUF_CONSTEXPR AppGuardTcpInfo::AppGuardTcpInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.connection_)*/nullptr
  , /*decltype(_impl_.ip_info_)*/nullptr
  , /*decltype(_impl_.tcp_id_)*/uint64_t{0u}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct AppGuardTcpInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AppGuardTcpInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AppGuardTcpInfoDefaultTypeInternal() {}
  union {
    AppGuardTcpInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AppGuardTcpInfoDefaultTypeInternal _AppGuardTcpInfo_default_instance_;
PROTOBUF_CONSTEXPR AppGuardHttpRequest_HeadersEntry_DoNotUse::AppGuardHttpRequest_HeadersEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct AppGuardHttpRequest_HeadersEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AppGuardHttpRequest_HeadersEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AppGuardHttpRequest_HeadersEntry_DoNotUseDefaultTypeInternal() {}
  union {
    AppGuardHttpRequest_HeadersEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AppGuardHttpRequest_HeadersEntry_DoNotUseDefaultTypeInternal _AppGuardHttpRequest_HeadersEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR AppGuardHttpRequest_QueryEntry_DoNotUse::AppGuardHttpRequest_QueryEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct AppGuardHttpRequest_QueryEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AppGuardHttpRequest_QueryEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AppGuardHttpRequest_QueryEntry_DoNotUseDefaultTypeInternal() {}
  union {
    AppGuardHttpRequest_QueryEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AppGuardHttpRequest_QueryEntry_DoNotUseDefaultTypeInternal _AppGuardHttpRequest_QueryEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR AppGuardHttpRequest::AppGuardHttpRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.headers_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_.query_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_.token_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.original_url_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.method_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.body_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.tcp_info_)*/nullptr} {}
struct AppGuardHttpRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AppGuardHttpRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AppGuardHttpRequestDefaultTypeInternal() {}
  union {
    AppGuardHttpRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AppGuardHttpRequestDefaultTypeInternal _AppGuardHttpRequest_default_instance_;
PROTOBUF_CONSTEXPR AppGuardHttpResponse_HeadersEntry_DoNotUse::AppGuardHttpResponse_HeadersEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct AppGuardHttpResponse_HeadersEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AppGuardHttpResponse_HeadersEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AppGuardHttpResponse_HeadersEntry_DoNotUseDefaultTypeInternal() {}
  union {
    AppGuardHttpResponse_HeadersEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AppGuardHttpResponse_HeadersEntry_DoNotUseDefaultTypeInternal _AppGuardHttpResponse_HeadersEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR AppGuardHttpResponse::AppGuardHttpResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.headers_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_.token_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.tcp_info_)*/nullptr
  , /*decltype(_impl_.code_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct AppGuardHttpResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AppGuardHttpResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AppGuardHttpResponseDefaultTypeInternal() {}
  union {
    AppGuardHttpResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AppGuardHttpResponseDefaultTypeInternal _AppGuardHttpResponse_default_instance_;
PROTOBUF_CONSTEXPR AppGuardSmtpRequest_HeadersEntry_DoNotUse::AppGuardSmtpRequest_HeadersEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct AppGuardSmtpRequest_HeadersEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AppGuardSmtpRequest_HeadersEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AppGuardSmtpRequest_HeadersEntry_DoNotUseDefaultTypeInternal() {}
  union {
    AppGuardSmtpRequest_HeadersEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AppGuardSmtpRequest_HeadersEntry_DoNotUseDefaultTypeInternal _AppGuardSmtpRequest_HeadersEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR AppGuardSmtpRequest::AppGuardSmtpRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.headers_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_.token_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.body_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.tcp_info_)*/nullptr} {}
struct AppGuardSmtpRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AppGuardSmtpRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AppGuardSmtpRequestDefaultTypeInternal() {}
  union {
    AppGuardSmtpRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AppGuardSmtpRequestDefaultTypeInternal _AppGuardSmtpRequest_default_instance_;
PROTOBUF_CONSTEXPR AppGuardSmtpResponse::AppGuardSmtpResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.token_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.tcp_info_)*/nullptr
  , /*decltype(_impl_.code_)*/0u} {}
struct AppGuardSmtpResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AppGuardSmtpResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AppGuardSmtpResponseDefaultTypeInternal() {}
  union {
    AppGuardSmtpResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AppGuardSmtpResponseDefaultTypeInternal _AppGuardSmtpResponse_default_instance_;
PROTOBUF_CONSTEXPR AppGuardResponse::AppGuardResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.policy_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct AppGuardResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AppGuardResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AppGuardResponseDefaultTypeInternal() {}
  union {
    AppGuardResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AppGuardResponseDefaultTypeInternal _AppGuardResponse_default_instance_;
PROTOBUF_CONSTEXPR AppGuardTcpResponse::AppGuardTcpResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.tcp_info_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct AppGuardTcpResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AppGuardTcpResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AppGuardTcpResponseDefaultTypeInternal() {}
  union {
    AppGuardTcpResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AppGuardTcpResponseDefaultTypeInternal _AppGuardTcpResponse_default_instance_;
}  // namespace appguard
static ::_pb::Metadata file_level_metadata_appguard_2eproto[15];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_appguard_2eproto[2];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_appguard_2eproto = nullptr;

const uint32_t TableStruct_appguard_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::appguard::HeartbeatRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::appguard::HeartbeatRequest, _impl_.app_id_),
  PROTOBUF_FIELD_OFFSET(::appguard::HeartbeatRequest, _impl_.app_secret_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::appguard::HeartbeatResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::appguard::HeartbeatResponse, _impl_.token_),
  PROTOBUF_FIELD_OFFSET(::appguard::HeartbeatResponse, _impl_.status_),
  PROTOBUF_FIELD_OFFSET(::appguard::AppGuardTcpConnection, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::appguard::AppGuardTcpConnection, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::appguard::AppGuardTcpConnection, _impl_.token_),
  PROTOBUF_FIELD_OFFSET(::appguard::AppGuardTcpConnection, _impl_.source_ip_),
  PROTOBUF_FIELD_OFFSET(::appguard::AppGuardTcpConnection, _impl_.source_port_),
  PROTOBUF_FIELD_OFFSET(::appguard::AppGuardTcpConnection, _impl_.destination_ip_),
  PROTOBUF_FIELD_OFFSET(::appguard::AppGuardTcpConnection, _impl_.destination_port_),
  PROTOBUF_FIELD_OFFSET(::appguard::AppGuardTcpConnection, _impl_.protocol_),
  ~0u,
  0,
  2,
  1,
  3,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::appguard::AppGuardIpInfo, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::appguard::AppGuardIpInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::appguard::AppGuardIpInfo, _impl_.ip_),
  PROTOBUF_FIELD_OFFSET(::appguard::AppGuardIpInfo, _impl_.country_),
  PROTOBUF_FIELD_OFFSET(::appguard::AppGuardIpInfo, _impl_.asn_),
  PROTOBUF_FIELD_OFFSET(::appguard::AppGuardIpInfo, _impl_.org_),
  PROTOBUF_FIELD_OFFSET(::appguard::AppGuardIpInfo, _impl_.continent_code_),
  PROTOBUF_FIELD_OFFSET(::appguard::AppGuardIpInfo, _impl_.city_),
  PROTOBUF_FIELD_OFFSET(::appguard::AppGuardIpInfo, _impl_.region_),
  PROTOBUF_FIELD_OFFSET(::appguard::AppGuardIpInfo, _impl_.postal_),
  PROTOBUF_FIELD_OFFSET(::appguard::AppGuardIpInfo, _impl_.timezone_),
  PROTOBUF_FIELD_OFFSET(::appguard::AppGuardIpInfo, _impl_.blacklist_),
  ~0u,
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  ~0u,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::appguard::AppGuardTcpInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::appguard::AppGuardTcpInfo, _impl_.connection_),
  PROTOBUF_FIELD_OFFSET(::appguard::AppGuardTcpInfo, _impl_.ip_info_),
  PROTOBUF_FIELD_OFFSET(::appguard::AppGuardTcpInfo, _impl_.tcp_id_),
  PROTOBUF_FIELD_OFFSET(::appguard::AppGuardHttpRequest_HeadersEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::appguard::AppGuardHttpRequest_HeadersEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::appguard::AppGuardHttpRequest_HeadersEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::appguard::AppGuardHttpRequest_HeadersEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::appguard::AppGuardHttpRequest_QueryEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::appguard::AppGuardHttpRequest_QueryEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::appguard::AppGuardHttpRequest_QueryEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::appguard::AppGuardHttpRequest_QueryEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::appguard::AppGuardHttpRequest, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::appguard::AppGuardHttpRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::appguard::AppGuardHttpRequest, _impl_.token_),
  PROTOBUF_FIELD_OFFSET(::appguard::AppGuardHttpRequest, _impl_.original_url_),
  PROTOBUF_FIELD_OFFSET(::appguard::AppGuardHttpRequest, _impl_.headers_),
  PROTOBUF_FIELD_OFFSET(::appguard::AppGuardHttpRequest, _impl_.method_),
  PROTOBUF_FIELD_OFFSET(::appguard::AppGuardHttpRequest, _impl_.body_),
  PROTOBUF_FIELD_OFFSET(::appguard::AppGuardHttpRequest, _impl_.query_),
  PROTOBUF_FIELD_OFFSET(::appguard::AppGuardHttpRequest, _impl_.tcp_info_),
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  0,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::appguard::AppGuardHttpResponse_HeadersEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::appguard::AppGuardHttpResponse_HeadersEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::appguard::AppGuardHttpResponse_HeadersEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::appguard::AppGuardHttpResponse_HeadersEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::appguard::AppGuardHttpResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::appguard::AppGuardHttpResponse, _impl_.token_),
  PROTOBUF_FIELD_OFFSET(::appguard::AppGuardHttpResponse, _impl_.code_),
  PROTOBUF_FIELD_OFFSET(::appguard::AppGuardHttpResponse, _impl_.headers_),
  PROTOBUF_FIELD_OFFSET(::appguard::AppGuardHttpResponse, _impl_.tcp_info_),
  PROTOBUF_FIELD_OFFSET(::appguard::AppGuardSmtpRequest_HeadersEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::appguard::AppGuardSmtpRequest_HeadersEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::appguard::AppGuardSmtpRequest_HeadersEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::appguard::AppGuardSmtpRequest_HeadersEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::appguard::AppGuardSmtpRequest, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::appguard::AppGuardSmtpRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::appguard::AppGuardSmtpRequest, _impl_.token_),
  PROTOBUF_FIELD_OFFSET(::appguard::AppGuardSmtpRequest, _impl_.headers_),
  PROTOBUF_FIELD_OFFSET(::appguard::AppGuardSmtpRequest, _impl_.body_),
  PROTOBUF_FIELD_OFFSET(::appguard::AppGuardSmtpRequest, _impl_.tcp_info_),
  ~0u,
  ~0u,
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::appguard::AppGuardSmtpResponse, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::appguard::AppGuardSmtpResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::appguard::AppGuardSmtpResponse, _impl_.token_),
  PROTOBUF_FIELD_OFFSET(::appguard::AppGuardSmtpResponse, _impl_.code_),
  PROTOBUF_FIELD_OFFSET(::appguard::AppGuardSmtpResponse, _impl_.tcp_info_),
  ~0u,
  0,
  ~0u,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::appguard::AppGuardResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::appguard::AppGuardResponse, _impl_.policy_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::appguard::AppGuardTcpResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::appguard::AppGuardTcpResponse, _impl_.tcp_info_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::appguard::HeartbeatRequest)},
  { 8, -1, -1, sizeof(::appguard::HeartbeatResponse)},
  { 16, 28, -1, sizeof(::appguard::AppGuardTcpConnection)},
  { 34, 50, -1, sizeof(::appguard::AppGuardIpInfo)},
  { 60, -1, -1, sizeof(::appguard::AppGuardTcpInfo)},
  { 69, 77, -1, sizeof(::appguard::AppGuardHttpRequest_HeadersEntry_DoNotUse)},
  { 79, 87, -1, sizeof(::appguard::AppGuardHttpRequest_QueryEntry_DoNotUse)},
  { 89, 102, -1, sizeof(::appguard::AppGuardHttpRequest)},
  { 109, 117, -1, sizeof(::appguard::AppGuardHttpResponse_HeadersEntry_DoNotUse)},
  { 119, -1, -1, sizeof(::appguard::AppGuardHttpResponse)},
  { 129, 137, -1, sizeof(::appguard::AppGuardSmtpRequest_HeadersEntry_DoNotUse)},
  { 139, 149, -1, sizeof(::appguard::AppGuardSmtpRequest)},
  { 153, 162, -1, sizeof(::appguard::AppGuardSmtpResponse)},
  { 165, -1, -1, sizeof(::appguard::AppGuardResponse)},
  { 172, -1, -1, sizeof(::appguard::AppGuardTcpResponse)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::appguard::_HeartbeatRequest_default_instance_._instance,
  &::appguard::_HeartbeatResponse_default_instance_._instance,
  &::appguard::_AppGuardTcpConnection_default_instance_._instance,
  &::appguard::_AppGuardIpInfo_default_instance_._instance,
  &::appguard::_AppGuardTcpInfo_default_instance_._instance,
  &::appguard::_AppGuardHttpRequest_HeadersEntry_DoNotUse_default_instance_._instance,
  &::appguard::_AppGuardHttpRequest_QueryEntry_DoNotUse_default_instance_._instance,
  &::appguard::_AppGuardHttpRequest_default_instance_._instance,
  &::appguard::_AppGuardHttpResponse_HeadersEntry_DoNotUse_default_instance_._instance,
  &::appguard::_AppGuardHttpResponse_default_instance_._instance,
  &::appguard::_AppGuardSmtpRequest_HeadersEntry_DoNotUse_default_instance_._instance,
  &::appguard::_AppGuardSmtpRequest_default_instance_._instance,
  &::appguard::_AppGuardSmtpResponse_default_instance_._instance,
  &::appguard::_AppGuardResponse_default_instance_._instance,
  &::appguard::_AppGuardTcpResponse_default_instance_._instance,
};

const char descriptor_table_protodef_appguard_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\016appguard.proto\022\010appguard\"6\n\020HeartbeatR"
  "equest\022\016\n\006app_id\030\001 \001(\t\022\022\n\napp_secret\030\002 \001"
  "(\t\"J\n\021HeartbeatResponse\022\r\n\005token\030\001 \001(\t\022&"
  "\n\006status\030\002 \001(\0162\026.appguard.DeviceStatus\"\354"
  "\001\n\025AppGuardTcpConnection\022\r\n\005token\030\001 \001(\t\022"
  "\026\n\tsource_ip\030\002 \001(\tH\000\210\001\001\022\030\n\013source_port\030\003"
  " \001(\rH\001\210\001\001\022\033\n\016destination_ip\030\004 \001(\tH\002\210\001\001\022\035"
  "\n\020destination_port\030\005 \001(\rH\003\210\001\001\022\020\n\010protoco"
  "l\030\006 \001(\tB\014\n\n_source_ipB\016\n\014_source_portB\021\n"
  "\017_destination_ipB\023\n\021_destination_port\"\265\002"
  "\n\016AppGuardIpInfo\022\n\n\002ip\030\001 \001(\t\022\024\n\007country\030"
  "\002 \001(\tH\000\210\001\001\022\020\n\003asn\030\003 \001(\tH\001\210\001\001\022\020\n\003org\030\004 \001("
  "\tH\002\210\001\001\022\033\n\016continent_code\030\005 \001(\tH\003\210\001\001\022\021\n\004c"
  "ity\030\006 \001(\tH\004\210\001\001\022\023\n\006region\030\007 \001(\tH\005\210\001\001\022\023\n\006p"
  "ostal\030\010 \001(\tH\006\210\001\001\022\025\n\010timezone\030\t \001(\tH\007\210\001\001\022"
  "\021\n\tblacklist\030d \001(\010B\n\n\010_countryB\006\n\004_asnB\006"
  "\n\004_orgB\021\n\017_continent_codeB\007\n\005_cityB\t\n\007_r"
  "egionB\t\n\007_postalB\013\n\t_timezone\"\201\001\n\017AppGua"
  "rdTcpInfo\0223\n\nconnection\030\001 \001(\0132\037.appguard"
  ".AppGuardTcpConnection\022)\n\007ip_info\030\002 \001(\0132"
  "\030.appguard.AppGuardIpInfo\022\016\n\006tcp_id\030\003 \001("
  "\004\"\347\002\n\023AppGuardHttpRequest\022\r\n\005token\030\001 \001(\t"
  "\022\024\n\014original_url\030\002 \001(\t\022;\n\007headers\030\003 \003(\0132"
  "*.appguard.AppGuardHttpRequest.HeadersEn"
  "try\022\016\n\006method\030\004 \001(\t\022\021\n\004body\030\005 \001(\tH\000\210\001\001\0227"
  "\n\005query\030\006 \003(\0132(.appguard.AppGuardHttpReq"
  "uest.QueryEntry\022+\n\010tcp_info\030d \001(\0132\031.appg"
  "uard.AppGuardTcpInfo\032.\n\014HeadersEntry\022\013\n\003"
  "key\030\001 \001(\t\022\r\n\005value\030\002 \001(\t:\0028\001\032,\n\nQueryEnt"
  "ry\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\t:\0028\001B\007\n\005_b"
  "ody\"\316\001\n\024AppGuardHttpResponse\022\r\n\005token\030\001 "
  "\001(\t\022\014\n\004code\030\002 \001(\r\022<\n\007headers\030\003 \003(\0132+.app"
  "guard.AppGuardHttpResponse.HeadersEntry\022"
  "+\n\010tcp_info\030d \001(\0132\031.appguard.AppGuardTcp"
  "Info\032.\n\014HeadersEntry\022\013\n\003key\030\001 \001(\t\022\r\n\005val"
  "ue\030\002 \001(\t:\0028\001\"\332\001\n\023AppGuardSmtpRequest\022\r\n\005"
  "token\030\001 \001(\t\022;\n\007headers\030\002 \003(\0132*.appguard."
  "AppGuardSmtpRequest.HeadersEntry\022\021\n\004body"
  "\030\003 \001(\tH\000\210\001\001\022+\n\010tcp_info\030d \001(\0132\031.appguard"
  ".AppGuardTcpInfo\032.\n\014HeadersEntry\022\013\n\003key\030"
  "\001 \001(\t\022\r\n\005value\030\002 \001(\t:\0028\001B\007\n\005_body\"n\n\024App"
  "GuardSmtpResponse\022\r\n\005token\030\001 \001(\t\022\021\n\004code"
  "\030\002 \001(\rH\000\210\001\001\022+\n\010tcp_info\030d \001(\0132\031.appguard"
  ".AppGuardTcpInfoB\007\n\005_code\"<\n\020AppGuardRes"
  "ponse\022(\n\006policy\030\002 \001(\0162\030.appguard.Firewal"
  "lPolicy\"B\n\023AppGuardTcpResponse\022+\n\010tcp_in"
  "fo\030\001 \001(\0132\031.appguard.AppGuardTcpInfo*P\n\014D"
  "eviceStatus\022\t\n\005DRAFT\020\000\022\n\n\006ACTIVE\020\001\022\014\n\010AR"
  "CHIVED\020\002\022\013\n\007DELETED\020\003\022\016\n\nDS_UNKNOWN\020\004*2\n"
  "\016FirewallPolicy\022\013\n\007UNKNOWN\020\000\022\t\n\005ALLOW\020\001\022"
  "\010\n\004DENY\020\0022\355\003\n\010AppGuard\022F\n\tHeartbeat\022\032.ap"
  "pguard.HeartbeatRequest\032\033.appguard.Heart"
  "beatResponse0\001\022U\n\023HandleTcpConnection\022\037."
  "appguard.AppGuardTcpConnection\032\035.appguar"
  "d.AppGuardTcpResponse\022N\n\021HandleHttpReque"
  "st\022\035.appguard.AppGuardHttpRequest\032\032.appg"
  "uard.AppGuardResponse\022P\n\022HandleHttpRespo"
  "nse\022\036.appguard.AppGuardHttpResponse\032\032.ap"
  "pguard.AppGuardResponse\022N\n\021HandleSmtpReq"
  "uest\022\035.appguard.AppGuardSmtpRequest\032\032.ap"
  "pguard.AppGuardResponse\022P\n\022HandleSmtpRes"
  "ponse\022\036.appguard.AppGuardSmtpResponse\032\032."
  "appguard.AppGuardResponseb\006proto3"
  ;
static ::_pbi::once_flag descriptor_table_appguard_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_appguard_2eproto = {
    false, false, 2513, descriptor_table_protodef_appguard_2eproto,
    "appguard.proto",
    &descriptor_table_appguard_2eproto_once, nullptr, 0, 15,
    schemas, file_default_instances, TableStruct_appguard_2eproto::offsets,
    file_level_metadata_appguard_2eproto, file_level_enum_descriptors_appguard_2eproto,
    file_level_service_descriptors_appguard_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_appguard_2eproto_getter() {
  return &descriptor_table_appguard_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_appguard_2eproto(&descriptor_table_appguard_2eproto);
namespace appguard {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DeviceStatus_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_appguard_2eproto);
  return file_level_enum_descriptors_appguard_2eproto[0];
}
bool DeviceStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* FirewallPolicy_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_appguard_2eproto);
  return file_level_enum_descriptors_appguard_2eproto[1];
}
bool FirewallPolicy_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class HeartbeatRequest::_Internal {
 public:
};

HeartbeatRequest::HeartbeatRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:appguard.HeartbeatRequest)
}
HeartbeatRequest::HeartbeatRequest(const HeartbeatRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  HeartbeatRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.app_id_){}
    , decltype(_impl_.app_secret_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.app_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.app_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_app_id().empty()) {
    _this->_impl_.app_id_.Set(from._internal_app_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.app_secret_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.app_secret_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_app_secret().empty()) {
    _this->_impl_.app_secret_.Set(from._internal_app_secret(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:appguard.HeartbeatRequest)
}

inline void HeartbeatRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.app_id_){}
    , decltype(_impl_.app_secret_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.app_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.app_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.app_secret_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.app_secret_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

HeartbeatRequest::~HeartbeatRequest() {
  // @@protoc_insertion_point(destructor:appguard.HeartbeatRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void HeartbeatRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.app_id_.Destroy();
  _impl_.app_secret_.Destroy();
}

void HeartbeatRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void HeartbeatRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:appguard.HeartbeatRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.app_id_.ClearToEmpty();
  _impl_.app_secret_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HeartbeatRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_app_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "appguard.HeartbeatRequest.app_id"));
        } else
          goto handle_unusual;
        continue;
      // string app_secret = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_app_secret();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "appguard.HeartbeatRequest.app_secret"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* HeartbeatRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:appguard.HeartbeatRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string app_id = 1;
  if (!this->_internal_app_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_app_id().data(), static_cast<int>(this->_internal_app_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "appguard.HeartbeatRequest.app_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_app_id(), target);
  }

  // string app_secret = 2;
  if (!this->_internal_app_secret().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_app_secret().data(), static_cast<int>(this->_internal_app_secret().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "appguard.HeartbeatRequest.app_secret");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_app_secret(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:appguard.HeartbeatRequest)
  return target;
}

size_t HeartbeatRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:appguard.HeartbeatRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string app_id = 1;
  if (!this->_internal_app_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_app_id());
  }

  // string app_secret = 2;
  if (!this->_internal_app_secret().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_app_secret());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData HeartbeatRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    HeartbeatRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*HeartbeatRequest::GetClassData() const { return &_class_data_; }


void HeartbeatRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<HeartbeatRequest*>(&to_msg);
  auto& from = static_cast<const HeartbeatRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:appguard.HeartbeatRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_app_id().empty()) {
    _this->_internal_set_app_id(from._internal_app_id());
  }
  if (!from._internal_app_secret().empty()) {
    _this->_internal_set_app_secret(from._internal_app_secret());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void HeartbeatRequest::CopyFrom(const HeartbeatRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:appguard.HeartbeatRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HeartbeatRequest::IsInitialized() const {
  return true;
}

void HeartbeatRequest::InternalSwap(HeartbeatRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.app_id_, lhs_arena,
      &other->_impl_.app_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.app_secret_, lhs_arena,
      &other->_impl_.app_secret_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata HeartbeatRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_appguard_2eproto_getter, &descriptor_table_appguard_2eproto_once,
      file_level_metadata_appguard_2eproto[0]);
}

// ===================================================================

class HeartbeatResponse::_Internal {
 public:
};

HeartbeatResponse::HeartbeatResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:appguard.HeartbeatResponse)
}
HeartbeatResponse::HeartbeatResponse(const HeartbeatResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  HeartbeatResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.token_){}
    , decltype(_impl_.status_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.token_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.token_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_token().empty()) {
    _this->_impl_.token_.Set(from._internal_token(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.status_ = from._impl_.status_;
  // @@protoc_insertion_point(copy_constructor:appguard.HeartbeatResponse)
}

inline void HeartbeatResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.token_){}
    , decltype(_impl_.status_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.token_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.token_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

HeartbeatResponse::~HeartbeatResponse() {
  // @@protoc_insertion_point(destructor:appguard.HeartbeatResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void HeartbeatResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.token_.Destroy();
}

void HeartbeatResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void HeartbeatResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:appguard.HeartbeatResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.token_.ClearToEmpty();
  _impl_.status_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HeartbeatResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string token = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_token();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "appguard.HeartbeatResponse.token"));
        } else
          goto handle_unusual;
        continue;
      // .appguard.DeviceStatus status = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_status(static_cast<::appguard::DeviceStatus>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* HeartbeatResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:appguard.HeartbeatResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string token = 1;
  if (!this->_internal_token().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_token().data(), static_cast<int>(this->_internal_token().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "appguard.HeartbeatResponse.token");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_token(), target);
  }

  // .appguard.DeviceStatus status = 2;
  if (this->_internal_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_status(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:appguard.HeartbeatResponse)
  return target;
}

size_t HeartbeatResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:appguard.HeartbeatResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string token = 1;
  if (!this->_internal_token().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_token());
  }

  // .appguard.DeviceStatus status = 2;
  if (this->_internal_status() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_status());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData HeartbeatResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    HeartbeatResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*HeartbeatResponse::GetClassData() const { return &_class_data_; }


void HeartbeatResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<HeartbeatResponse*>(&to_msg);
  auto& from = static_cast<const HeartbeatResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:appguard.HeartbeatResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_token().empty()) {
    _this->_internal_set_token(from._internal_token());
  }
  if (from._internal_status() != 0) {
    _this->_internal_set_status(from._internal_status());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void HeartbeatResponse::CopyFrom(const HeartbeatResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:appguard.HeartbeatResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HeartbeatResponse::IsInitialized() const {
  return true;
}

void HeartbeatResponse::InternalSwap(HeartbeatResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.token_, lhs_arena,
      &other->_impl_.token_, rhs_arena
  );
  swap(_impl_.status_, other->_impl_.status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata HeartbeatResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_appguard_2eproto_getter, &descriptor_table_appguard_2eproto_once,
      file_level_metadata_appguard_2eproto[1]);
}

// ===================================================================

class AppGuardTcpConnection::_Internal {
 public:
  using HasBits = decltype(std::declval<AppGuardTcpConnection>()._impl_._has_bits_);
  static void set_has_source_ip(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_source_port(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_destination_ip(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_destination_port(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

AppGuardTcpConnection::AppGuardTcpConnection(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:appguard.AppGuardTcpConnection)
}
AppGuardTcpConnection::AppGuardTcpConnection(const AppGuardTcpConnection& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  AppGuardTcpConnection* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.token_){}
    , decltype(_impl_.source_ip_){}
    , decltype(_impl_.destination_ip_){}
    , decltype(_impl_.protocol_){}
    , decltype(_impl_.source_port_){}
    , decltype(_impl_.destination_port_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.token_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.token_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_token().empty()) {
    _this->_impl_.token_.Set(from._internal_token(), 
      _this->GetArenaForAllocation());
  }
  _impl_.source_ip_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.source_ip_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_source_ip()) {
    _this->_impl_.source_ip_.Set(from._internal_source_ip(), 
      _this->GetArenaForAllocation());
  }
  _impl_.destination_ip_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.destination_ip_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_destination_ip()) {
    _this->_impl_.destination_ip_.Set(from._internal_destination_ip(), 
      _this->GetArenaForAllocation());
  }
  _impl_.protocol_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.protocol_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_protocol().empty()) {
    _this->_impl_.protocol_.Set(from._internal_protocol(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.source_port_, &from._impl_.source_port_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.destination_port_) -
    reinterpret_cast<char*>(&_impl_.source_port_)) + sizeof(_impl_.destination_port_));
  // @@protoc_insertion_point(copy_constructor:appguard.AppGuardTcpConnection)
}

inline void AppGuardTcpConnection::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.token_){}
    , decltype(_impl_.source_ip_){}
    , decltype(_impl_.destination_ip_){}
    , decltype(_impl_.protocol_){}
    , decltype(_impl_.source_port_){0u}
    , decltype(_impl_.destination_port_){0u}
  };
  _impl_.token_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.token_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.source_ip_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.source_ip_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.destination_ip_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.destination_ip_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.protocol_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.protocol_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

AppGuardTcpConnection::~AppGuardTcpConnection() {
  // @@protoc_insertion_point(destructor:appguard.AppGuardTcpConnection)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AppGuardTcpConnection::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.token_.Destroy();
  _impl_.source_ip_.Destroy();
  _impl_.destination_ip_.Destroy();
  _impl_.protocol_.Destroy();
}

void AppGuardTcpConnection::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AppGuardTcpConnection::Clear() {
// @@protoc_insertion_point(message_clear_start:appguard.AppGuardTcpConnection)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.token_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.source_ip_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.destination_ip_.ClearNonDefaultToEmpty();
    }
  }
  _impl_.protocol_.ClearToEmpty();
  if (cached_has_bits & 0x0000000cu) {
    ::memset(&_impl_.source_port_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.destination_port_) -
        reinterpret_cast<char*>(&_impl_.source_port_)) + sizeof(_impl_.destination_port_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AppGuardTcpConnection::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string token = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_token();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "appguard.AppGuardTcpConnection.token"));
        } else
          goto handle_unusual;
        continue;
      // optional string source_ip = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_source_ip();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "appguard.AppGuardTcpConnection.source_ip"));
        } else
          goto handle_unusual;
        continue;
      // optional uint32 source_port = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_source_port(&has_bits);
          _impl_.source_port_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string destination_ip = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_destination_ip();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "appguard.AppGuardTcpConnection.destination_ip"));
        } else
          goto handle_unusual;
        continue;
      // optional uint32 destination_port = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_destination_port(&has_bits);
          _impl_.destination_port_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string protocol = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_protocol();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "appguard.AppGuardTcpConnection.protocol"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AppGuardTcpConnection::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:appguard.AppGuardTcpConnection)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string token = 1;
  if (!this->_internal_token().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_token().data(), static_cast<int>(this->_internal_token().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "appguard.AppGuardTcpConnection.token");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_token(), target);
  }

  // optional string source_ip = 2;
  if (_internal_has_source_ip()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_source_ip().data(), static_cast<int>(this->_internal_source_ip().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "appguard.AppGuardTcpConnection.source_ip");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_source_ip(), target);
  }

  // optional uint32 source_port = 3;
  if (_internal_has_source_port()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_source_port(), target);
  }

  // optional string destination_ip = 4;
  if (_internal_has_destination_ip()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_destination_ip().data(), static_cast<int>(this->_internal_destination_ip().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "appguard.AppGuardTcpConnection.destination_ip");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_destination_ip(), target);
  }

  // optional uint32 destination_port = 5;
  if (_internal_has_destination_port()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_destination_port(), target);
  }

  // string protocol = 6;
  if (!this->_internal_protocol().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_protocol().data(), static_cast<int>(this->_internal_protocol().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "appguard.AppGuardTcpConnection.protocol");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_protocol(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:appguard.AppGuardTcpConnection)
  return target;
}

size_t AppGuardTcpConnection::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:appguard.AppGuardTcpConnection)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string token = 1;
  if (!this->_internal_token().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_token());
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string source_ip = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_source_ip());
    }

    // optional string destination_ip = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_destination_ip());
    }

  }
  // string protocol = 6;
  if (!this->_internal_protocol().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_protocol());
  }

  if (cached_has_bits & 0x0000000cu) {
    // optional uint32 source_port = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_source_port());
    }

    // optional uint32 destination_port = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_destination_port());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AppGuardTcpConnection::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    AppGuardTcpConnection::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AppGuardTcpConnection::GetClassData() const { return &_class_data_; }


void AppGuardTcpConnection::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<AppGuardTcpConnection*>(&to_msg);
  auto& from = static_cast<const AppGuardTcpConnection&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:appguard.AppGuardTcpConnection)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_token().empty()) {
    _this->_internal_set_token(from._internal_token());
  }
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_source_ip(from._internal_source_ip());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_destination_ip(from._internal_destination_ip());
    }
  }
  if (!from._internal_protocol().empty()) {
    _this->_internal_set_protocol(from._internal_protocol());
  }
  if (cached_has_bits & 0x0000000cu) {
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.source_port_ = from._impl_.source_port_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.destination_port_ = from._impl_.destination_port_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AppGuardTcpConnection::CopyFrom(const AppGuardTcpConnection& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:appguard.AppGuardTcpConnection)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AppGuardTcpConnection::IsInitialized() const {
  return true;
}

void AppGuardTcpConnection::InternalSwap(AppGuardTcpConnection* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.token_, lhs_arena,
      &other->_impl_.token_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.source_ip_, lhs_arena,
      &other->_impl_.source_ip_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.destination_ip_, lhs_arena,
      &other->_impl_.destination_ip_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.protocol_, lhs_arena,
      &other->_impl_.protocol_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AppGuardTcpConnection, _impl_.destination_port_)
      + sizeof(AppGuardTcpConnection::_impl_.destination_port_)
      - PROTOBUF_FIELD_OFFSET(AppGuardTcpConnection, _impl_.source_port_)>(
          reinterpret_cast<char*>(&_impl_.source_port_),
          reinterpret_cast<char*>(&other->_impl_.source_port_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AppGuardTcpConnection::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_appguard_2eproto_getter, &descriptor_table_appguard_2eproto_once,
      file_level_metadata_appguard_2eproto[2]);
}

// ===================================================================

class AppGuardIpInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<AppGuardIpInfo>()._impl_._has_bits_);
  static void set_has_country(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_asn(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_org(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_continent_code(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_city(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_region(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_postal(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_timezone(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
};

AppGuardIpInfo::AppGuardIpInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:appguard.AppGuardIpInfo)
}
AppGuardIpInfo::AppGuardIpInfo(const AppGuardIpInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  AppGuardIpInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.ip_){}
    , decltype(_impl_.country_){}
    , decltype(_impl_.asn_){}
    , decltype(_impl_.org_){}
    , decltype(_impl_.continent_code_){}
    , decltype(_impl_.city_){}
    , decltype(_impl_.region_){}
    , decltype(_impl_.postal_){}
    , decltype(_impl_.timezone_){}
    , decltype(_impl_.blacklist_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.ip_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.ip_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_ip().empty()) {
    _this->_impl_.ip_.Set(from._internal_ip(), 
      _this->GetArenaForAllocation());
  }
  _impl_.country_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.country_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_country()) {
    _this->_impl_.country_.Set(from._internal_country(), 
      _this->GetArenaForAllocation());
  }
  _impl_.asn_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.asn_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_asn()) {
    _this->_impl_.asn_.Set(from._internal_asn(), 
      _this->GetArenaForAllocation());
  }
  _impl_.org_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.org_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_org()) {
    _this->_impl_.org_.Set(from._internal_org(), 
      _this->GetArenaForAllocation());
  }
  _impl_.continent_code_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.continent_code_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_continent_code()) {
    _this->_impl_.continent_code_.Set(from._internal_continent_code(), 
      _this->GetArenaForAllocation());
  }
  _impl_.city_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.city_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_city()) {
    _this->_impl_.city_.Set(from._internal_city(), 
      _this->GetArenaForAllocation());
  }
  _impl_.region_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.region_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_region()) {
    _this->_impl_.region_.Set(from._internal_region(), 
      _this->GetArenaForAllocation());
  }
  _impl_.postal_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.postal_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_postal()) {
    _this->_impl_.postal_.Set(from._internal_postal(), 
      _this->GetArenaForAllocation());
  }
  _impl_.timezone_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.timezone_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_timezone()) {
    _this->_impl_.timezone_.Set(from._internal_timezone(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.blacklist_ = from._impl_.blacklist_;
  // @@protoc_insertion_point(copy_constructor:appguard.AppGuardIpInfo)
}

inline void AppGuardIpInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.ip_){}
    , decltype(_impl_.country_){}
    , decltype(_impl_.asn_){}
    , decltype(_impl_.org_){}
    , decltype(_impl_.continent_code_){}
    , decltype(_impl_.city_){}
    , decltype(_impl_.region_){}
    , decltype(_impl_.postal_){}
    , decltype(_impl_.timezone_){}
    , decltype(_impl_.blacklist_){false}
  };
  _impl_.ip_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.ip_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.country_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.country_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.asn_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.asn_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.org_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.org_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.continent_code_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.continent_code_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.city_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.city_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.region_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.region_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.postal_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.postal_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.timezone_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.timezone_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

AppGuardIpInfo::~AppGuardIpInfo() {
  // @@protoc_insertion_point(destructor:appguard.AppGuardIpInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AppGuardIpInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.ip_.Destroy();
  _impl_.country_.Destroy();
  _impl_.asn_.Destroy();
  _impl_.org_.Destroy();
  _impl_.continent_code_.Destroy();
  _impl_.city_.Destroy();
  _impl_.region_.Destroy();
  _impl_.postal_.Destroy();
  _impl_.timezone_.Destroy();
}

void AppGuardIpInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AppGuardIpInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:appguard.AppGuardIpInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.ip_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.country_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.asn_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.org_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.continent_code_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      _impl_.city_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000020u) {
      _impl_.region_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000040u) {
      _impl_.postal_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000080u) {
      _impl_.timezone_.ClearNonDefaultToEmpty();
    }
  }
  _impl_.blacklist_ = false;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AppGuardIpInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string ip = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_ip();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "appguard.AppGuardIpInfo.ip"));
        } else
          goto handle_unusual;
        continue;
      // optional string country = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_country();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "appguard.AppGuardIpInfo.country"));
        } else
          goto handle_unusual;
        continue;
      // optional string asn = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_asn();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "appguard.AppGuardIpInfo.asn"));
        } else
          goto handle_unusual;
        continue;
      // optional string org = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_org();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "appguard.AppGuardIpInfo.org"));
        } else
          goto handle_unusual;
        continue;
      // optional string continent_code = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_continent_code();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "appguard.AppGuardIpInfo.continent_code"));
        } else
          goto handle_unusual;
        continue;
      // optional string city = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_city();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "appguard.AppGuardIpInfo.city"));
        } else
          goto handle_unusual;
        continue;
      // optional string region = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_region();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "appguard.AppGuardIpInfo.region"));
        } else
          goto handle_unusual;
        continue;
      // optional string postal = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_postal();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "appguard.AppGuardIpInfo.postal"));
        } else
          goto handle_unusual;
        continue;
      // optional string timezone = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          auto str = _internal_mutable_timezone();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "appguard.AppGuardIpInfo.timezone"));
        } else
          goto handle_unusual;
        continue;
      // bool blacklist = 100;
      case 100:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.blacklist_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AppGuardIpInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:appguard.AppGuardIpInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string ip = 1;
  if (!this->_internal_ip().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_ip().data(), static_cast<int>(this->_internal_ip().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "appguard.AppGuardIpInfo.ip");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_ip(), target);
  }

  // optional string country = 2;
  if (_internal_has_country()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_country().data(), static_cast<int>(this->_internal_country().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "appguard.AppGuardIpInfo.country");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_country(), target);
  }

  // optional string asn = 3;
  if (_internal_has_asn()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_asn().data(), static_cast<int>(this->_internal_asn().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "appguard.AppGuardIpInfo.asn");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_asn(), target);
  }

  // optional string org = 4;
  if (_internal_has_org()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_org().data(), static_cast<int>(this->_internal_org().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "appguard.AppGuardIpInfo.org");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_org(), target);
  }

  // optional string continent_code = 5;
  if (_internal_has_continent_code()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_continent_code().data(), static_cast<int>(this->_internal_continent_code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "appguard.AppGuardIpInfo.continent_code");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_continent_code(), target);
  }

  // optional string city = 6;
  if (_internal_has_city()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_city().data(), static_cast<int>(this->_internal_city().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "appguard.AppGuardIpInfo.city");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_city(), target);
  }

  // optional string region = 7;
  if (_internal_has_region()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_region().data(), static_cast<int>(this->_internal_region().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "appguard.AppGuardIpInfo.region");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_region(), target);
  }

  // optional string postal = 8;
  if (_internal_has_postal()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_postal().data(), static_cast<int>(this->_internal_postal().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "appguard.AppGuardIpInfo.postal");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_postal(), target);
  }

  // optional string timezone = 9;
  if (_internal_has_timezone()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_timezone().data(), static_cast<int>(this->_internal_timezone().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "appguard.AppGuardIpInfo.timezone");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_timezone(), target);
  }

  // bool blacklist = 100;
  if (this->_internal_blacklist() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(100, this->_internal_blacklist(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:appguard.AppGuardIpInfo)
  return target;
}

size_t AppGuardIpInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:appguard.AppGuardIpInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string ip = 1;
  if (!this->_internal_ip().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_ip());
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string country = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_country());
    }

    // optional string asn = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_asn());
    }

    // optional string org = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_org());
    }

    // optional string continent_code = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_continent_code());
    }

    // optional string city = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_city());
    }

    // optional string region = 7;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_region());
    }

    // optional string postal = 8;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_postal());
    }

    // optional string timezone = 9;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_timezone());
    }

  }
  // bool blacklist = 100;
  if (this->_internal_blacklist() != 0) {
    total_size += 2 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AppGuardIpInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    AppGuardIpInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AppGuardIpInfo::GetClassData() const { return &_class_data_; }


void AppGuardIpInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<AppGuardIpInfo*>(&to_msg);
  auto& from = static_cast<const AppGuardIpInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:appguard.AppGuardIpInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_ip().empty()) {
    _this->_internal_set_ip(from._internal_ip());
  }
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_country(from._internal_country());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_asn(from._internal_asn());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_set_org(from._internal_org());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_set_continent_code(from._internal_continent_code());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_internal_set_city(from._internal_city());
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_internal_set_region(from._internal_region());
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_internal_set_postal(from._internal_postal());
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_internal_set_timezone(from._internal_timezone());
    }
  }
  if (from._internal_blacklist() != 0) {
    _this->_internal_set_blacklist(from._internal_blacklist());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AppGuardIpInfo::CopyFrom(const AppGuardIpInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:appguard.AppGuardIpInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AppGuardIpInfo::IsInitialized() const {
  return true;
}

void AppGuardIpInfo::InternalSwap(AppGuardIpInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.ip_, lhs_arena,
      &other->_impl_.ip_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.country_, lhs_arena,
      &other->_impl_.country_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.asn_, lhs_arena,
      &other->_impl_.asn_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.org_, lhs_arena,
      &other->_impl_.org_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.continent_code_, lhs_arena,
      &other->_impl_.continent_code_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.city_, lhs_arena,
      &other->_impl_.city_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.region_, lhs_arena,
      &other->_impl_.region_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.postal_, lhs_arena,
      &other->_impl_.postal_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.timezone_, lhs_arena,
      &other->_impl_.timezone_, rhs_arena
  );
  swap(_impl_.blacklist_, other->_impl_.blacklist_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AppGuardIpInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_appguard_2eproto_getter, &descriptor_table_appguard_2eproto_once,
      file_level_metadata_appguard_2eproto[3]);
}

// ===================================================================

class AppGuardTcpInfo::_Internal {
 public:
  static const ::appguard::AppGuardTcpConnection& connection(const AppGuardTcpInfo* msg);
  static const ::appguard::AppGuardIpInfo& ip_info(const AppGuardTcpInfo* msg);
};

const ::appguard::AppGuardTcpConnection&
AppGuardTcpInfo::_Internal::connection(const AppGuardTcpInfo* msg) {
  return *msg->_impl_.connection_;
}
const ::appguard::AppGuardIpInfo&
AppGuardTcpInfo::_Internal::ip_info(const AppGuardTcpInfo* msg) {
  return *msg->_impl_.ip_info_;
}
AppGuardTcpInfo::AppGuardTcpInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:appguard.AppGuardTcpInfo)
}
AppGuardTcpInfo::AppGuardTcpInfo(const AppGuardTcpInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  AppGuardTcpInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.connection_){nullptr}
    , decltype(_impl_.ip_info_){nullptr}
    , decltype(_impl_.tcp_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_connection()) {
    _this->_impl_.connection_ = new ::appguard::AppGuardTcpConnection(*from._impl_.connection_);
  }
  if (from._internal_has_ip_info()) {
    _this->_impl_.ip_info_ = new ::appguard::AppGuardIpInfo(*from._impl_.ip_info_);
  }
  _this->_impl_.tcp_id_ = from._impl_.tcp_id_;
  // @@protoc_insertion_point(copy_constructor:appguard.AppGuardTcpInfo)
}

inline void AppGuardTcpInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.connection_){nullptr}
    , decltype(_impl_.ip_info_){nullptr}
    , decltype(_impl_.tcp_id_){uint64_t{0u}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

AppGuardTcpInfo::~AppGuardTcpInfo() {
  // @@protoc_insertion_point(destructor:appguard.AppGuardTcpInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AppGuardTcpInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.connection_;
  if (this != internal_default_instance()) delete _impl_.ip_info_;
}

void AppGuardTcpInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AppGuardTcpInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:appguard.AppGuardTcpInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.connection_ != nullptr) {
    delete _impl_.connection_;
  }
  _impl_.connection_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.ip_info_ != nullptr) {
    delete _impl_.ip_info_;
  }
  _impl_.ip_info_ = nullptr;
  _impl_.tcp_id_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AppGuardTcpInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .appguard.AppGuardTcpConnection connection = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_connection(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .appguard.AppGuardIpInfo ip_info = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_ip_info(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 tcp_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.tcp_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AppGuardTcpInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:appguard.AppGuardTcpInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .appguard.AppGuardTcpConnection connection = 1;
  if (this->_internal_has_connection()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::connection(this),
        _Internal::connection(this).GetCachedSize(), target, stream);
  }

  // .appguard.AppGuardIpInfo ip_info = 2;
  if (this->_internal_has_ip_info()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::ip_info(this),
        _Internal::ip_info(this).GetCachedSize(), target, stream);
  }

  // uint64 tcp_id = 3;
  if (this->_internal_tcp_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(3, this->_internal_tcp_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:appguard.AppGuardTcpInfo)
  return target;
}

size_t AppGuardTcpInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:appguard.AppGuardTcpInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .appguard.AppGuardTcpConnection connection = 1;
  if (this->_internal_has_connection()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.connection_);
  }

  // .appguard.AppGuardIpInfo ip_info = 2;
  if (this->_internal_has_ip_info()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.ip_info_);
  }

  // uint64 tcp_id = 3;
  if (this->_internal_tcp_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_tcp_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AppGuardTcpInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    AppGuardTcpInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AppGuardTcpInfo::GetClassData() const { return &_class_data_; }


void AppGuardTcpInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<AppGuardTcpInfo*>(&to_msg);
  auto& from = static_cast<const AppGuardTcpInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:appguard.AppGuardTcpInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_connection()) {
    _this->_internal_mutable_connection()->::appguard::AppGuardTcpConnection::MergeFrom(
        from._internal_connection());
  }
  if (from._internal_has_ip_info()) {
    _this->_internal_mutable_ip_info()->::appguard::AppGuardIpInfo::MergeFrom(
        from._internal_ip_info());
  }
  if (from._internal_tcp_id() != 0) {
    _this->_internal_set_tcp_id(from._internal_tcp_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AppGuardTcpInfo::CopyFrom(const AppGuardTcpInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:appguard.AppGuardTcpInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AppGuardTcpInfo::IsInitialized() const {
  return true;
}

void AppGuardTcpInfo::InternalSwap(AppGuardTcpInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AppGuardTcpInfo, _impl_.tcp_id_)
      + sizeof(AppGuardTcpInfo::_impl_.tcp_id_)
      - PROTOBUF_FIELD_OFFSET(AppGuardTcpInfo, _impl_.connection_)>(
          reinterpret_cast<char*>(&_impl_.connection_),
          reinterpret_cast<char*>(&other->_impl_.connection_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AppGuardTcpInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_appguard_2eproto_getter, &descriptor_table_appguard_2eproto_once,
      file_level_metadata_appguard_2eproto[4]);
}

// ===================================================================

AppGuardHttpRequest_HeadersEntry_DoNotUse::AppGuardHttpRequest_HeadersEntry_DoNotUse() {}
AppGuardHttpRequest_HeadersEntry_DoNotUse::AppGuardHttpRequest_HeadersEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void AppGuardHttpRequest_HeadersEntry_DoNotUse::MergeFrom(const AppGuardHttpRequest_HeadersEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata AppGuardHttpRequest_HeadersEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_appguard_2eproto_getter, &descriptor_table_appguard_2eproto_once,
      file_level_metadata_appguard_2eproto[5]);
}

// ===================================================================

AppGuardHttpRequest_QueryEntry_DoNotUse::AppGuardHttpRequest_QueryEntry_DoNotUse() {}
AppGuardHttpRequest_QueryEntry_DoNotUse::AppGuardHttpRequest_QueryEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void AppGuardHttpRequest_QueryEntry_DoNotUse::MergeFrom(const AppGuardHttpRequest_QueryEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata AppGuardHttpRequest_QueryEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_appguard_2eproto_getter, &descriptor_table_appguard_2eproto_once,
      file_level_metadata_appguard_2eproto[6]);
}

// ===================================================================

class AppGuardHttpRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<AppGuardHttpRequest>()._impl_._has_bits_);
  static void set_has_body(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::appguard::AppGuardTcpInfo& tcp_info(const AppGuardHttpRequest* msg);
};

const ::appguard::AppGuardTcpInfo&
AppGuardHttpRequest::_Internal::tcp_info(const AppGuardHttpRequest* msg) {
  return *msg->_impl_.tcp_info_;
}
AppGuardHttpRequest::AppGuardHttpRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  if (arena != nullptr && !is_message_owned) {
    arena->OwnCustomDestructor(this, &AppGuardHttpRequest::ArenaDtor);
  }
  // @@protoc_insertion_point(arena_constructor:appguard.AppGuardHttpRequest)
}
AppGuardHttpRequest::AppGuardHttpRequest(const AppGuardHttpRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  AppGuardHttpRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_.headers_)*/{}
    , /*decltype(_impl_.query_)*/{}
    , decltype(_impl_.token_){}
    , decltype(_impl_.original_url_){}
    , decltype(_impl_.method_){}
    , decltype(_impl_.body_){}
    , decltype(_impl_.tcp_info_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.headers_.MergeFrom(from._impl_.headers_);
  _this->_impl_.query_.MergeFrom(from._impl_.query_);
  _impl_.token_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.token_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_token().empty()) {
    _this->_impl_.token_.Set(from._internal_token(), 
      _this->GetArenaForAllocation());
  }
  _impl_.original_url_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.original_url_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_original_url().empty()) {
    _this->_impl_.original_url_.Set(from._internal_original_url(), 
      _this->GetArenaForAllocation());
  }
  _impl_.method_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.method_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_method().empty()) {
    _this->_impl_.method_.Set(from._internal_method(), 
      _this->GetArenaForAllocation());
  }
  _impl_.body_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.body_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_body()) {
    _this->_impl_.body_.Set(from._internal_body(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_tcp_info()) {
    _this->_impl_.tcp_info_ = new ::appguard::AppGuardTcpInfo(*from._impl_.tcp_info_);
  }
  // @@protoc_insertion_point(copy_constructor:appguard.AppGuardHttpRequest)
}

inline void AppGuardHttpRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_.headers_)*/{::_pbi::ArenaInitialized(), arena}
    , /*decltype(_impl_.query_)*/{::_pbi::ArenaInitialized(), arena}
    , decltype(_impl_.token_){}
    , decltype(_impl_.original_url_){}
    , decltype(_impl_.method_){}
    , decltype(_impl_.body_){}
    , decltype(_impl_.tcp_info_){nullptr}
  };
  _impl_.token_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.token_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.original_url_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.original_url_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.method_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.method_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.body_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.body_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

AppGuardHttpRequest::~AppGuardHttpRequest() {
  // @@protoc_insertion_point(destructor:appguard.AppGuardHttpRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    ArenaDtor(this);
    return;
  }
  SharedDtor();
}

inline void AppGuardHttpRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.headers_.Destruct();
  _impl_.headers_.~MapField();
  _impl_.query_.Destruct();
  _impl_.query_.~MapField();
  _impl_.token_.Destroy();
  _impl_.original_url_.Destroy();
  _impl_.method_.Destroy();
  _impl_.body_.Destroy();
  if (this != internal_default_instance()) delete _impl_.tcp_info_;
}

void AppGuardHttpRequest::ArenaDtor(void* object) {
  AppGuardHttpRequest* _this = reinterpret_cast< AppGuardHttpRequest* >(object);
  _this->_impl_.headers_.Destruct();
  _this->_impl_.query_.Destruct();
}
void AppGuardHttpRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AppGuardHttpRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:appguard.AppGuardHttpRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.headers_.Clear();
  _impl_.query_.Clear();
  _impl_.token_.ClearToEmpty();
  _impl_.original_url_.ClearToEmpty();
  _impl_.method_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.body_.ClearNonDefaultToEmpty();
  }
  if (GetArenaForAllocation() == nullptr && _impl_.tcp_info_ != nullptr) {
    delete _impl_.tcp_info_;
  }
  _impl_.tcp_info_ = nullptr;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AppGuardHttpRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string token = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_token();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "appguard.AppGuardHttpRequest.token"));
        } else
          goto handle_unusual;
        continue;
      // string original_url = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_original_url();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "appguard.AppGuardHttpRequest.original_url"));
        } else
          goto handle_unusual;
        continue;
      // map<string, string> headers = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&_impl_.headers_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // string method = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_method();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "appguard.AppGuardHttpRequest.method"));
        } else
          goto handle_unusual;
        continue;
      // optional string body = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_body();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "appguard.AppGuardHttpRequest.body"));
        } else
          goto handle_unusual;
        continue;
      // map<string, string> query = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&_impl_.query_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .appguard.AppGuardTcpInfo tcp_info = 100;
      case 100:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_tcp_info(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AppGuardHttpRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:appguard.AppGuardHttpRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string token = 1;
  if (!this->_internal_token().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_token().data(), static_cast<int>(this->_internal_token().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "appguard.AppGuardHttpRequest.token");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_token(), target);
  }

  // string original_url = 2;
  if (!this->_internal_original_url().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_original_url().data(), static_cast<int>(this->_internal_original_url().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "appguard.AppGuardHttpRequest.original_url");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_original_url(), target);
  }

  // map<string, string> headers = 3;
  if (!this->_internal_headers().empty()) {
    using MapType = ::_pb::Map<std::string, std::string>;
    using WireHelper = AppGuardHttpRequest_HeadersEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_headers();
    auto check_utf8 = [](const MapType::value_type& entry) {
      (void)entry;
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        entry.first.data(), static_cast<int>(entry.first.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "appguard.AppGuardHttpRequest.HeadersEntry.key");
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        entry.second.data(), static_cast<int>(entry.second.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "appguard.AppGuardHttpRequest.HeadersEntry.value");
    };

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterPtr<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(3, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(3, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    }
  }

  // string method = 4;
  if (!this->_internal_method().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_method().data(), static_cast<int>(this->_internal_method().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "appguard.AppGuardHttpRequest.method");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_method(), target);
  }

  // optional string body = 5;
  if (_internal_has_body()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_body().data(), static_cast<int>(this->_internal_body().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "appguard.AppGuardHttpRequest.body");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_body(), target);
  }

  // map<string, string> query = 6;
  if (!this->_internal_query().empty()) {
    using MapType = ::_pb::Map<std::string, std::string>;
    using WireHelper = AppGuardHttpRequest_QueryEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_query();
    auto check_utf8 = [](const MapType::value_type& entry) {
      (void)entry;
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        entry.first.data(), static_cast<int>(entry.first.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "appguard.AppGuardHttpRequest.QueryEntry.key");
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        entry.second.data(), static_cast<int>(entry.second.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "appguard.AppGuardHttpRequest.QueryEntry.value");
    };

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterPtr<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(6, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(6, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    }
  }

  // .appguard.AppGuardTcpInfo tcp_info = 100;
  if (this->_internal_has_tcp_info()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(100, _Internal::tcp_info(this),
        _Internal::tcp_info(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:appguard.AppGuardHttpRequest)
  return target;
}

size_t AppGuardHttpRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:appguard.AppGuardHttpRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, string> headers = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_headers_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->_internal_headers().begin();
      it != this->_internal_headers().end(); ++it) {
    total_size += AppGuardHttpRequest_HeadersEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<string, string> query = 6;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_query_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->_internal_query().begin();
      it != this->_internal_query().end(); ++it) {
    total_size += AppGuardHttpRequest_QueryEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // string token = 1;
  if (!this->_internal_token().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_token());
  }

  // string original_url = 2;
  if (!this->_internal_original_url().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_original_url());
  }

  // string method = 4;
  if (!this->_internal_method().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_method());
  }

  // optional string body = 5;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_body());
  }

  // .appguard.AppGuardTcpInfo tcp_info = 100;
  if (this->_internal_has_tcp_info()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.tcp_info_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AppGuardHttpRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    AppGuardHttpRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AppGuardHttpRequest::GetClassData() const { return &_class_data_; }


void AppGuardHttpRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<AppGuardHttpRequest*>(&to_msg);
  auto& from = static_cast<const AppGuardHttpRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:appguard.AppGuardHttpRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.headers_.MergeFrom(from._impl_.headers_);
  _this->_impl_.query_.MergeFrom(from._impl_.query_);
  if (!from._internal_token().empty()) {
    _this->_internal_set_token(from._internal_token());
  }
  if (!from._internal_original_url().empty()) {
    _this->_internal_set_original_url(from._internal_original_url());
  }
  if (!from._internal_method().empty()) {
    _this->_internal_set_method(from._internal_method());
  }
  if (from._internal_has_body()) {
    _this->_internal_set_body(from._internal_body());
  }
  if (from._internal_has_tcp_info()) {
    _this->_internal_mutable_tcp_info()->::appguard::AppGuardTcpInfo::MergeFrom(
        from._internal_tcp_info());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AppGuardHttpRequest::CopyFrom(const AppGuardHttpRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:appguard.AppGuardHttpRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AppGuardHttpRequest::IsInitialized() const {
  return true;
}

void AppGuardHttpRequest::InternalSwap(AppGuardHttpRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.headers_.InternalSwap(&other->_impl_.headers_);
  _impl_.query_.InternalSwap(&other->_impl_.query_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.token_, lhs_arena,
      &other->_impl_.token_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.original_url_, lhs_arena,
      &other->_impl_.original_url_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.method_, lhs_arena,
      &other->_impl_.method_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.body_, lhs_arena,
      &other->_impl_.body_, rhs_arena
  );
  swap(_impl_.tcp_info_, other->_impl_.tcp_info_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AppGuardHttpRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_appguard_2eproto_getter, &descriptor_table_appguard_2eproto_once,
      file_level_metadata_appguard_2eproto[7]);
}

// ===================================================================

AppGuardHttpResponse_HeadersEntry_DoNotUse::AppGuardHttpResponse_HeadersEntry_DoNotUse() {}
AppGuardHttpResponse_HeadersEntry_DoNotUse::AppGuardHttpResponse_HeadersEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void AppGuardHttpResponse_HeadersEntry_DoNotUse::MergeFrom(const AppGuardHttpResponse_HeadersEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata AppGuardHttpResponse_HeadersEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_appguard_2eproto_getter, &descriptor_table_appguard_2eproto_once,
      file_level_metadata_appguard_2eproto[8]);
}

// ===================================================================

class AppGuardHttpResponse::_Internal {
 public:
  static const ::appguard::AppGuardTcpInfo& tcp_info(const AppGuardHttpResponse* msg);
};

const ::appguard::AppGuardTcpInfo&
AppGuardHttpResponse::_Internal::tcp_info(const AppGuardHttpResponse* msg) {
  return *msg->_impl_.tcp_info_;
}
AppGuardHttpResponse::AppGuardHttpResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  if (arena != nullptr && !is_message_owned) {
    arena->OwnCustomDestructor(this, &AppGuardHttpResponse::ArenaDtor);
  }
  // @@protoc_insertion_point(arena_constructor:appguard.AppGuardHttpResponse)
}
AppGuardHttpResponse::AppGuardHttpResponse(const AppGuardHttpResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  AppGuardHttpResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      /*decltype(_impl_.headers_)*/{}
    , decltype(_impl_.token_){}
    , decltype(_impl_.tcp_info_){nullptr}
    , decltype(_impl_.code_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.headers_.MergeFrom(from._impl_.headers_);
  _impl_.token_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.token_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_token().empty()) {
    _this->_impl_.token_.Set(from._internal_token(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_tcp_info()) {
    _this->_impl_.tcp_info_ = new ::appguard::AppGuardTcpInfo(*from._impl_.tcp_info_);
  }
  _this->_impl_.code_ = from._impl_.code_;
  // @@protoc_insertion_point(copy_constructor:appguard.AppGuardHttpResponse)
}

inline void AppGuardHttpResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      /*decltype(_impl_.headers_)*/{::_pbi::ArenaInitialized(), arena}
    , decltype(_impl_.token_){}
    , decltype(_impl_.tcp_info_){nullptr}
    , decltype(_impl_.code_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.token_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.token_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

AppGuardHttpResponse::~AppGuardHttpResponse() {
  // @@protoc_insertion_point(destructor:appguard.AppGuardHttpResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    ArenaDtor(this);
    return;
  }
  SharedDtor();
}

inline void AppGuardHttpResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.headers_.Destruct();
  _impl_.headers_.~MapField();
  _impl_.token_.Destroy();
  if (this != internal_default_instance()) delete _impl_.tcp_info_;
}

void AppGuardHttpResponse::ArenaDtor(void* object) {
  AppGuardHttpResponse* _this = reinterpret_cast< AppGuardHttpResponse* >(object);
  _this->_impl_.headers_.Destruct();
}
void AppGuardHttpResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AppGuardHttpResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:appguard.AppGuardHttpResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.headers_.Clear();
  _impl_.token_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.tcp_info_ != nullptr) {
    delete _impl_.tcp_info_;
  }
  _impl_.tcp_info_ = nullptr;
  _impl_.code_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AppGuardHttpResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string token = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_token();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "appguard.AppGuardHttpResponse.token"));
        } else
          goto handle_unusual;
        continue;
      // uint32 code = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // map<string, string> headers = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&_impl_.headers_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .appguard.AppGuardTcpInfo tcp_info = 100;
      case 100:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_tcp_info(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AppGuardHttpResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:appguard.AppGuardHttpResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string token = 1;
  if (!this->_internal_token().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_token().data(), static_cast<int>(this->_internal_token().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "appguard.AppGuardHttpResponse.token");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_token(), target);
  }

  // uint32 code = 2;
  if (this->_internal_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_code(), target);
  }

  // map<string, string> headers = 3;
  if (!this->_internal_headers().empty()) {
    using MapType = ::_pb::Map<std::string, std::string>;
    using WireHelper = AppGuardHttpResponse_HeadersEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_headers();
    auto check_utf8 = [](const MapType::value_type& entry) {
      (void)entry;
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        entry.first.data(), static_cast<int>(entry.first.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "appguard.AppGuardHttpResponse.HeadersEntry.key");
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        entry.second.data(), static_cast<int>(entry.second.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "appguard.AppGuardHttpResponse.HeadersEntry.value");
    };

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterPtr<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(3, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(3, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    }
  }

  // .appguard.AppGuardTcpInfo tcp_info = 100;
  if (this->_internal_has_tcp_info()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(100, _Internal::tcp_info(this),
        _Internal::tcp_info(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:appguard.AppGuardHttpResponse)
  return target;
}

size_t AppGuardHttpResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:appguard.AppGuardHttpResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, string> headers = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_headers_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->_internal_headers().begin();
      it != this->_internal_headers().end(); ++it) {
    total_size += AppGuardHttpResponse_HeadersEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // string token = 1;
  if (!this->_internal_token().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_token());
  }

  // .appguard.AppGuardTcpInfo tcp_info = 100;
  if (this->_internal_has_tcp_info()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.tcp_info_);
  }

  // uint32 code = 2;
  if (this->_internal_code() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_code());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AppGuardHttpResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    AppGuardHttpResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AppGuardHttpResponse::GetClassData() const { return &_class_data_; }


void AppGuardHttpResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<AppGuardHttpResponse*>(&to_msg);
  auto& from = static_cast<const AppGuardHttpResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:appguard.AppGuardHttpResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.headers_.MergeFrom(from._impl_.headers_);
  if (!from._internal_token().empty()) {
    _this->_internal_set_token(from._internal_token());
  }
  if (from._internal_has_tcp_info()) {
    _this->_internal_mutable_tcp_info()->::appguard::AppGuardTcpInfo::MergeFrom(
        from._internal_tcp_info());
  }
  if (from._internal_code() != 0) {
    _this->_internal_set_code(from._internal_code());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AppGuardHttpResponse::CopyFrom(const AppGuardHttpResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:appguard.AppGuardHttpResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AppGuardHttpResponse::IsInitialized() const {
  return true;
}

void AppGuardHttpResponse::InternalSwap(AppGuardHttpResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.headers_.InternalSwap(&other->_impl_.headers_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.token_, lhs_arena,
      &other->_impl_.token_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AppGuardHttpResponse, _impl_.code_)
      + sizeof(AppGuardHttpResponse::_impl_.code_)
      - PROTOBUF_FIELD_OFFSET(AppGuardHttpResponse, _impl_.tcp_info_)>(
          reinterpret_cast<char*>(&_impl_.tcp_info_),
          reinterpret_cast<char*>(&other->_impl_.tcp_info_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AppGuardHttpResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_appguard_2eproto_getter, &descriptor_table_appguard_2eproto_once,
      file_level_metadata_appguard_2eproto[9]);
}

// ===================================================================

AppGuardSmtpRequest_HeadersEntry_DoNotUse::AppGuardSmtpRequest_HeadersEntry_DoNotUse() {}
AppGuardSmtpRequest_HeadersEntry_DoNotUse::AppGuardSmtpRequest_HeadersEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void AppGuardSmtpRequest_HeadersEntry_DoNotUse::MergeFrom(const AppGuardSmtpRequest_HeadersEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata AppGuardSmtpRequest_HeadersEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_appguard_2eproto_getter, &descriptor_table_appguard_2eproto_once,
      file_level_metadata_appguard_2eproto[10]);
}

// ===================================================================

class AppGuardSmtpRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<AppGuardSmtpRequest>()._impl_._has_bits_);
  static void set_has_body(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::appguard::AppGuardTcpInfo& tcp_info(const AppGuardSmtpRequest* msg);
};

const ::appguard::AppGuardTcpInfo&
AppGuardSmtpRequest::_Internal::tcp_info(const AppGuardSmtpRequest* msg) {
  return *msg->_impl_.tcp_info_;
}
AppGuardSmtpRequest::AppGuardSmtpRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  if (arena != nullptr && !is_message_owned) {
    arena->OwnCustomDestructor(this, &AppGuardSmtpRequest::ArenaDtor);
  }
  // @@protoc_insertion_point(arena_constructor:appguard.AppGuardSmtpRequest)
}
AppGuardSmtpRequest::AppGuardSmtpRequest(const AppGuardSmtpRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  AppGuardSmtpRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_.headers_)*/{}
    , decltype(_impl_.token_){}
    , decltype(_impl_.body_){}
    , decltype(_impl_.tcp_info_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.headers_.MergeFrom(from._impl_.headers_);
  _impl_.token_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.token_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_token().empty()) {
    _this->_impl_.token_.Set(from._internal_token(), 
      _this->GetArenaForAllocation());
  }
  _impl_.body_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.body_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_body()) {
    _this->_impl_.body_.Set(from._internal_body(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_tcp_info()) {
    _this->_impl_.tcp_info_ = new ::appguard::AppGuardTcpInfo(*from._impl_.tcp_info_);
  }
  // @@protoc_insertion_point(copy_constructor:appguard.AppGuardSmtpRequest)
}

inline void AppGuardSmtpRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_.headers_)*/{::_pbi::ArenaInitialized(), arena}
    , decltype(_impl_.token_){}
    , decltype(_impl_.body_){}
    , decltype(_impl_.tcp_info_){nullptr}
  };
  _impl_.token_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.token_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.body_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.body_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

AppGuardSmtpRequest::~AppGuardSmtpRequest() {
  // @@protoc_insertion_point(destructor:appguard.AppGuardSmtpRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    ArenaDtor(this);
    return;
  }
  SharedDtor();
}

inline void AppGuardSmtpRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.headers_.Destruct();
  _impl_.headers_.~MapField();
  _impl_.token_.Destroy();
  _impl_.body_.Destroy();
  if (this != internal_default_instance()) delete _impl_.tcp_info_;
}

void AppGuardSmtpRequest::ArenaDtor(void* object) {
  AppGuardSmtpRequest* _this = reinterpret_cast< AppGuardSmtpRequest* >(object);
  _this->_impl_.headers_.Destruct();
}
void AppGuardSmtpRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AppGuardSmtpRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:appguard.AppGuardSmtpRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.headers_.Clear();
  _impl_.token_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.body_.ClearNonDefaultToEmpty();
  }
  if (GetArenaForAllocation() == nullptr && _impl_.tcp_info_ != nullptr) {
    delete _impl_.tcp_info_;
  }
  _impl_.tcp_info_ = nullptr;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AppGuardSmtpRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string token = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_token();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "appguard.AppGuardSmtpRequest.token"));
        } else
          goto handle_unusual;
        continue;
      // map<string, string> headers = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&_impl_.headers_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional string body = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_body();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "appguard.AppGuardSmtpRequest.body"));
        } else
          goto handle_unusual;
        continue;
      // .appguard.AppGuardTcpInfo tcp_info = 100;
      case 100:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_tcp_info(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AppGuardSmtpRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:appguard.AppGuardSmtpRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string token = 1;
  if (!this->_internal_token().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_token().data(), static_cast<int>(this->_internal_token().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "appguard.AppGuardSmtpRequest.token");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_token(), target);
  }

  // map<string, string> headers = 2;
  if (!this->_internal_headers().empty()) {
    using MapType = ::_pb::Map<std::string, std::string>;
    using WireHelper = AppGuardSmtpRequest_HeadersEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_headers();
    auto check_utf8 = [](const MapType::value_type& entry) {
      (void)entry;
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        entry.first.data(), static_cast<int>(entry.first.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "appguard.AppGuardSmtpRequest.HeadersEntry.key");
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        entry.second.data(), static_cast<int>(entry.second.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "appguard.AppGuardSmtpRequest.HeadersEntry.value");
    };

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterPtr<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(2, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(2, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    }
  }

  // optional string body = 3;
  if (_internal_has_body()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_body().data(), static_cast<int>(this->_internal_body().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "appguard.AppGuardSmtpRequest.body");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_body(), target);
  }

  // .appguard.AppGuardTcpInfo tcp_info = 100;
  if (this->_internal_has_tcp_info()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(100, _Internal::tcp_info(this),
        _Internal::tcp_info(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:appguard.AppGuardSmtpRequest)
  return target;
}

size_t AppGuardSmtpRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:appguard.AppGuardSmtpRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, string> headers = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_headers_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->_internal_headers().begin();
      it != this->_internal_headers().end(); ++it) {
    total_size += AppGuardSmtpRequest_HeadersEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // string token = 1;
  if (!this->_internal_token().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_token());
  }

  // optional string body = 3;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_body());
  }

  // .appguard.AppGuardTcpInfo tcp_info = 100;
  if (this->_internal_has_tcp_info()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.tcp_info_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AppGuardSmtpRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    AppGuardSmtpRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AppGuardSmtpRequest::GetClassData() const { return &_class_data_; }


void AppGuardSmtpRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<AppGuardSmtpRequest*>(&to_msg);
  auto& from = static_cast<const AppGuardSmtpRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:appguard.AppGuardSmtpRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.headers_.MergeFrom(from._impl_.headers_);
  if (!from._internal_token().empty()) {
    _this->_internal_set_token(from._internal_token());
  }
  if (from._internal_has_body()) {
    _this->_internal_set_body(from._internal_body());
  }
  if (from._internal_has_tcp_info()) {
    _this->_internal_mutable_tcp_info()->::appguard::AppGuardTcpInfo::MergeFrom(
        from._internal_tcp_info());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AppGuardSmtpRequest::CopyFrom(const AppGuardSmtpRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:appguard.AppGuardSmtpRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AppGuardSmtpRequest::IsInitialized() const {
  return true;
}

void AppGuardSmtpRequest::InternalSwap(AppGuardSmtpRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.headers_.InternalSwap(&other->_impl_.headers_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.token_, lhs_arena,
      &other->_impl_.token_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.body_, lhs_arena,
      &other->_impl_.body_, rhs_arena
  );
  swap(_impl_.tcp_info_, other->_impl_.tcp_info_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AppGuardSmtpRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_appguard_2eproto_getter, &descriptor_table_appguard_2eproto_once,
      file_level_metadata_appguard_2eproto[11]);
}

// ===================================================================

class AppGuardSmtpResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<AppGuardSmtpResponse>()._impl_._has_bits_);
  static void set_has_code(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::appguard::AppGuardTcpInfo& tcp_info(const AppGuardSmtpResponse* msg);
};

const ::appguard::AppGuardTcpInfo&
AppGuardSmtpResponse::_Internal::tcp_info(const AppGuardSmtpResponse* msg) {
  return *msg->_impl_.tcp_info_;
}
AppGuardSmtpResponse::AppGuardSmtpResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:appguard.AppGuardSmtpResponse)
}
AppGuardSmtpResponse::AppGuardSmtpResponse(const AppGuardSmtpResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  AppGuardSmtpResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.token_){}
    , decltype(_impl_.tcp_info_){nullptr}
    , decltype(_impl_.code_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.token_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.token_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_token().empty()) {
    _this->_impl_.token_.Set(from._internal_token(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_tcp_info()) {
    _this->_impl_.tcp_info_ = new ::appguard::AppGuardTcpInfo(*from._impl_.tcp_info_);
  }
  _this->_impl_.code_ = from._impl_.code_;
  // @@protoc_insertion_point(copy_constructor:appguard.AppGuardSmtpResponse)
}

inline void AppGuardSmtpResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.token_){}
    , decltype(_impl_.tcp_info_){nullptr}
    , decltype(_impl_.code_){0u}
  };
  _impl_.token_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.token_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

AppGuardSmtpResponse::~AppGuardSmtpResponse() {
  // @@protoc_insertion_point(destructor:appguard.AppGuardSmtpResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AppGuardSmtpResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.token_.Destroy();
  if (this != internal_default_instance()) delete _impl_.tcp_info_;
}

void AppGuardSmtpResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AppGuardSmtpResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:appguard.AppGuardSmtpResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.token_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.tcp_info_ != nullptr) {
    delete _impl_.tcp_info_;
  }
  _impl_.tcp_info_ = nullptr;
  _impl_.code_ = 0u;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AppGuardSmtpResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string token = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_token();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "appguard.AppGuardSmtpResponse.token"));
        } else
          goto handle_unusual;
        continue;
      // optional uint32 code = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_code(&has_bits);
          _impl_.code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .appguard.AppGuardTcpInfo tcp_info = 100;
      case 100:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_tcp_info(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AppGuardSmtpResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:appguard.AppGuardSmtpResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string token = 1;
  if (!this->_internal_token().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_token().data(), static_cast<int>(this->_internal_token().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "appguard.AppGuardSmtpResponse.token");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_token(), target);
  }

  // optional uint32 code = 2;
  if (_internal_has_code()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_code(), target);
  }

  // .appguard.AppGuardTcpInfo tcp_info = 100;
  if (this->_internal_has_tcp_info()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(100, _Internal::tcp_info(this),
        _Internal::tcp_info(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:appguard.AppGuardSmtpResponse)
  return target;
}

size_t AppGuardSmtpResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:appguard.AppGuardSmtpResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string token = 1;
  if (!this->_internal_token().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_token());
  }

  // .appguard.AppGuardTcpInfo tcp_info = 100;
  if (this->_internal_has_tcp_info()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.tcp_info_);
  }

  // optional uint32 code = 2;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_code());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AppGuardSmtpResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    AppGuardSmtpResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AppGuardSmtpResponse::GetClassData() const { return &_class_data_; }


void AppGuardSmtpResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<AppGuardSmtpResponse*>(&to_msg);
  auto& from = static_cast<const AppGuardSmtpResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:appguard.AppGuardSmtpResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_token().empty()) {
    _this->_internal_set_token(from._internal_token());
  }
  if (from._internal_has_tcp_info()) {
    _this->_internal_mutable_tcp_info()->::appguard::AppGuardTcpInfo::MergeFrom(
        from._internal_tcp_info());
  }
  if (from._internal_has_code()) {
    _this->_internal_set_code(from._internal_code());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AppGuardSmtpResponse::CopyFrom(const AppGuardSmtpResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:appguard.AppGuardSmtpResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AppGuardSmtpResponse::IsInitialized() const {
  return true;
}

void AppGuardSmtpResponse::InternalSwap(AppGuardSmtpResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.token_, lhs_arena,
      &other->_impl_.token_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AppGuardSmtpResponse, _impl_.code_)
      + sizeof(AppGuardSmtpResponse::_impl_.code_)
      - PROTOBUF_FIELD_OFFSET(AppGuardSmtpResponse, _impl_.tcp_info_)>(
          reinterpret_cast<char*>(&_impl_.tcp_info_),
          reinterpret_cast<char*>(&other->_impl_.tcp_info_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AppGuardSmtpResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_appguard_2eproto_getter, &descriptor_table_appguard_2eproto_once,
      file_level_metadata_appguard_2eproto[12]);
}

// ===================================================================

class AppGuardResponse::_Internal {
 public:
};

AppGuardResponse::AppGuardResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:appguard.AppGuardResponse)
}
AppGuardResponse::AppGuardResponse(const AppGuardResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  AppGuardResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.policy_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.policy_ = from._impl_.policy_;
  // @@protoc_insertion_point(copy_constructor:appguard.AppGuardResponse)
}

inline void AppGuardResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.policy_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

AppGuardResponse::~AppGuardResponse() {
  // @@protoc_insertion_point(destructor:appguard.AppGuardResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AppGuardResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void AppGuardResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AppGuardResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:appguard.AppGuardResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.policy_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AppGuardResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .appguard.FirewallPolicy policy = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_policy(static_cast<::appguard::FirewallPolicy>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AppGuardResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:appguard.AppGuardResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .appguard.FirewallPolicy policy = 2;
  if (this->_internal_policy() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_policy(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:appguard.AppGuardResponse)
  return target;
}

size_t AppGuardResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:appguard.AppGuardResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .appguard.FirewallPolicy policy = 2;
  if (this->_internal_policy() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_policy());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AppGuardResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    AppGuardResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AppGuardResponse::GetClassData() const { return &_class_data_; }


void AppGuardResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<AppGuardResponse*>(&to_msg);
  auto& from = static_cast<const AppGuardResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:appguard.AppGuardResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_policy() != 0) {
    _this->_internal_set_policy(from._internal_policy());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AppGuardResponse::CopyFrom(const AppGuardResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:appguard.AppGuardResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AppGuardResponse::IsInitialized() const {
  return true;
}

void AppGuardResponse::InternalSwap(AppGuardResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.policy_, other->_impl_.policy_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AppGuardResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_appguard_2eproto_getter, &descriptor_table_appguard_2eproto_once,
      file_level_metadata_appguard_2eproto[13]);
}

// ===================================================================

class AppGuardTcpResponse::_Internal {
 public:
  static const ::appguard::AppGuardTcpInfo& tcp_info(const AppGuardTcpResponse* msg);
};

const ::appguard::AppGuardTcpInfo&
AppGuardTcpResponse::_Internal::tcp_info(const AppGuardTcpResponse* msg) {
  return *msg->_impl_.tcp_info_;
}
AppGuardTcpResponse::AppGuardTcpResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:appguard.AppGuardTcpResponse)
}
AppGuardTcpResponse::AppGuardTcpResponse(const AppGuardTcpResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  AppGuardTcpResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.tcp_info_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_tcp_info()) {
    _this->_impl_.tcp_info_ = new ::appguard::AppGuardTcpInfo(*from._impl_.tcp_info_);
  }
  // @@protoc_insertion_point(copy_constructor:appguard.AppGuardTcpResponse)
}

inline void AppGuardTcpResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.tcp_info_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

AppGuardTcpResponse::~AppGuardTcpResponse() {
  // @@protoc_insertion_point(destructor:appguard.AppGuardTcpResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AppGuardTcpResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.tcp_info_;
}

void AppGuardTcpResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AppGuardTcpResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:appguard.AppGuardTcpResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.tcp_info_ != nullptr) {
    delete _impl_.tcp_info_;
  }
  _impl_.tcp_info_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AppGuardTcpResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .appguard.AppGuardTcpInfo tcp_info = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_tcp_info(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AppGuardTcpResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:appguard.AppGuardTcpResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .appguard.AppGuardTcpInfo tcp_info = 1;
  if (this->_internal_has_tcp_info()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::tcp_info(this),
        _Internal::tcp_info(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:appguard.AppGuardTcpResponse)
  return target;
}

size_t AppGuardTcpResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:appguard.AppGuardTcpResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .appguard.AppGuardTcpInfo tcp_info = 1;
  if (this->_internal_has_tcp_info()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.tcp_info_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AppGuardTcpResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    AppGuardTcpResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AppGuardTcpResponse::GetClassData() const { return &_class_data_; }


void AppGuardTcpResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<AppGuardTcpResponse*>(&to_msg);
  auto& from = static_cast<const AppGuardTcpResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:appguard.AppGuardTcpResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_tcp_info()) {
    _this->_internal_mutable_tcp_info()->::appguard::AppGuardTcpInfo::MergeFrom(
        from._internal_tcp_info());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AppGuardTcpResponse::CopyFrom(const AppGuardTcpResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:appguard.AppGuardTcpResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AppGuardTcpResponse::IsInitialized() const {
  return true;
}

void AppGuardTcpResponse::InternalSwap(AppGuardTcpResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.tcp_info_, other->_impl_.tcp_info_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AppGuardTcpResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_appguard_2eproto_getter, &descriptor_table_appguard_2eproto_once,
      file_level_metadata_appguard_2eproto[14]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace appguard
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::appguard::HeartbeatRequest*
Arena::CreateMaybeMessage< ::appguard::HeartbeatRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::appguard::HeartbeatRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::appguard::HeartbeatResponse*
Arena::CreateMaybeMessage< ::appguard::HeartbeatResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::appguard::HeartbeatResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::appguard::AppGuardTcpConnection*
Arena::CreateMaybeMessage< ::appguard::AppGuardTcpConnection >(Arena* arena) {
  return Arena::CreateMessageInternal< ::appguard::AppGuardTcpConnection >(arena);
}
template<> PROTOBUF_NOINLINE ::appguard::AppGuardIpInfo*
Arena::CreateMaybeMessage< ::appguard::AppGuardIpInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::appguard::AppGuardIpInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::appguard::AppGuardTcpInfo*
Arena::CreateMaybeMessage< ::appguard::AppGuardTcpInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::appguard::AppGuardTcpInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::appguard::AppGuardHttpRequest_HeadersEntry_DoNotUse*
Arena::CreateMaybeMessage< ::appguard::AppGuardHttpRequest_HeadersEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::appguard::AppGuardHttpRequest_HeadersEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::appguard::AppGuardHttpRequest_QueryEntry_DoNotUse*
Arena::CreateMaybeMessage< ::appguard::AppGuardHttpRequest_QueryEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::appguard::AppGuardHttpRequest_QueryEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::appguard::AppGuardHttpRequest*
Arena::CreateMaybeMessage< ::appguard::AppGuardHttpRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::appguard::AppGuardHttpRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::appguard::AppGuardHttpResponse_HeadersEntry_DoNotUse*
Arena::CreateMaybeMessage< ::appguard::AppGuardHttpResponse_HeadersEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::appguard::AppGuardHttpResponse_HeadersEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::appguard::AppGuardHttpResponse*
Arena::CreateMaybeMessage< ::appguard::AppGuardHttpResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::appguard::AppGuardHttpResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::appguard::AppGuardSmtpRequest_HeadersEntry_DoNotUse*
Arena::CreateMaybeMessage< ::appguard::AppGuardSmtpRequest_HeadersEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::appguard::AppGuardSmtpRequest_HeadersEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::appguard::AppGuardSmtpRequest*
Arena::CreateMaybeMessage< ::appguard::AppGuardSmtpRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::appguard::AppGuardSmtpRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::appguard::AppGuardSmtpResponse*
Arena::CreateMaybeMessage< ::appguard::AppGuardSmtpResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::appguard::AppGuardSmtpResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::appguard::AppGuardResponse*
Arena::CreateMaybeMessage< ::appguard::AppGuardResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::appguard::AppGuardResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::appguard::AppGuardTcpResponse*
Arena::CreateMaybeMessage< ::appguard::AppGuardTcpResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::appguard::AppGuardTcpResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
