// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: appguard.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_appguard_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_appguard_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_appguard_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_appguard_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_appguard_2eproto;
namespace appguard {
class AppGuardHttpRequest;
struct AppGuardHttpRequestDefaultTypeInternal;
extern AppGuardHttpRequestDefaultTypeInternal _AppGuardHttpRequest_default_instance_;
class AppGuardHttpRequest_HeadersEntry_DoNotUse;
struct AppGuardHttpRequest_HeadersEntry_DoNotUseDefaultTypeInternal;
extern AppGuardHttpRequest_HeadersEntry_DoNotUseDefaultTypeInternal _AppGuardHttpRequest_HeadersEntry_DoNotUse_default_instance_;
class AppGuardHttpRequest_QueryEntry_DoNotUse;
struct AppGuardHttpRequest_QueryEntry_DoNotUseDefaultTypeInternal;
extern AppGuardHttpRequest_QueryEntry_DoNotUseDefaultTypeInternal _AppGuardHttpRequest_QueryEntry_DoNotUse_default_instance_;
class AppGuardHttpResponse;
struct AppGuardHttpResponseDefaultTypeInternal;
extern AppGuardHttpResponseDefaultTypeInternal _AppGuardHttpResponse_default_instance_;
class AppGuardHttpResponse_HeadersEntry_DoNotUse;
struct AppGuardHttpResponse_HeadersEntry_DoNotUseDefaultTypeInternal;
extern AppGuardHttpResponse_HeadersEntry_DoNotUseDefaultTypeInternal _AppGuardHttpResponse_HeadersEntry_DoNotUse_default_instance_;
class AppGuardIpInfo;
struct AppGuardIpInfoDefaultTypeInternal;
extern AppGuardIpInfoDefaultTypeInternal _AppGuardIpInfo_default_instance_;
class AppGuardResponse;
struct AppGuardResponseDefaultTypeInternal;
extern AppGuardResponseDefaultTypeInternal _AppGuardResponse_default_instance_;
class AppGuardSmtpRequest;
struct AppGuardSmtpRequestDefaultTypeInternal;
extern AppGuardSmtpRequestDefaultTypeInternal _AppGuardSmtpRequest_default_instance_;
class AppGuardSmtpRequest_HeadersEntry_DoNotUse;
struct AppGuardSmtpRequest_HeadersEntry_DoNotUseDefaultTypeInternal;
extern AppGuardSmtpRequest_HeadersEntry_DoNotUseDefaultTypeInternal _AppGuardSmtpRequest_HeadersEntry_DoNotUse_default_instance_;
class AppGuardSmtpResponse;
struct AppGuardSmtpResponseDefaultTypeInternal;
extern AppGuardSmtpResponseDefaultTypeInternal _AppGuardSmtpResponse_default_instance_;
class AppGuardTcpConnection;
struct AppGuardTcpConnectionDefaultTypeInternal;
extern AppGuardTcpConnectionDefaultTypeInternal _AppGuardTcpConnection_default_instance_;
class AppGuardTcpInfo;
struct AppGuardTcpInfoDefaultTypeInternal;
extern AppGuardTcpInfoDefaultTypeInternal _AppGuardTcpInfo_default_instance_;
class AppGuardTcpResponse;
struct AppGuardTcpResponseDefaultTypeInternal;
extern AppGuardTcpResponseDefaultTypeInternal _AppGuardTcpResponse_default_instance_;
}  // namespace appguard
PROTOBUF_NAMESPACE_OPEN
template<> ::appguard::AppGuardHttpRequest* Arena::CreateMaybeMessage<::appguard::AppGuardHttpRequest>(Arena*);
template<> ::appguard::AppGuardHttpRequest_HeadersEntry_DoNotUse* Arena::CreateMaybeMessage<::appguard::AppGuardHttpRequest_HeadersEntry_DoNotUse>(Arena*);
template<> ::appguard::AppGuardHttpRequest_QueryEntry_DoNotUse* Arena::CreateMaybeMessage<::appguard::AppGuardHttpRequest_QueryEntry_DoNotUse>(Arena*);
template<> ::appguard::AppGuardHttpResponse* Arena::CreateMaybeMessage<::appguard::AppGuardHttpResponse>(Arena*);
template<> ::appguard::AppGuardHttpResponse_HeadersEntry_DoNotUse* Arena::CreateMaybeMessage<::appguard::AppGuardHttpResponse_HeadersEntry_DoNotUse>(Arena*);
template<> ::appguard::AppGuardIpInfo* Arena::CreateMaybeMessage<::appguard::AppGuardIpInfo>(Arena*);
template<> ::appguard::AppGuardResponse* Arena::CreateMaybeMessage<::appguard::AppGuardResponse>(Arena*);
template<> ::appguard::AppGuardSmtpRequest* Arena::CreateMaybeMessage<::appguard::AppGuardSmtpRequest>(Arena*);
template<> ::appguard::AppGuardSmtpRequest_HeadersEntry_DoNotUse* Arena::CreateMaybeMessage<::appguard::AppGuardSmtpRequest_HeadersEntry_DoNotUse>(Arena*);
template<> ::appguard::AppGuardSmtpResponse* Arena::CreateMaybeMessage<::appguard::AppGuardSmtpResponse>(Arena*);
template<> ::appguard::AppGuardTcpConnection* Arena::CreateMaybeMessage<::appguard::AppGuardTcpConnection>(Arena*);
template<> ::appguard::AppGuardTcpInfo* Arena::CreateMaybeMessage<::appguard::AppGuardTcpInfo>(Arena*);
template<> ::appguard::AppGuardTcpResponse* Arena::CreateMaybeMessage<::appguard::AppGuardTcpResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace appguard {

enum FirewallPolicy : int {
  UNKNOWN = 0,
  ALLOW = 1,
  DENY = 2,
  FirewallPolicy_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  FirewallPolicy_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool FirewallPolicy_IsValid(int value);
constexpr FirewallPolicy FirewallPolicy_MIN = UNKNOWN;
constexpr FirewallPolicy FirewallPolicy_MAX = DENY;
constexpr int FirewallPolicy_ARRAYSIZE = FirewallPolicy_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* FirewallPolicy_descriptor();
template<typename T>
inline const std::string& FirewallPolicy_Name(T enum_t_value) {
  static_assert(::std::is_same<T, FirewallPolicy>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function FirewallPolicy_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    FirewallPolicy_descriptor(), enum_t_value);
}
inline bool FirewallPolicy_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, FirewallPolicy* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<FirewallPolicy>(
    FirewallPolicy_descriptor(), name, value);
}
// ===================================================================

class AppGuardTcpConnection final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:appguard.AppGuardTcpConnection) */ {
 public:
  inline AppGuardTcpConnection() : AppGuardTcpConnection(nullptr) {}
  ~AppGuardTcpConnection() override;
  explicit PROTOBUF_CONSTEXPR AppGuardTcpConnection(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AppGuardTcpConnection(const AppGuardTcpConnection& from);
  AppGuardTcpConnection(AppGuardTcpConnection&& from) noexcept
    : AppGuardTcpConnection() {
    *this = ::std::move(from);
  }

  inline AppGuardTcpConnection& operator=(const AppGuardTcpConnection& from) {
    CopyFrom(from);
    return *this;
  }
  inline AppGuardTcpConnection& operator=(AppGuardTcpConnection&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AppGuardTcpConnection& default_instance() {
    return *internal_default_instance();
  }
  static inline const AppGuardTcpConnection* internal_default_instance() {
    return reinterpret_cast<const AppGuardTcpConnection*>(
               &_AppGuardTcpConnection_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(AppGuardTcpConnection& a, AppGuardTcpConnection& b) {
    a.Swap(&b);
  }
  inline void Swap(AppGuardTcpConnection* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AppGuardTcpConnection* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AppGuardTcpConnection* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AppGuardTcpConnection>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AppGuardTcpConnection& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const AppGuardTcpConnection& from) {
    AppGuardTcpConnection::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AppGuardTcpConnection* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "appguard.AppGuardTcpConnection";
  }
  protected:
  explicit AppGuardTcpConnection(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSourceIpFieldNumber = 1,
    kDestinationIpFieldNumber = 3,
    kProtocolFieldNumber = 5,
    kSourcePortFieldNumber = 2,
    kDestinationPortFieldNumber = 4,
  };
  // optional string source_ip = 1;
  bool has_source_ip() const;
  private:
  bool _internal_has_source_ip() const;
  public:
  void clear_source_ip();
  const std::string& source_ip() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_source_ip(ArgT0&& arg0, ArgT... args);
  std::string* mutable_source_ip();
  PROTOBUF_NODISCARD std::string* release_source_ip();
  void set_allocated_source_ip(std::string* source_ip);
  private:
  const std::string& _internal_source_ip() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_source_ip(const std::string& value);
  std::string* _internal_mutable_source_ip();
  public:

  // optional string destination_ip = 3;
  bool has_destination_ip() const;
  private:
  bool _internal_has_destination_ip() const;
  public:
  void clear_destination_ip();
  const std::string& destination_ip() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_destination_ip(ArgT0&& arg0, ArgT... args);
  std::string* mutable_destination_ip();
  PROTOBUF_NODISCARD std::string* release_destination_ip();
  void set_allocated_destination_ip(std::string* destination_ip);
  private:
  const std::string& _internal_destination_ip() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_destination_ip(const std::string& value);
  std::string* _internal_mutable_destination_ip();
  public:

  // string protocol = 5;
  void clear_protocol();
  const std::string& protocol() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_protocol(ArgT0&& arg0, ArgT... args);
  std::string* mutable_protocol();
  PROTOBUF_NODISCARD std::string* release_protocol();
  void set_allocated_protocol(std::string* protocol);
  private:
  const std::string& _internal_protocol() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_protocol(const std::string& value);
  std::string* _internal_mutable_protocol();
  public:

  // optional uint32 source_port = 2;
  bool has_source_port() const;
  private:
  bool _internal_has_source_port() const;
  public:
  void clear_source_port();
  uint32_t source_port() const;
  void set_source_port(uint32_t value);
  private:
  uint32_t _internal_source_port() const;
  void _internal_set_source_port(uint32_t value);
  public:

  // optional uint32 destination_port = 4;
  bool has_destination_port() const;
  private:
  bool _internal_has_destination_port() const;
  public:
  void clear_destination_port();
  uint32_t destination_port() const;
  void set_destination_port(uint32_t value);
  private:
  uint32_t _internal_destination_port() const;
  void _internal_set_destination_port(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:appguard.AppGuardTcpConnection)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr source_ip_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr destination_ip_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr protocol_;
    uint32_t source_port_;
    uint32_t destination_port_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_appguard_2eproto;
};
// -------------------------------------------------------------------

class AppGuardIpInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:appguard.AppGuardIpInfo) */ {
 public:
  inline AppGuardIpInfo() : AppGuardIpInfo(nullptr) {}
  ~AppGuardIpInfo() override;
  explicit PROTOBUF_CONSTEXPR AppGuardIpInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AppGuardIpInfo(const AppGuardIpInfo& from);
  AppGuardIpInfo(AppGuardIpInfo&& from) noexcept
    : AppGuardIpInfo() {
    *this = ::std::move(from);
  }

  inline AppGuardIpInfo& operator=(const AppGuardIpInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline AppGuardIpInfo& operator=(AppGuardIpInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AppGuardIpInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const AppGuardIpInfo* internal_default_instance() {
    return reinterpret_cast<const AppGuardIpInfo*>(
               &_AppGuardIpInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(AppGuardIpInfo& a, AppGuardIpInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(AppGuardIpInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AppGuardIpInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AppGuardIpInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AppGuardIpInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AppGuardIpInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const AppGuardIpInfo& from) {
    AppGuardIpInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AppGuardIpInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "appguard.AppGuardIpInfo";
  }
  protected:
  explicit AppGuardIpInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIpFieldNumber = 1,
    kCountryFieldNumber = 2,
    kAsnFieldNumber = 3,
    kOrgFieldNumber = 4,
    kContinentCodeFieldNumber = 5,
    kCityFieldNumber = 6,
    kRegionFieldNumber = 7,
    kPostalFieldNumber = 8,
    kTimezoneFieldNumber = 9,
    kBlacklistFieldNumber = 100,
  };
  // string ip = 1;
  void clear_ip();
  const std::string& ip() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_ip(ArgT0&& arg0, ArgT... args);
  std::string* mutable_ip();
  PROTOBUF_NODISCARD std::string* release_ip();
  void set_allocated_ip(std::string* ip);
  private:
  const std::string& _internal_ip() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_ip(const std::string& value);
  std::string* _internal_mutable_ip();
  public:

  // optional string country = 2;
  bool has_country() const;
  private:
  bool _internal_has_country() const;
  public:
  void clear_country();
  const std::string& country() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_country(ArgT0&& arg0, ArgT... args);
  std::string* mutable_country();
  PROTOBUF_NODISCARD std::string* release_country();
  void set_allocated_country(std::string* country);
  private:
  const std::string& _internal_country() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_country(const std::string& value);
  std::string* _internal_mutable_country();
  public:

  // optional string asn = 3;
  bool has_asn() const;
  private:
  bool _internal_has_asn() const;
  public:
  void clear_asn();
  const std::string& asn() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_asn(ArgT0&& arg0, ArgT... args);
  std::string* mutable_asn();
  PROTOBUF_NODISCARD std::string* release_asn();
  void set_allocated_asn(std::string* asn);
  private:
  const std::string& _internal_asn() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_asn(const std::string& value);
  std::string* _internal_mutable_asn();
  public:

  // optional string org = 4;
  bool has_org() const;
  private:
  bool _internal_has_org() const;
  public:
  void clear_org();
  const std::string& org() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_org(ArgT0&& arg0, ArgT... args);
  std::string* mutable_org();
  PROTOBUF_NODISCARD std::string* release_org();
  void set_allocated_org(std::string* org);
  private:
  const std::string& _internal_org() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_org(const std::string& value);
  std::string* _internal_mutable_org();
  public:

  // optional string continent_code = 5;
  bool has_continent_code() const;
  private:
  bool _internal_has_continent_code() const;
  public:
  void clear_continent_code();
  const std::string& continent_code() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_continent_code(ArgT0&& arg0, ArgT... args);
  std::string* mutable_continent_code();
  PROTOBUF_NODISCARD std::string* release_continent_code();
  void set_allocated_continent_code(std::string* continent_code);
  private:
  const std::string& _internal_continent_code() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_continent_code(const std::string& value);
  std::string* _internal_mutable_continent_code();
  public:

  // optional string city = 6;
  bool has_city() const;
  private:
  bool _internal_has_city() const;
  public:
  void clear_city();
  const std::string& city() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_city(ArgT0&& arg0, ArgT... args);
  std::string* mutable_city();
  PROTOBUF_NODISCARD std::string* release_city();
  void set_allocated_city(std::string* city);
  private:
  const std::string& _internal_city() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_city(const std::string& value);
  std::string* _internal_mutable_city();
  public:

  // optional string region = 7;
  bool has_region() const;
  private:
  bool _internal_has_region() const;
  public:
  void clear_region();
  const std::string& region() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_region(ArgT0&& arg0, ArgT... args);
  std::string* mutable_region();
  PROTOBUF_NODISCARD std::string* release_region();
  void set_allocated_region(std::string* region);
  private:
  const std::string& _internal_region() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_region(const std::string& value);
  std::string* _internal_mutable_region();
  public:

  // optional string postal = 8;
  bool has_postal() const;
  private:
  bool _internal_has_postal() const;
  public:
  void clear_postal();
  const std::string& postal() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_postal(ArgT0&& arg0, ArgT... args);
  std::string* mutable_postal();
  PROTOBUF_NODISCARD std::string* release_postal();
  void set_allocated_postal(std::string* postal);
  private:
  const std::string& _internal_postal() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_postal(const std::string& value);
  std::string* _internal_mutable_postal();
  public:

  // optional string timezone = 9;
  bool has_timezone() const;
  private:
  bool _internal_has_timezone() const;
  public:
  void clear_timezone();
  const std::string& timezone() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_timezone(ArgT0&& arg0, ArgT... args);
  std::string* mutable_timezone();
  PROTOBUF_NODISCARD std::string* release_timezone();
  void set_allocated_timezone(std::string* timezone);
  private:
  const std::string& _internal_timezone() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_timezone(const std::string& value);
  std::string* _internal_mutable_timezone();
  public:

  // uint32 blacklist = 100;
  void clear_blacklist();
  uint32_t blacklist() const;
  void set_blacklist(uint32_t value);
  private:
  uint32_t _internal_blacklist() const;
  void _internal_set_blacklist(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:appguard.AppGuardIpInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ip_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr country_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr asn_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr org_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr continent_code_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr city_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr region_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr postal_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr timezone_;
    uint32_t blacklist_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_appguard_2eproto;
};
// -------------------------------------------------------------------

class AppGuardTcpInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:appguard.AppGuardTcpInfo) */ {
 public:
  inline AppGuardTcpInfo() : AppGuardTcpInfo(nullptr) {}
  ~AppGuardTcpInfo() override;
  explicit PROTOBUF_CONSTEXPR AppGuardTcpInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AppGuardTcpInfo(const AppGuardTcpInfo& from);
  AppGuardTcpInfo(AppGuardTcpInfo&& from) noexcept
    : AppGuardTcpInfo() {
    *this = ::std::move(from);
  }

  inline AppGuardTcpInfo& operator=(const AppGuardTcpInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline AppGuardTcpInfo& operator=(AppGuardTcpInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AppGuardTcpInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const AppGuardTcpInfo* internal_default_instance() {
    return reinterpret_cast<const AppGuardTcpInfo*>(
               &_AppGuardTcpInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(AppGuardTcpInfo& a, AppGuardTcpInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(AppGuardTcpInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AppGuardTcpInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AppGuardTcpInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AppGuardTcpInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AppGuardTcpInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const AppGuardTcpInfo& from) {
    AppGuardTcpInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AppGuardTcpInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "appguard.AppGuardTcpInfo";
  }
  protected:
  explicit AppGuardTcpInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kConnectionFieldNumber = 1,
    kIpInfoFieldNumber = 2,
    kTcpIdFieldNumber = 3,
  };
  // .appguard.AppGuardTcpConnection connection = 1;
  bool has_connection() const;
  private:
  bool _internal_has_connection() const;
  public:
  void clear_connection();
  const ::appguard::AppGuardTcpConnection& connection() const;
  PROTOBUF_NODISCARD ::appguard::AppGuardTcpConnection* release_connection();
  ::appguard::AppGuardTcpConnection* mutable_connection();
  void set_allocated_connection(::appguard::AppGuardTcpConnection* connection);
  private:
  const ::appguard::AppGuardTcpConnection& _internal_connection() const;
  ::appguard::AppGuardTcpConnection* _internal_mutable_connection();
  public:
  void unsafe_arena_set_allocated_connection(
      ::appguard::AppGuardTcpConnection* connection);
  ::appguard::AppGuardTcpConnection* unsafe_arena_release_connection();

  // .appguard.AppGuardIpInfo ip_info = 2;
  bool has_ip_info() const;
  private:
  bool _internal_has_ip_info() const;
  public:
  void clear_ip_info();
  const ::appguard::AppGuardIpInfo& ip_info() const;
  PROTOBUF_NODISCARD ::appguard::AppGuardIpInfo* release_ip_info();
  ::appguard::AppGuardIpInfo* mutable_ip_info();
  void set_allocated_ip_info(::appguard::AppGuardIpInfo* ip_info);
  private:
  const ::appguard::AppGuardIpInfo& _internal_ip_info() const;
  ::appguard::AppGuardIpInfo* _internal_mutable_ip_info();
  public:
  void unsafe_arena_set_allocated_ip_info(
      ::appguard::AppGuardIpInfo* ip_info);
  ::appguard::AppGuardIpInfo* unsafe_arena_release_ip_info();

  // uint64 tcp_id = 3;
  void clear_tcp_id();
  uint64_t tcp_id() const;
  void set_tcp_id(uint64_t value);
  private:
  uint64_t _internal_tcp_id() const;
  void _internal_set_tcp_id(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:appguard.AppGuardTcpInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::appguard::AppGuardTcpConnection* connection_;
    ::appguard::AppGuardIpInfo* ip_info_;
    uint64_t tcp_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_appguard_2eproto;
};
// -------------------------------------------------------------------

class AppGuardHttpRequest_HeadersEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<AppGuardHttpRequest_HeadersEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<AppGuardHttpRequest_HeadersEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> SuperType;
  AppGuardHttpRequest_HeadersEntry_DoNotUse();
  explicit PROTOBUF_CONSTEXPR AppGuardHttpRequest_HeadersEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit AppGuardHttpRequest_HeadersEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const AppGuardHttpRequest_HeadersEntry_DoNotUse& other);
  static const AppGuardHttpRequest_HeadersEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const AppGuardHttpRequest_HeadersEntry_DoNotUse*>(&_AppGuardHttpRequest_HeadersEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "appguard.AppGuardHttpRequest.HeadersEntry.key");
 }
  static bool ValidateValue(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "appguard.AppGuardHttpRequest.HeadersEntry.value");
 }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  friend struct ::TableStruct_appguard_2eproto;
};

// -------------------------------------------------------------------

class AppGuardHttpRequest_QueryEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<AppGuardHttpRequest_QueryEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<AppGuardHttpRequest_QueryEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> SuperType;
  AppGuardHttpRequest_QueryEntry_DoNotUse();
  explicit PROTOBUF_CONSTEXPR AppGuardHttpRequest_QueryEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit AppGuardHttpRequest_QueryEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const AppGuardHttpRequest_QueryEntry_DoNotUse& other);
  static const AppGuardHttpRequest_QueryEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const AppGuardHttpRequest_QueryEntry_DoNotUse*>(&_AppGuardHttpRequest_QueryEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "appguard.AppGuardHttpRequest.QueryEntry.key");
 }
  static bool ValidateValue(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "appguard.AppGuardHttpRequest.QueryEntry.value");
 }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  friend struct ::TableStruct_appguard_2eproto;
};

// -------------------------------------------------------------------

class AppGuardHttpRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:appguard.AppGuardHttpRequest) */ {
 public:
  inline AppGuardHttpRequest() : AppGuardHttpRequest(nullptr) {}
  ~AppGuardHttpRequest() override;
  explicit PROTOBUF_CONSTEXPR AppGuardHttpRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AppGuardHttpRequest(const AppGuardHttpRequest& from);
  AppGuardHttpRequest(AppGuardHttpRequest&& from) noexcept
    : AppGuardHttpRequest() {
    *this = ::std::move(from);
  }

  inline AppGuardHttpRequest& operator=(const AppGuardHttpRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline AppGuardHttpRequest& operator=(AppGuardHttpRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AppGuardHttpRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const AppGuardHttpRequest* internal_default_instance() {
    return reinterpret_cast<const AppGuardHttpRequest*>(
               &_AppGuardHttpRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(AppGuardHttpRequest& a, AppGuardHttpRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(AppGuardHttpRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AppGuardHttpRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AppGuardHttpRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AppGuardHttpRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AppGuardHttpRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const AppGuardHttpRequest& from) {
    AppGuardHttpRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AppGuardHttpRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "appguard.AppGuardHttpRequest";
  }
  protected:
  explicit AppGuardHttpRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kHeadersFieldNumber = 2,
    kQueryFieldNumber = 5,
    kOriginalUrlFieldNumber = 1,
    kMethodFieldNumber = 3,
    kBodyFieldNumber = 4,
    kTcpInfoFieldNumber = 100,
  };
  // map<string, string> headers = 2;
  int headers_size() const;
  private:
  int _internal_headers_size() const;
  public:
  void clear_headers();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      _internal_headers() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      _internal_mutable_headers();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      headers() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      mutable_headers();

  // map<string, string> query = 5;
  int query_size() const;
  private:
  int _internal_query_size() const;
  public:
  void clear_query();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      _internal_query() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      _internal_mutable_query();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      query() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      mutable_query();

  // string original_url = 1;
  void clear_original_url();
  const std::string& original_url() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_original_url(ArgT0&& arg0, ArgT... args);
  std::string* mutable_original_url();
  PROTOBUF_NODISCARD std::string* release_original_url();
  void set_allocated_original_url(std::string* original_url);
  private:
  const std::string& _internal_original_url() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_original_url(const std::string& value);
  std::string* _internal_mutable_original_url();
  public:

  // string method = 3;
  void clear_method();
  const std::string& method() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_method(ArgT0&& arg0, ArgT... args);
  std::string* mutable_method();
  PROTOBUF_NODISCARD std::string* release_method();
  void set_allocated_method(std::string* method);
  private:
  const std::string& _internal_method() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_method(const std::string& value);
  std::string* _internal_mutable_method();
  public:

  // optional string body = 4;
  bool has_body() const;
  private:
  bool _internal_has_body() const;
  public:
  void clear_body();
  const std::string& body() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_body(ArgT0&& arg0, ArgT... args);
  std::string* mutable_body();
  PROTOBUF_NODISCARD std::string* release_body();
  void set_allocated_body(std::string* body);
  private:
  const std::string& _internal_body() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_body(const std::string& value);
  std::string* _internal_mutable_body();
  public:

  // .appguard.AppGuardTcpInfo tcp_info = 100;
  bool has_tcp_info() const;
  private:
  bool _internal_has_tcp_info() const;
  public:
  void clear_tcp_info();
  const ::appguard::AppGuardTcpInfo& tcp_info() const;
  PROTOBUF_NODISCARD ::appguard::AppGuardTcpInfo* release_tcp_info();
  ::appguard::AppGuardTcpInfo* mutable_tcp_info();
  void set_allocated_tcp_info(::appguard::AppGuardTcpInfo* tcp_info);
  private:
  const ::appguard::AppGuardTcpInfo& _internal_tcp_info() const;
  ::appguard::AppGuardTcpInfo* _internal_mutable_tcp_info();
  public:
  void unsafe_arena_set_allocated_tcp_info(
      ::appguard::AppGuardTcpInfo* tcp_info);
  ::appguard::AppGuardTcpInfo* unsafe_arena_release_tcp_info();

  // @@protoc_insertion_point(class_scope:appguard.AppGuardHttpRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::MapField<
        AppGuardHttpRequest_HeadersEntry_DoNotUse,
        std::string, std::string,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> headers_;
    ::PROTOBUF_NAMESPACE_ID::internal::MapField<
        AppGuardHttpRequest_QueryEntry_DoNotUse,
        std::string, std::string,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> query_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr original_url_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr method_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr body_;
    ::appguard::AppGuardTcpInfo* tcp_info_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_appguard_2eproto;
};
// -------------------------------------------------------------------

class AppGuardHttpResponse_HeadersEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<AppGuardHttpResponse_HeadersEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<AppGuardHttpResponse_HeadersEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> SuperType;
  AppGuardHttpResponse_HeadersEntry_DoNotUse();
  explicit PROTOBUF_CONSTEXPR AppGuardHttpResponse_HeadersEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit AppGuardHttpResponse_HeadersEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const AppGuardHttpResponse_HeadersEntry_DoNotUse& other);
  static const AppGuardHttpResponse_HeadersEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const AppGuardHttpResponse_HeadersEntry_DoNotUse*>(&_AppGuardHttpResponse_HeadersEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "appguard.AppGuardHttpResponse.HeadersEntry.key");
 }
  static bool ValidateValue(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "appguard.AppGuardHttpResponse.HeadersEntry.value");
 }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  friend struct ::TableStruct_appguard_2eproto;
};

// -------------------------------------------------------------------

class AppGuardHttpResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:appguard.AppGuardHttpResponse) */ {
 public:
  inline AppGuardHttpResponse() : AppGuardHttpResponse(nullptr) {}
  ~AppGuardHttpResponse() override;
  explicit PROTOBUF_CONSTEXPR AppGuardHttpResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AppGuardHttpResponse(const AppGuardHttpResponse& from);
  AppGuardHttpResponse(AppGuardHttpResponse&& from) noexcept
    : AppGuardHttpResponse() {
    *this = ::std::move(from);
  }

  inline AppGuardHttpResponse& operator=(const AppGuardHttpResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline AppGuardHttpResponse& operator=(AppGuardHttpResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AppGuardHttpResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const AppGuardHttpResponse* internal_default_instance() {
    return reinterpret_cast<const AppGuardHttpResponse*>(
               &_AppGuardHttpResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(AppGuardHttpResponse& a, AppGuardHttpResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(AppGuardHttpResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AppGuardHttpResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AppGuardHttpResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AppGuardHttpResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AppGuardHttpResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const AppGuardHttpResponse& from) {
    AppGuardHttpResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AppGuardHttpResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "appguard.AppGuardHttpResponse";
  }
  protected:
  explicit AppGuardHttpResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kHeadersFieldNumber = 2,
    kTcpInfoFieldNumber = 100,
    kCodeFieldNumber = 1,
  };
  // map<string, string> headers = 2;
  int headers_size() const;
  private:
  int _internal_headers_size() const;
  public:
  void clear_headers();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      _internal_headers() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      _internal_mutable_headers();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      headers() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      mutable_headers();

  // .appguard.AppGuardTcpInfo tcp_info = 100;
  bool has_tcp_info() const;
  private:
  bool _internal_has_tcp_info() const;
  public:
  void clear_tcp_info();
  const ::appguard::AppGuardTcpInfo& tcp_info() const;
  PROTOBUF_NODISCARD ::appguard::AppGuardTcpInfo* release_tcp_info();
  ::appguard::AppGuardTcpInfo* mutable_tcp_info();
  void set_allocated_tcp_info(::appguard::AppGuardTcpInfo* tcp_info);
  private:
  const ::appguard::AppGuardTcpInfo& _internal_tcp_info() const;
  ::appguard::AppGuardTcpInfo* _internal_mutable_tcp_info();
  public:
  void unsafe_arena_set_allocated_tcp_info(
      ::appguard::AppGuardTcpInfo* tcp_info);
  ::appguard::AppGuardTcpInfo* unsafe_arena_release_tcp_info();

  // uint32 code = 1;
  void clear_code();
  uint32_t code() const;
  void set_code(uint32_t value);
  private:
  uint32_t _internal_code() const;
  void _internal_set_code(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:appguard.AppGuardHttpResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::MapField<
        AppGuardHttpResponse_HeadersEntry_DoNotUse,
        std::string, std::string,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> headers_;
    ::appguard::AppGuardTcpInfo* tcp_info_;
    uint32_t code_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_appguard_2eproto;
};
// -------------------------------------------------------------------

class AppGuardSmtpRequest_HeadersEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<AppGuardSmtpRequest_HeadersEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<AppGuardSmtpRequest_HeadersEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> SuperType;
  AppGuardSmtpRequest_HeadersEntry_DoNotUse();
  explicit PROTOBUF_CONSTEXPR AppGuardSmtpRequest_HeadersEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit AppGuardSmtpRequest_HeadersEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const AppGuardSmtpRequest_HeadersEntry_DoNotUse& other);
  static const AppGuardSmtpRequest_HeadersEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const AppGuardSmtpRequest_HeadersEntry_DoNotUse*>(&_AppGuardSmtpRequest_HeadersEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "appguard.AppGuardSmtpRequest.HeadersEntry.key");
 }
  static bool ValidateValue(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "appguard.AppGuardSmtpRequest.HeadersEntry.value");
 }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  friend struct ::TableStruct_appguard_2eproto;
};

// -------------------------------------------------------------------

class AppGuardSmtpRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:appguard.AppGuardSmtpRequest) */ {
 public:
  inline AppGuardSmtpRequest() : AppGuardSmtpRequest(nullptr) {}
  ~AppGuardSmtpRequest() override;
  explicit PROTOBUF_CONSTEXPR AppGuardSmtpRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AppGuardSmtpRequest(const AppGuardSmtpRequest& from);
  AppGuardSmtpRequest(AppGuardSmtpRequest&& from) noexcept
    : AppGuardSmtpRequest() {
    *this = ::std::move(from);
  }

  inline AppGuardSmtpRequest& operator=(const AppGuardSmtpRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline AppGuardSmtpRequest& operator=(AppGuardSmtpRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AppGuardSmtpRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const AppGuardSmtpRequest* internal_default_instance() {
    return reinterpret_cast<const AppGuardSmtpRequest*>(
               &_AppGuardSmtpRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(AppGuardSmtpRequest& a, AppGuardSmtpRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(AppGuardSmtpRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AppGuardSmtpRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AppGuardSmtpRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AppGuardSmtpRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AppGuardSmtpRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const AppGuardSmtpRequest& from) {
    AppGuardSmtpRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AppGuardSmtpRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "appguard.AppGuardSmtpRequest";
  }
  protected:
  explicit AppGuardSmtpRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kHeadersFieldNumber = 1,
    kBodyFieldNumber = 2,
    kTcpInfoFieldNumber = 100,
  };
  // map<string, string> headers = 1;
  int headers_size() const;
  private:
  int _internal_headers_size() const;
  public:
  void clear_headers();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      _internal_headers() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      _internal_mutable_headers();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      headers() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      mutable_headers();

  // optional string body = 2;
  bool has_body() const;
  private:
  bool _internal_has_body() const;
  public:
  void clear_body();
  const std::string& body() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_body(ArgT0&& arg0, ArgT... args);
  std::string* mutable_body();
  PROTOBUF_NODISCARD std::string* release_body();
  void set_allocated_body(std::string* body);
  private:
  const std::string& _internal_body() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_body(const std::string& value);
  std::string* _internal_mutable_body();
  public:

  // .appguard.AppGuardTcpInfo tcp_info = 100;
  bool has_tcp_info() const;
  private:
  bool _internal_has_tcp_info() const;
  public:
  void clear_tcp_info();
  const ::appguard::AppGuardTcpInfo& tcp_info() const;
  PROTOBUF_NODISCARD ::appguard::AppGuardTcpInfo* release_tcp_info();
  ::appguard::AppGuardTcpInfo* mutable_tcp_info();
  void set_allocated_tcp_info(::appguard::AppGuardTcpInfo* tcp_info);
  private:
  const ::appguard::AppGuardTcpInfo& _internal_tcp_info() const;
  ::appguard::AppGuardTcpInfo* _internal_mutable_tcp_info();
  public:
  void unsafe_arena_set_allocated_tcp_info(
      ::appguard::AppGuardTcpInfo* tcp_info);
  ::appguard::AppGuardTcpInfo* unsafe_arena_release_tcp_info();

  // @@protoc_insertion_point(class_scope:appguard.AppGuardSmtpRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::MapField<
        AppGuardSmtpRequest_HeadersEntry_DoNotUse,
        std::string, std::string,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> headers_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr body_;
    ::appguard::AppGuardTcpInfo* tcp_info_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_appguard_2eproto;
};
// -------------------------------------------------------------------

class AppGuardSmtpResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:appguard.AppGuardSmtpResponse) */ {
 public:
  inline AppGuardSmtpResponse() : AppGuardSmtpResponse(nullptr) {}
  ~AppGuardSmtpResponse() override;
  explicit PROTOBUF_CONSTEXPR AppGuardSmtpResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AppGuardSmtpResponse(const AppGuardSmtpResponse& from);
  AppGuardSmtpResponse(AppGuardSmtpResponse&& from) noexcept
    : AppGuardSmtpResponse() {
    *this = ::std::move(from);
  }

  inline AppGuardSmtpResponse& operator=(const AppGuardSmtpResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline AppGuardSmtpResponse& operator=(AppGuardSmtpResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AppGuardSmtpResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const AppGuardSmtpResponse* internal_default_instance() {
    return reinterpret_cast<const AppGuardSmtpResponse*>(
               &_AppGuardSmtpResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(AppGuardSmtpResponse& a, AppGuardSmtpResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(AppGuardSmtpResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AppGuardSmtpResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AppGuardSmtpResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AppGuardSmtpResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AppGuardSmtpResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const AppGuardSmtpResponse& from) {
    AppGuardSmtpResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AppGuardSmtpResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "appguard.AppGuardSmtpResponse";
  }
  protected:
  explicit AppGuardSmtpResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTcpInfoFieldNumber = 100,
    kCodeFieldNumber = 1,
  };
  // .appguard.AppGuardTcpInfo tcp_info = 100;
  bool has_tcp_info() const;
  private:
  bool _internal_has_tcp_info() const;
  public:
  void clear_tcp_info();
  const ::appguard::AppGuardTcpInfo& tcp_info() const;
  PROTOBUF_NODISCARD ::appguard::AppGuardTcpInfo* release_tcp_info();
  ::appguard::AppGuardTcpInfo* mutable_tcp_info();
  void set_allocated_tcp_info(::appguard::AppGuardTcpInfo* tcp_info);
  private:
  const ::appguard::AppGuardTcpInfo& _internal_tcp_info() const;
  ::appguard::AppGuardTcpInfo* _internal_mutable_tcp_info();
  public:
  void unsafe_arena_set_allocated_tcp_info(
      ::appguard::AppGuardTcpInfo* tcp_info);
  ::appguard::AppGuardTcpInfo* unsafe_arena_release_tcp_info();

  // optional uint32 code = 1;
  bool has_code() const;
  private:
  bool _internal_has_code() const;
  public:
  void clear_code();
  uint32_t code() const;
  void set_code(uint32_t value);
  private:
  uint32_t _internal_code() const;
  void _internal_set_code(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:appguard.AppGuardSmtpResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::appguard::AppGuardTcpInfo* tcp_info_;
    uint32_t code_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_appguard_2eproto;
};
// -------------------------------------------------------------------

class AppGuardResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:appguard.AppGuardResponse) */ {
 public:
  inline AppGuardResponse() : AppGuardResponse(nullptr) {}
  ~AppGuardResponse() override;
  explicit PROTOBUF_CONSTEXPR AppGuardResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AppGuardResponse(const AppGuardResponse& from);
  AppGuardResponse(AppGuardResponse&& from) noexcept
    : AppGuardResponse() {
    *this = ::std::move(from);
  }

  inline AppGuardResponse& operator=(const AppGuardResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline AppGuardResponse& operator=(AppGuardResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AppGuardResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const AppGuardResponse* internal_default_instance() {
    return reinterpret_cast<const AppGuardResponse*>(
               &_AppGuardResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(AppGuardResponse& a, AppGuardResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(AppGuardResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AppGuardResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AppGuardResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AppGuardResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AppGuardResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const AppGuardResponse& from) {
    AppGuardResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AppGuardResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "appguard.AppGuardResponse";
  }
  protected:
  explicit AppGuardResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPolicyFieldNumber = 2,
  };
  // .appguard.FirewallPolicy policy = 2;
  void clear_policy();
  ::appguard::FirewallPolicy policy() const;
  void set_policy(::appguard::FirewallPolicy value);
  private:
  ::appguard::FirewallPolicy _internal_policy() const;
  void _internal_set_policy(::appguard::FirewallPolicy value);
  public:

  // @@protoc_insertion_point(class_scope:appguard.AppGuardResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int policy_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_appguard_2eproto;
};
// -------------------------------------------------------------------

class AppGuardTcpResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:appguard.AppGuardTcpResponse) */ {
 public:
  inline AppGuardTcpResponse() : AppGuardTcpResponse(nullptr) {}
  ~AppGuardTcpResponse() override;
  explicit PROTOBUF_CONSTEXPR AppGuardTcpResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AppGuardTcpResponse(const AppGuardTcpResponse& from);
  AppGuardTcpResponse(AppGuardTcpResponse&& from) noexcept
    : AppGuardTcpResponse() {
    *this = ::std::move(from);
  }

  inline AppGuardTcpResponse& operator=(const AppGuardTcpResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline AppGuardTcpResponse& operator=(AppGuardTcpResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AppGuardTcpResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const AppGuardTcpResponse* internal_default_instance() {
    return reinterpret_cast<const AppGuardTcpResponse*>(
               &_AppGuardTcpResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(AppGuardTcpResponse& a, AppGuardTcpResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(AppGuardTcpResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AppGuardTcpResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AppGuardTcpResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AppGuardTcpResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AppGuardTcpResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const AppGuardTcpResponse& from) {
    AppGuardTcpResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AppGuardTcpResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "appguard.AppGuardTcpResponse";
  }
  protected:
  explicit AppGuardTcpResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTcpInfoFieldNumber = 1,
  };
  // .appguard.AppGuardTcpInfo tcp_info = 1;
  bool has_tcp_info() const;
  private:
  bool _internal_has_tcp_info() const;
  public:
  void clear_tcp_info();
  const ::appguard::AppGuardTcpInfo& tcp_info() const;
  PROTOBUF_NODISCARD ::appguard::AppGuardTcpInfo* release_tcp_info();
  ::appguard::AppGuardTcpInfo* mutable_tcp_info();
  void set_allocated_tcp_info(::appguard::AppGuardTcpInfo* tcp_info);
  private:
  const ::appguard::AppGuardTcpInfo& _internal_tcp_info() const;
  ::appguard::AppGuardTcpInfo* _internal_mutable_tcp_info();
  public:
  void unsafe_arena_set_allocated_tcp_info(
      ::appguard::AppGuardTcpInfo* tcp_info);
  ::appguard::AppGuardTcpInfo* unsafe_arena_release_tcp_info();

  // @@protoc_insertion_point(class_scope:appguard.AppGuardTcpResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::appguard::AppGuardTcpInfo* tcp_info_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_appguard_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// AppGuardTcpConnection

// optional string source_ip = 1;
inline bool AppGuardTcpConnection::_internal_has_source_ip() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool AppGuardTcpConnection::has_source_ip() const {
  return _internal_has_source_ip();
}
inline void AppGuardTcpConnection::clear_source_ip() {
  _impl_.source_ip_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& AppGuardTcpConnection::source_ip() const {
  // @@protoc_insertion_point(field_get:appguard.AppGuardTcpConnection.source_ip)
  return _internal_source_ip();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AppGuardTcpConnection::set_source_ip(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.source_ip_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:appguard.AppGuardTcpConnection.source_ip)
}
inline std::string* AppGuardTcpConnection::mutable_source_ip() {
  std::string* _s = _internal_mutable_source_ip();
  // @@protoc_insertion_point(field_mutable:appguard.AppGuardTcpConnection.source_ip)
  return _s;
}
inline const std::string& AppGuardTcpConnection::_internal_source_ip() const {
  return _impl_.source_ip_.Get();
}
inline void AppGuardTcpConnection::_internal_set_source_ip(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.source_ip_.Set(value, GetArenaForAllocation());
}
inline std::string* AppGuardTcpConnection::_internal_mutable_source_ip() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.source_ip_.Mutable(GetArenaForAllocation());
}
inline std::string* AppGuardTcpConnection::release_source_ip() {
  // @@protoc_insertion_point(field_release:appguard.AppGuardTcpConnection.source_ip)
  if (!_internal_has_source_ip()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.source_ip_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.source_ip_.IsDefault()) {
    _impl_.source_ip_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void AppGuardTcpConnection::set_allocated_source_ip(std::string* source_ip) {
  if (source_ip != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.source_ip_.SetAllocated(source_ip, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.source_ip_.IsDefault()) {
    _impl_.source_ip_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:appguard.AppGuardTcpConnection.source_ip)
}

// optional uint32 source_port = 2;
inline bool AppGuardTcpConnection::_internal_has_source_port() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool AppGuardTcpConnection::has_source_port() const {
  return _internal_has_source_port();
}
inline void AppGuardTcpConnection::clear_source_port() {
  _impl_.source_port_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline uint32_t AppGuardTcpConnection::_internal_source_port() const {
  return _impl_.source_port_;
}
inline uint32_t AppGuardTcpConnection::source_port() const {
  // @@protoc_insertion_point(field_get:appguard.AppGuardTcpConnection.source_port)
  return _internal_source_port();
}
inline void AppGuardTcpConnection::_internal_set_source_port(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.source_port_ = value;
}
inline void AppGuardTcpConnection::set_source_port(uint32_t value) {
  _internal_set_source_port(value);
  // @@protoc_insertion_point(field_set:appguard.AppGuardTcpConnection.source_port)
}

// optional string destination_ip = 3;
inline bool AppGuardTcpConnection::_internal_has_destination_ip() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool AppGuardTcpConnection::has_destination_ip() const {
  return _internal_has_destination_ip();
}
inline void AppGuardTcpConnection::clear_destination_ip() {
  _impl_.destination_ip_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& AppGuardTcpConnection::destination_ip() const {
  // @@protoc_insertion_point(field_get:appguard.AppGuardTcpConnection.destination_ip)
  return _internal_destination_ip();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AppGuardTcpConnection::set_destination_ip(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000002u;
 _impl_.destination_ip_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:appguard.AppGuardTcpConnection.destination_ip)
}
inline std::string* AppGuardTcpConnection::mutable_destination_ip() {
  std::string* _s = _internal_mutable_destination_ip();
  // @@protoc_insertion_point(field_mutable:appguard.AppGuardTcpConnection.destination_ip)
  return _s;
}
inline const std::string& AppGuardTcpConnection::_internal_destination_ip() const {
  return _impl_.destination_ip_.Get();
}
inline void AppGuardTcpConnection::_internal_set_destination_ip(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.destination_ip_.Set(value, GetArenaForAllocation());
}
inline std::string* AppGuardTcpConnection::_internal_mutable_destination_ip() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.destination_ip_.Mutable(GetArenaForAllocation());
}
inline std::string* AppGuardTcpConnection::release_destination_ip() {
  // @@protoc_insertion_point(field_release:appguard.AppGuardTcpConnection.destination_ip)
  if (!_internal_has_destination_ip()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* p = _impl_.destination_ip_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.destination_ip_.IsDefault()) {
    _impl_.destination_ip_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void AppGuardTcpConnection::set_allocated_destination_ip(std::string* destination_ip) {
  if (destination_ip != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.destination_ip_.SetAllocated(destination_ip, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.destination_ip_.IsDefault()) {
    _impl_.destination_ip_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:appguard.AppGuardTcpConnection.destination_ip)
}

// optional uint32 destination_port = 4;
inline bool AppGuardTcpConnection::_internal_has_destination_port() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool AppGuardTcpConnection::has_destination_port() const {
  return _internal_has_destination_port();
}
inline void AppGuardTcpConnection::clear_destination_port() {
  _impl_.destination_port_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline uint32_t AppGuardTcpConnection::_internal_destination_port() const {
  return _impl_.destination_port_;
}
inline uint32_t AppGuardTcpConnection::destination_port() const {
  // @@protoc_insertion_point(field_get:appguard.AppGuardTcpConnection.destination_port)
  return _internal_destination_port();
}
inline void AppGuardTcpConnection::_internal_set_destination_port(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.destination_port_ = value;
}
inline void AppGuardTcpConnection::set_destination_port(uint32_t value) {
  _internal_set_destination_port(value);
  // @@protoc_insertion_point(field_set:appguard.AppGuardTcpConnection.destination_port)
}

// string protocol = 5;
inline void AppGuardTcpConnection::clear_protocol() {
  _impl_.protocol_.ClearToEmpty();
}
inline const std::string& AppGuardTcpConnection::protocol() const {
  // @@protoc_insertion_point(field_get:appguard.AppGuardTcpConnection.protocol)
  return _internal_protocol();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AppGuardTcpConnection::set_protocol(ArgT0&& arg0, ArgT... args) {
 
 _impl_.protocol_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:appguard.AppGuardTcpConnection.protocol)
}
inline std::string* AppGuardTcpConnection::mutable_protocol() {
  std::string* _s = _internal_mutable_protocol();
  // @@protoc_insertion_point(field_mutable:appguard.AppGuardTcpConnection.protocol)
  return _s;
}
inline const std::string& AppGuardTcpConnection::_internal_protocol() const {
  return _impl_.protocol_.Get();
}
inline void AppGuardTcpConnection::_internal_set_protocol(const std::string& value) {
  
  _impl_.protocol_.Set(value, GetArenaForAllocation());
}
inline std::string* AppGuardTcpConnection::_internal_mutable_protocol() {
  
  return _impl_.protocol_.Mutable(GetArenaForAllocation());
}
inline std::string* AppGuardTcpConnection::release_protocol() {
  // @@protoc_insertion_point(field_release:appguard.AppGuardTcpConnection.protocol)
  return _impl_.protocol_.Release();
}
inline void AppGuardTcpConnection::set_allocated_protocol(std::string* protocol) {
  if (protocol != nullptr) {
    
  } else {
    
  }
  _impl_.protocol_.SetAllocated(protocol, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.protocol_.IsDefault()) {
    _impl_.protocol_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:appguard.AppGuardTcpConnection.protocol)
}

// -------------------------------------------------------------------

// AppGuardIpInfo

// string ip = 1;
inline void AppGuardIpInfo::clear_ip() {
  _impl_.ip_.ClearToEmpty();
}
inline const std::string& AppGuardIpInfo::ip() const {
  // @@protoc_insertion_point(field_get:appguard.AppGuardIpInfo.ip)
  return _internal_ip();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AppGuardIpInfo::set_ip(ArgT0&& arg0, ArgT... args) {
 
 _impl_.ip_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:appguard.AppGuardIpInfo.ip)
}
inline std::string* AppGuardIpInfo::mutable_ip() {
  std::string* _s = _internal_mutable_ip();
  // @@protoc_insertion_point(field_mutable:appguard.AppGuardIpInfo.ip)
  return _s;
}
inline const std::string& AppGuardIpInfo::_internal_ip() const {
  return _impl_.ip_.Get();
}
inline void AppGuardIpInfo::_internal_set_ip(const std::string& value) {
  
  _impl_.ip_.Set(value, GetArenaForAllocation());
}
inline std::string* AppGuardIpInfo::_internal_mutable_ip() {
  
  return _impl_.ip_.Mutable(GetArenaForAllocation());
}
inline std::string* AppGuardIpInfo::release_ip() {
  // @@protoc_insertion_point(field_release:appguard.AppGuardIpInfo.ip)
  return _impl_.ip_.Release();
}
inline void AppGuardIpInfo::set_allocated_ip(std::string* ip) {
  if (ip != nullptr) {
    
  } else {
    
  }
  _impl_.ip_.SetAllocated(ip, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.ip_.IsDefault()) {
    _impl_.ip_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:appguard.AppGuardIpInfo.ip)
}

// optional string country = 2;
inline bool AppGuardIpInfo::_internal_has_country() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool AppGuardIpInfo::has_country() const {
  return _internal_has_country();
}
inline void AppGuardIpInfo::clear_country() {
  _impl_.country_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& AppGuardIpInfo::country() const {
  // @@protoc_insertion_point(field_get:appguard.AppGuardIpInfo.country)
  return _internal_country();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AppGuardIpInfo::set_country(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.country_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:appguard.AppGuardIpInfo.country)
}
inline std::string* AppGuardIpInfo::mutable_country() {
  std::string* _s = _internal_mutable_country();
  // @@protoc_insertion_point(field_mutable:appguard.AppGuardIpInfo.country)
  return _s;
}
inline const std::string& AppGuardIpInfo::_internal_country() const {
  return _impl_.country_.Get();
}
inline void AppGuardIpInfo::_internal_set_country(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.country_.Set(value, GetArenaForAllocation());
}
inline std::string* AppGuardIpInfo::_internal_mutable_country() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.country_.Mutable(GetArenaForAllocation());
}
inline std::string* AppGuardIpInfo::release_country() {
  // @@protoc_insertion_point(field_release:appguard.AppGuardIpInfo.country)
  if (!_internal_has_country()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.country_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.country_.IsDefault()) {
    _impl_.country_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void AppGuardIpInfo::set_allocated_country(std::string* country) {
  if (country != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.country_.SetAllocated(country, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.country_.IsDefault()) {
    _impl_.country_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:appguard.AppGuardIpInfo.country)
}

// optional string asn = 3;
inline bool AppGuardIpInfo::_internal_has_asn() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool AppGuardIpInfo::has_asn() const {
  return _internal_has_asn();
}
inline void AppGuardIpInfo::clear_asn() {
  _impl_.asn_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& AppGuardIpInfo::asn() const {
  // @@protoc_insertion_point(field_get:appguard.AppGuardIpInfo.asn)
  return _internal_asn();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AppGuardIpInfo::set_asn(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000002u;
 _impl_.asn_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:appguard.AppGuardIpInfo.asn)
}
inline std::string* AppGuardIpInfo::mutable_asn() {
  std::string* _s = _internal_mutable_asn();
  // @@protoc_insertion_point(field_mutable:appguard.AppGuardIpInfo.asn)
  return _s;
}
inline const std::string& AppGuardIpInfo::_internal_asn() const {
  return _impl_.asn_.Get();
}
inline void AppGuardIpInfo::_internal_set_asn(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.asn_.Set(value, GetArenaForAllocation());
}
inline std::string* AppGuardIpInfo::_internal_mutable_asn() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.asn_.Mutable(GetArenaForAllocation());
}
inline std::string* AppGuardIpInfo::release_asn() {
  // @@protoc_insertion_point(field_release:appguard.AppGuardIpInfo.asn)
  if (!_internal_has_asn()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* p = _impl_.asn_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.asn_.IsDefault()) {
    _impl_.asn_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void AppGuardIpInfo::set_allocated_asn(std::string* asn) {
  if (asn != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.asn_.SetAllocated(asn, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.asn_.IsDefault()) {
    _impl_.asn_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:appguard.AppGuardIpInfo.asn)
}

// optional string org = 4;
inline bool AppGuardIpInfo::_internal_has_org() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool AppGuardIpInfo::has_org() const {
  return _internal_has_org();
}
inline void AppGuardIpInfo::clear_org() {
  _impl_.org_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const std::string& AppGuardIpInfo::org() const {
  // @@protoc_insertion_point(field_get:appguard.AppGuardIpInfo.org)
  return _internal_org();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AppGuardIpInfo::set_org(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000004u;
 _impl_.org_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:appguard.AppGuardIpInfo.org)
}
inline std::string* AppGuardIpInfo::mutable_org() {
  std::string* _s = _internal_mutable_org();
  // @@protoc_insertion_point(field_mutable:appguard.AppGuardIpInfo.org)
  return _s;
}
inline const std::string& AppGuardIpInfo::_internal_org() const {
  return _impl_.org_.Get();
}
inline void AppGuardIpInfo::_internal_set_org(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.org_.Set(value, GetArenaForAllocation());
}
inline std::string* AppGuardIpInfo::_internal_mutable_org() {
  _impl_._has_bits_[0] |= 0x00000004u;
  return _impl_.org_.Mutable(GetArenaForAllocation());
}
inline std::string* AppGuardIpInfo::release_org() {
  // @@protoc_insertion_point(field_release:appguard.AppGuardIpInfo.org)
  if (!_internal_has_org()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000004u;
  auto* p = _impl_.org_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.org_.IsDefault()) {
    _impl_.org_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void AppGuardIpInfo::set_allocated_org(std::string* org) {
  if (org != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.org_.SetAllocated(org, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.org_.IsDefault()) {
    _impl_.org_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:appguard.AppGuardIpInfo.org)
}

// optional string continent_code = 5;
inline bool AppGuardIpInfo::_internal_has_continent_code() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool AppGuardIpInfo::has_continent_code() const {
  return _internal_has_continent_code();
}
inline void AppGuardIpInfo::clear_continent_code() {
  _impl_.continent_code_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline const std::string& AppGuardIpInfo::continent_code() const {
  // @@protoc_insertion_point(field_get:appguard.AppGuardIpInfo.continent_code)
  return _internal_continent_code();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AppGuardIpInfo::set_continent_code(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000008u;
 _impl_.continent_code_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:appguard.AppGuardIpInfo.continent_code)
}
inline std::string* AppGuardIpInfo::mutable_continent_code() {
  std::string* _s = _internal_mutable_continent_code();
  // @@protoc_insertion_point(field_mutable:appguard.AppGuardIpInfo.continent_code)
  return _s;
}
inline const std::string& AppGuardIpInfo::_internal_continent_code() const {
  return _impl_.continent_code_.Get();
}
inline void AppGuardIpInfo::_internal_set_continent_code(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.continent_code_.Set(value, GetArenaForAllocation());
}
inline std::string* AppGuardIpInfo::_internal_mutable_continent_code() {
  _impl_._has_bits_[0] |= 0x00000008u;
  return _impl_.continent_code_.Mutable(GetArenaForAllocation());
}
inline std::string* AppGuardIpInfo::release_continent_code() {
  // @@protoc_insertion_point(field_release:appguard.AppGuardIpInfo.continent_code)
  if (!_internal_has_continent_code()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000008u;
  auto* p = _impl_.continent_code_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.continent_code_.IsDefault()) {
    _impl_.continent_code_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void AppGuardIpInfo::set_allocated_continent_code(std::string* continent_code) {
  if (continent_code != nullptr) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.continent_code_.SetAllocated(continent_code, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.continent_code_.IsDefault()) {
    _impl_.continent_code_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:appguard.AppGuardIpInfo.continent_code)
}

// optional string city = 6;
inline bool AppGuardIpInfo::_internal_has_city() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool AppGuardIpInfo::has_city() const {
  return _internal_has_city();
}
inline void AppGuardIpInfo::clear_city() {
  _impl_.city_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline const std::string& AppGuardIpInfo::city() const {
  // @@protoc_insertion_point(field_get:appguard.AppGuardIpInfo.city)
  return _internal_city();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AppGuardIpInfo::set_city(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000010u;
 _impl_.city_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:appguard.AppGuardIpInfo.city)
}
inline std::string* AppGuardIpInfo::mutable_city() {
  std::string* _s = _internal_mutable_city();
  // @@protoc_insertion_point(field_mutable:appguard.AppGuardIpInfo.city)
  return _s;
}
inline const std::string& AppGuardIpInfo::_internal_city() const {
  return _impl_.city_.Get();
}
inline void AppGuardIpInfo::_internal_set_city(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.city_.Set(value, GetArenaForAllocation());
}
inline std::string* AppGuardIpInfo::_internal_mutable_city() {
  _impl_._has_bits_[0] |= 0x00000010u;
  return _impl_.city_.Mutable(GetArenaForAllocation());
}
inline std::string* AppGuardIpInfo::release_city() {
  // @@protoc_insertion_point(field_release:appguard.AppGuardIpInfo.city)
  if (!_internal_has_city()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000010u;
  auto* p = _impl_.city_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.city_.IsDefault()) {
    _impl_.city_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void AppGuardIpInfo::set_allocated_city(std::string* city) {
  if (city != nullptr) {
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  _impl_.city_.SetAllocated(city, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.city_.IsDefault()) {
    _impl_.city_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:appguard.AppGuardIpInfo.city)
}

// optional string region = 7;
inline bool AppGuardIpInfo::_internal_has_region() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool AppGuardIpInfo::has_region() const {
  return _internal_has_region();
}
inline void AppGuardIpInfo::clear_region() {
  _impl_.region_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline const std::string& AppGuardIpInfo::region() const {
  // @@protoc_insertion_point(field_get:appguard.AppGuardIpInfo.region)
  return _internal_region();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AppGuardIpInfo::set_region(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000020u;
 _impl_.region_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:appguard.AppGuardIpInfo.region)
}
inline std::string* AppGuardIpInfo::mutable_region() {
  std::string* _s = _internal_mutable_region();
  // @@protoc_insertion_point(field_mutable:appguard.AppGuardIpInfo.region)
  return _s;
}
inline const std::string& AppGuardIpInfo::_internal_region() const {
  return _impl_.region_.Get();
}
inline void AppGuardIpInfo::_internal_set_region(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.region_.Set(value, GetArenaForAllocation());
}
inline std::string* AppGuardIpInfo::_internal_mutable_region() {
  _impl_._has_bits_[0] |= 0x00000020u;
  return _impl_.region_.Mutable(GetArenaForAllocation());
}
inline std::string* AppGuardIpInfo::release_region() {
  // @@protoc_insertion_point(field_release:appguard.AppGuardIpInfo.region)
  if (!_internal_has_region()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000020u;
  auto* p = _impl_.region_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.region_.IsDefault()) {
    _impl_.region_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void AppGuardIpInfo::set_allocated_region(std::string* region) {
  if (region != nullptr) {
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }
  _impl_.region_.SetAllocated(region, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.region_.IsDefault()) {
    _impl_.region_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:appguard.AppGuardIpInfo.region)
}

// optional string postal = 8;
inline bool AppGuardIpInfo::_internal_has_postal() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool AppGuardIpInfo::has_postal() const {
  return _internal_has_postal();
}
inline void AppGuardIpInfo::clear_postal() {
  _impl_.postal_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline const std::string& AppGuardIpInfo::postal() const {
  // @@protoc_insertion_point(field_get:appguard.AppGuardIpInfo.postal)
  return _internal_postal();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AppGuardIpInfo::set_postal(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000040u;
 _impl_.postal_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:appguard.AppGuardIpInfo.postal)
}
inline std::string* AppGuardIpInfo::mutable_postal() {
  std::string* _s = _internal_mutable_postal();
  // @@protoc_insertion_point(field_mutable:appguard.AppGuardIpInfo.postal)
  return _s;
}
inline const std::string& AppGuardIpInfo::_internal_postal() const {
  return _impl_.postal_.Get();
}
inline void AppGuardIpInfo::_internal_set_postal(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.postal_.Set(value, GetArenaForAllocation());
}
inline std::string* AppGuardIpInfo::_internal_mutable_postal() {
  _impl_._has_bits_[0] |= 0x00000040u;
  return _impl_.postal_.Mutable(GetArenaForAllocation());
}
inline std::string* AppGuardIpInfo::release_postal() {
  // @@protoc_insertion_point(field_release:appguard.AppGuardIpInfo.postal)
  if (!_internal_has_postal()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000040u;
  auto* p = _impl_.postal_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.postal_.IsDefault()) {
    _impl_.postal_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void AppGuardIpInfo::set_allocated_postal(std::string* postal) {
  if (postal != nullptr) {
    _impl_._has_bits_[0] |= 0x00000040u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000040u;
  }
  _impl_.postal_.SetAllocated(postal, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.postal_.IsDefault()) {
    _impl_.postal_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:appguard.AppGuardIpInfo.postal)
}

// optional string timezone = 9;
inline bool AppGuardIpInfo::_internal_has_timezone() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool AppGuardIpInfo::has_timezone() const {
  return _internal_has_timezone();
}
inline void AppGuardIpInfo::clear_timezone() {
  _impl_.timezone_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline const std::string& AppGuardIpInfo::timezone() const {
  // @@protoc_insertion_point(field_get:appguard.AppGuardIpInfo.timezone)
  return _internal_timezone();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AppGuardIpInfo::set_timezone(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000080u;
 _impl_.timezone_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:appguard.AppGuardIpInfo.timezone)
}
inline std::string* AppGuardIpInfo::mutable_timezone() {
  std::string* _s = _internal_mutable_timezone();
  // @@protoc_insertion_point(field_mutable:appguard.AppGuardIpInfo.timezone)
  return _s;
}
inline const std::string& AppGuardIpInfo::_internal_timezone() const {
  return _impl_.timezone_.Get();
}
inline void AppGuardIpInfo::_internal_set_timezone(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.timezone_.Set(value, GetArenaForAllocation());
}
inline std::string* AppGuardIpInfo::_internal_mutable_timezone() {
  _impl_._has_bits_[0] |= 0x00000080u;
  return _impl_.timezone_.Mutable(GetArenaForAllocation());
}
inline std::string* AppGuardIpInfo::release_timezone() {
  // @@protoc_insertion_point(field_release:appguard.AppGuardIpInfo.timezone)
  if (!_internal_has_timezone()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000080u;
  auto* p = _impl_.timezone_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.timezone_.IsDefault()) {
    _impl_.timezone_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void AppGuardIpInfo::set_allocated_timezone(std::string* timezone) {
  if (timezone != nullptr) {
    _impl_._has_bits_[0] |= 0x00000080u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000080u;
  }
  _impl_.timezone_.SetAllocated(timezone, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.timezone_.IsDefault()) {
    _impl_.timezone_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:appguard.AppGuardIpInfo.timezone)
}

// uint32 blacklist = 100;
inline void AppGuardIpInfo::clear_blacklist() {
  _impl_.blacklist_ = 0u;
}
inline uint32_t AppGuardIpInfo::_internal_blacklist() const {
  return _impl_.blacklist_;
}
inline uint32_t AppGuardIpInfo::blacklist() const {
  // @@protoc_insertion_point(field_get:appguard.AppGuardIpInfo.blacklist)
  return _internal_blacklist();
}
inline void AppGuardIpInfo::_internal_set_blacklist(uint32_t value) {
  
  _impl_.blacklist_ = value;
}
inline void AppGuardIpInfo::set_blacklist(uint32_t value) {
  _internal_set_blacklist(value);
  // @@protoc_insertion_point(field_set:appguard.AppGuardIpInfo.blacklist)
}

// -------------------------------------------------------------------

// AppGuardTcpInfo

// .appguard.AppGuardTcpConnection connection = 1;
inline bool AppGuardTcpInfo::_internal_has_connection() const {
  return this != internal_default_instance() && _impl_.connection_ != nullptr;
}
inline bool AppGuardTcpInfo::has_connection() const {
  return _internal_has_connection();
}
inline void AppGuardTcpInfo::clear_connection() {
  if (GetArenaForAllocation() == nullptr && _impl_.connection_ != nullptr) {
    delete _impl_.connection_;
  }
  _impl_.connection_ = nullptr;
}
inline const ::appguard::AppGuardTcpConnection& AppGuardTcpInfo::_internal_connection() const {
  const ::appguard::AppGuardTcpConnection* p = _impl_.connection_;
  return p != nullptr ? *p : reinterpret_cast<const ::appguard::AppGuardTcpConnection&>(
      ::appguard::_AppGuardTcpConnection_default_instance_);
}
inline const ::appguard::AppGuardTcpConnection& AppGuardTcpInfo::connection() const {
  // @@protoc_insertion_point(field_get:appguard.AppGuardTcpInfo.connection)
  return _internal_connection();
}
inline void AppGuardTcpInfo::unsafe_arena_set_allocated_connection(
    ::appguard::AppGuardTcpConnection* connection) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.connection_);
  }
  _impl_.connection_ = connection;
  if (connection) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:appguard.AppGuardTcpInfo.connection)
}
inline ::appguard::AppGuardTcpConnection* AppGuardTcpInfo::release_connection() {
  
  ::appguard::AppGuardTcpConnection* temp = _impl_.connection_;
  _impl_.connection_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::appguard::AppGuardTcpConnection* AppGuardTcpInfo::unsafe_arena_release_connection() {
  // @@protoc_insertion_point(field_release:appguard.AppGuardTcpInfo.connection)
  
  ::appguard::AppGuardTcpConnection* temp = _impl_.connection_;
  _impl_.connection_ = nullptr;
  return temp;
}
inline ::appguard::AppGuardTcpConnection* AppGuardTcpInfo::_internal_mutable_connection() {
  
  if (_impl_.connection_ == nullptr) {
    auto* p = CreateMaybeMessage<::appguard::AppGuardTcpConnection>(GetArenaForAllocation());
    _impl_.connection_ = p;
  }
  return _impl_.connection_;
}
inline ::appguard::AppGuardTcpConnection* AppGuardTcpInfo::mutable_connection() {
  ::appguard::AppGuardTcpConnection* _msg = _internal_mutable_connection();
  // @@protoc_insertion_point(field_mutable:appguard.AppGuardTcpInfo.connection)
  return _msg;
}
inline void AppGuardTcpInfo::set_allocated_connection(::appguard::AppGuardTcpConnection* connection) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.connection_;
  }
  if (connection) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(connection);
    if (message_arena != submessage_arena) {
      connection = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, connection, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.connection_ = connection;
  // @@protoc_insertion_point(field_set_allocated:appguard.AppGuardTcpInfo.connection)
}

// .appguard.AppGuardIpInfo ip_info = 2;
inline bool AppGuardTcpInfo::_internal_has_ip_info() const {
  return this != internal_default_instance() && _impl_.ip_info_ != nullptr;
}
inline bool AppGuardTcpInfo::has_ip_info() const {
  return _internal_has_ip_info();
}
inline void AppGuardTcpInfo::clear_ip_info() {
  if (GetArenaForAllocation() == nullptr && _impl_.ip_info_ != nullptr) {
    delete _impl_.ip_info_;
  }
  _impl_.ip_info_ = nullptr;
}
inline const ::appguard::AppGuardIpInfo& AppGuardTcpInfo::_internal_ip_info() const {
  const ::appguard::AppGuardIpInfo* p = _impl_.ip_info_;
  return p != nullptr ? *p : reinterpret_cast<const ::appguard::AppGuardIpInfo&>(
      ::appguard::_AppGuardIpInfo_default_instance_);
}
inline const ::appguard::AppGuardIpInfo& AppGuardTcpInfo::ip_info() const {
  // @@protoc_insertion_point(field_get:appguard.AppGuardTcpInfo.ip_info)
  return _internal_ip_info();
}
inline void AppGuardTcpInfo::unsafe_arena_set_allocated_ip_info(
    ::appguard::AppGuardIpInfo* ip_info) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.ip_info_);
  }
  _impl_.ip_info_ = ip_info;
  if (ip_info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:appguard.AppGuardTcpInfo.ip_info)
}
inline ::appguard::AppGuardIpInfo* AppGuardTcpInfo::release_ip_info() {
  
  ::appguard::AppGuardIpInfo* temp = _impl_.ip_info_;
  _impl_.ip_info_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::appguard::AppGuardIpInfo* AppGuardTcpInfo::unsafe_arena_release_ip_info() {
  // @@protoc_insertion_point(field_release:appguard.AppGuardTcpInfo.ip_info)
  
  ::appguard::AppGuardIpInfo* temp = _impl_.ip_info_;
  _impl_.ip_info_ = nullptr;
  return temp;
}
inline ::appguard::AppGuardIpInfo* AppGuardTcpInfo::_internal_mutable_ip_info() {
  
  if (_impl_.ip_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::appguard::AppGuardIpInfo>(GetArenaForAllocation());
    _impl_.ip_info_ = p;
  }
  return _impl_.ip_info_;
}
inline ::appguard::AppGuardIpInfo* AppGuardTcpInfo::mutable_ip_info() {
  ::appguard::AppGuardIpInfo* _msg = _internal_mutable_ip_info();
  // @@protoc_insertion_point(field_mutable:appguard.AppGuardTcpInfo.ip_info)
  return _msg;
}
inline void AppGuardTcpInfo::set_allocated_ip_info(::appguard::AppGuardIpInfo* ip_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.ip_info_;
  }
  if (ip_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(ip_info);
    if (message_arena != submessage_arena) {
      ip_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ip_info, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.ip_info_ = ip_info;
  // @@protoc_insertion_point(field_set_allocated:appguard.AppGuardTcpInfo.ip_info)
}

// uint64 tcp_id = 3;
inline void AppGuardTcpInfo::clear_tcp_id() {
  _impl_.tcp_id_ = uint64_t{0u};
}
inline uint64_t AppGuardTcpInfo::_internal_tcp_id() const {
  return _impl_.tcp_id_;
}
inline uint64_t AppGuardTcpInfo::tcp_id() const {
  // @@protoc_insertion_point(field_get:appguard.AppGuardTcpInfo.tcp_id)
  return _internal_tcp_id();
}
inline void AppGuardTcpInfo::_internal_set_tcp_id(uint64_t value) {
  
  _impl_.tcp_id_ = value;
}
inline void AppGuardTcpInfo::set_tcp_id(uint64_t value) {
  _internal_set_tcp_id(value);
  // @@protoc_insertion_point(field_set:appguard.AppGuardTcpInfo.tcp_id)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// AppGuardHttpRequest

// string original_url = 1;
inline void AppGuardHttpRequest::clear_original_url() {
  _impl_.original_url_.ClearToEmpty();
}
inline const std::string& AppGuardHttpRequest::original_url() const {
  // @@protoc_insertion_point(field_get:appguard.AppGuardHttpRequest.original_url)
  return _internal_original_url();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AppGuardHttpRequest::set_original_url(ArgT0&& arg0, ArgT... args) {
 
 _impl_.original_url_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:appguard.AppGuardHttpRequest.original_url)
}
inline std::string* AppGuardHttpRequest::mutable_original_url() {
  std::string* _s = _internal_mutable_original_url();
  // @@protoc_insertion_point(field_mutable:appguard.AppGuardHttpRequest.original_url)
  return _s;
}
inline const std::string& AppGuardHttpRequest::_internal_original_url() const {
  return _impl_.original_url_.Get();
}
inline void AppGuardHttpRequest::_internal_set_original_url(const std::string& value) {
  
  _impl_.original_url_.Set(value, GetArenaForAllocation());
}
inline std::string* AppGuardHttpRequest::_internal_mutable_original_url() {
  
  return _impl_.original_url_.Mutable(GetArenaForAllocation());
}
inline std::string* AppGuardHttpRequest::release_original_url() {
  // @@protoc_insertion_point(field_release:appguard.AppGuardHttpRequest.original_url)
  return _impl_.original_url_.Release();
}
inline void AppGuardHttpRequest::set_allocated_original_url(std::string* original_url) {
  if (original_url != nullptr) {
    
  } else {
    
  }
  _impl_.original_url_.SetAllocated(original_url, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.original_url_.IsDefault()) {
    _impl_.original_url_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:appguard.AppGuardHttpRequest.original_url)
}

// map<string, string> headers = 2;
inline int AppGuardHttpRequest::_internal_headers_size() const {
  return _impl_.headers_.size();
}
inline int AppGuardHttpRequest::headers_size() const {
  return _internal_headers_size();
}
inline void AppGuardHttpRequest::clear_headers() {
  _impl_.headers_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
AppGuardHttpRequest::_internal_headers() const {
  return _impl_.headers_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
AppGuardHttpRequest::headers() const {
  // @@protoc_insertion_point(field_map:appguard.AppGuardHttpRequest.headers)
  return _internal_headers();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
AppGuardHttpRequest::_internal_mutable_headers() {
  return _impl_.headers_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
AppGuardHttpRequest::mutable_headers() {
  // @@protoc_insertion_point(field_mutable_map:appguard.AppGuardHttpRequest.headers)
  return _internal_mutable_headers();
}

// string method = 3;
inline void AppGuardHttpRequest::clear_method() {
  _impl_.method_.ClearToEmpty();
}
inline const std::string& AppGuardHttpRequest::method() const {
  // @@protoc_insertion_point(field_get:appguard.AppGuardHttpRequest.method)
  return _internal_method();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AppGuardHttpRequest::set_method(ArgT0&& arg0, ArgT... args) {
 
 _impl_.method_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:appguard.AppGuardHttpRequest.method)
}
inline std::string* AppGuardHttpRequest::mutable_method() {
  std::string* _s = _internal_mutable_method();
  // @@protoc_insertion_point(field_mutable:appguard.AppGuardHttpRequest.method)
  return _s;
}
inline const std::string& AppGuardHttpRequest::_internal_method() const {
  return _impl_.method_.Get();
}
inline void AppGuardHttpRequest::_internal_set_method(const std::string& value) {
  
  _impl_.method_.Set(value, GetArenaForAllocation());
}
inline std::string* AppGuardHttpRequest::_internal_mutable_method() {
  
  return _impl_.method_.Mutable(GetArenaForAllocation());
}
inline std::string* AppGuardHttpRequest::release_method() {
  // @@protoc_insertion_point(field_release:appguard.AppGuardHttpRequest.method)
  return _impl_.method_.Release();
}
inline void AppGuardHttpRequest::set_allocated_method(std::string* method) {
  if (method != nullptr) {
    
  } else {
    
  }
  _impl_.method_.SetAllocated(method, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.method_.IsDefault()) {
    _impl_.method_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:appguard.AppGuardHttpRequest.method)
}

// optional string body = 4;
inline bool AppGuardHttpRequest::_internal_has_body() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool AppGuardHttpRequest::has_body() const {
  return _internal_has_body();
}
inline void AppGuardHttpRequest::clear_body() {
  _impl_.body_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& AppGuardHttpRequest::body() const {
  // @@protoc_insertion_point(field_get:appguard.AppGuardHttpRequest.body)
  return _internal_body();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AppGuardHttpRequest::set_body(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.body_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:appguard.AppGuardHttpRequest.body)
}
inline std::string* AppGuardHttpRequest::mutable_body() {
  std::string* _s = _internal_mutable_body();
  // @@protoc_insertion_point(field_mutable:appguard.AppGuardHttpRequest.body)
  return _s;
}
inline const std::string& AppGuardHttpRequest::_internal_body() const {
  return _impl_.body_.Get();
}
inline void AppGuardHttpRequest::_internal_set_body(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.body_.Set(value, GetArenaForAllocation());
}
inline std::string* AppGuardHttpRequest::_internal_mutable_body() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.body_.Mutable(GetArenaForAllocation());
}
inline std::string* AppGuardHttpRequest::release_body() {
  // @@protoc_insertion_point(field_release:appguard.AppGuardHttpRequest.body)
  if (!_internal_has_body()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.body_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.body_.IsDefault()) {
    _impl_.body_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void AppGuardHttpRequest::set_allocated_body(std::string* body) {
  if (body != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.body_.SetAllocated(body, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.body_.IsDefault()) {
    _impl_.body_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:appguard.AppGuardHttpRequest.body)
}

// map<string, string> query = 5;
inline int AppGuardHttpRequest::_internal_query_size() const {
  return _impl_.query_.size();
}
inline int AppGuardHttpRequest::query_size() const {
  return _internal_query_size();
}
inline void AppGuardHttpRequest::clear_query() {
  _impl_.query_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
AppGuardHttpRequest::_internal_query() const {
  return _impl_.query_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
AppGuardHttpRequest::query() const {
  // @@protoc_insertion_point(field_map:appguard.AppGuardHttpRequest.query)
  return _internal_query();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
AppGuardHttpRequest::_internal_mutable_query() {
  return _impl_.query_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
AppGuardHttpRequest::mutable_query() {
  // @@protoc_insertion_point(field_mutable_map:appguard.AppGuardHttpRequest.query)
  return _internal_mutable_query();
}

// .appguard.AppGuardTcpInfo tcp_info = 100;
inline bool AppGuardHttpRequest::_internal_has_tcp_info() const {
  return this != internal_default_instance() && _impl_.tcp_info_ != nullptr;
}
inline bool AppGuardHttpRequest::has_tcp_info() const {
  return _internal_has_tcp_info();
}
inline void AppGuardHttpRequest::clear_tcp_info() {
  if (GetArenaForAllocation() == nullptr && _impl_.tcp_info_ != nullptr) {
    delete _impl_.tcp_info_;
  }
  _impl_.tcp_info_ = nullptr;
}
inline const ::appguard::AppGuardTcpInfo& AppGuardHttpRequest::_internal_tcp_info() const {
  const ::appguard::AppGuardTcpInfo* p = _impl_.tcp_info_;
  return p != nullptr ? *p : reinterpret_cast<const ::appguard::AppGuardTcpInfo&>(
      ::appguard::_AppGuardTcpInfo_default_instance_);
}
inline const ::appguard::AppGuardTcpInfo& AppGuardHttpRequest::tcp_info() const {
  // @@protoc_insertion_point(field_get:appguard.AppGuardHttpRequest.tcp_info)
  return _internal_tcp_info();
}
inline void AppGuardHttpRequest::unsafe_arena_set_allocated_tcp_info(
    ::appguard::AppGuardTcpInfo* tcp_info) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.tcp_info_);
  }
  _impl_.tcp_info_ = tcp_info;
  if (tcp_info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:appguard.AppGuardHttpRequest.tcp_info)
}
inline ::appguard::AppGuardTcpInfo* AppGuardHttpRequest::release_tcp_info() {
  
  ::appguard::AppGuardTcpInfo* temp = _impl_.tcp_info_;
  _impl_.tcp_info_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::appguard::AppGuardTcpInfo* AppGuardHttpRequest::unsafe_arena_release_tcp_info() {
  // @@protoc_insertion_point(field_release:appguard.AppGuardHttpRequest.tcp_info)
  
  ::appguard::AppGuardTcpInfo* temp = _impl_.tcp_info_;
  _impl_.tcp_info_ = nullptr;
  return temp;
}
inline ::appguard::AppGuardTcpInfo* AppGuardHttpRequest::_internal_mutable_tcp_info() {
  
  if (_impl_.tcp_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::appguard::AppGuardTcpInfo>(GetArenaForAllocation());
    _impl_.tcp_info_ = p;
  }
  return _impl_.tcp_info_;
}
inline ::appguard::AppGuardTcpInfo* AppGuardHttpRequest::mutable_tcp_info() {
  ::appguard::AppGuardTcpInfo* _msg = _internal_mutable_tcp_info();
  // @@protoc_insertion_point(field_mutable:appguard.AppGuardHttpRequest.tcp_info)
  return _msg;
}
inline void AppGuardHttpRequest::set_allocated_tcp_info(::appguard::AppGuardTcpInfo* tcp_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.tcp_info_;
  }
  if (tcp_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(tcp_info);
    if (message_arena != submessage_arena) {
      tcp_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tcp_info, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.tcp_info_ = tcp_info;
  // @@protoc_insertion_point(field_set_allocated:appguard.AppGuardHttpRequest.tcp_info)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// AppGuardHttpResponse

// uint32 code = 1;
inline void AppGuardHttpResponse::clear_code() {
  _impl_.code_ = 0u;
}
inline uint32_t AppGuardHttpResponse::_internal_code() const {
  return _impl_.code_;
}
inline uint32_t AppGuardHttpResponse::code() const {
  // @@protoc_insertion_point(field_get:appguard.AppGuardHttpResponse.code)
  return _internal_code();
}
inline void AppGuardHttpResponse::_internal_set_code(uint32_t value) {
  
  _impl_.code_ = value;
}
inline void AppGuardHttpResponse::set_code(uint32_t value) {
  _internal_set_code(value);
  // @@protoc_insertion_point(field_set:appguard.AppGuardHttpResponse.code)
}

// map<string, string> headers = 2;
inline int AppGuardHttpResponse::_internal_headers_size() const {
  return _impl_.headers_.size();
}
inline int AppGuardHttpResponse::headers_size() const {
  return _internal_headers_size();
}
inline void AppGuardHttpResponse::clear_headers() {
  _impl_.headers_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
AppGuardHttpResponse::_internal_headers() const {
  return _impl_.headers_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
AppGuardHttpResponse::headers() const {
  // @@protoc_insertion_point(field_map:appguard.AppGuardHttpResponse.headers)
  return _internal_headers();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
AppGuardHttpResponse::_internal_mutable_headers() {
  return _impl_.headers_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
AppGuardHttpResponse::mutable_headers() {
  // @@protoc_insertion_point(field_mutable_map:appguard.AppGuardHttpResponse.headers)
  return _internal_mutable_headers();
}

// .appguard.AppGuardTcpInfo tcp_info = 100;
inline bool AppGuardHttpResponse::_internal_has_tcp_info() const {
  return this != internal_default_instance() && _impl_.tcp_info_ != nullptr;
}
inline bool AppGuardHttpResponse::has_tcp_info() const {
  return _internal_has_tcp_info();
}
inline void AppGuardHttpResponse::clear_tcp_info() {
  if (GetArenaForAllocation() == nullptr && _impl_.tcp_info_ != nullptr) {
    delete _impl_.tcp_info_;
  }
  _impl_.tcp_info_ = nullptr;
}
inline const ::appguard::AppGuardTcpInfo& AppGuardHttpResponse::_internal_tcp_info() const {
  const ::appguard::AppGuardTcpInfo* p = _impl_.tcp_info_;
  return p != nullptr ? *p : reinterpret_cast<const ::appguard::AppGuardTcpInfo&>(
      ::appguard::_AppGuardTcpInfo_default_instance_);
}
inline const ::appguard::AppGuardTcpInfo& AppGuardHttpResponse::tcp_info() const {
  // @@protoc_insertion_point(field_get:appguard.AppGuardHttpResponse.tcp_info)
  return _internal_tcp_info();
}
inline void AppGuardHttpResponse::unsafe_arena_set_allocated_tcp_info(
    ::appguard::AppGuardTcpInfo* tcp_info) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.tcp_info_);
  }
  _impl_.tcp_info_ = tcp_info;
  if (tcp_info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:appguard.AppGuardHttpResponse.tcp_info)
}
inline ::appguard::AppGuardTcpInfo* AppGuardHttpResponse::release_tcp_info() {
  
  ::appguard::AppGuardTcpInfo* temp = _impl_.tcp_info_;
  _impl_.tcp_info_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::appguard::AppGuardTcpInfo* AppGuardHttpResponse::unsafe_arena_release_tcp_info() {
  // @@protoc_insertion_point(field_release:appguard.AppGuardHttpResponse.tcp_info)
  
  ::appguard::AppGuardTcpInfo* temp = _impl_.tcp_info_;
  _impl_.tcp_info_ = nullptr;
  return temp;
}
inline ::appguard::AppGuardTcpInfo* AppGuardHttpResponse::_internal_mutable_tcp_info() {
  
  if (_impl_.tcp_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::appguard::AppGuardTcpInfo>(GetArenaForAllocation());
    _impl_.tcp_info_ = p;
  }
  return _impl_.tcp_info_;
}
inline ::appguard::AppGuardTcpInfo* AppGuardHttpResponse::mutable_tcp_info() {
  ::appguard::AppGuardTcpInfo* _msg = _internal_mutable_tcp_info();
  // @@protoc_insertion_point(field_mutable:appguard.AppGuardHttpResponse.tcp_info)
  return _msg;
}
inline void AppGuardHttpResponse::set_allocated_tcp_info(::appguard::AppGuardTcpInfo* tcp_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.tcp_info_;
  }
  if (tcp_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(tcp_info);
    if (message_arena != submessage_arena) {
      tcp_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tcp_info, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.tcp_info_ = tcp_info;
  // @@protoc_insertion_point(field_set_allocated:appguard.AppGuardHttpResponse.tcp_info)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// AppGuardSmtpRequest

// map<string, string> headers = 1;
inline int AppGuardSmtpRequest::_internal_headers_size() const {
  return _impl_.headers_.size();
}
inline int AppGuardSmtpRequest::headers_size() const {
  return _internal_headers_size();
}
inline void AppGuardSmtpRequest::clear_headers() {
  _impl_.headers_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
AppGuardSmtpRequest::_internal_headers() const {
  return _impl_.headers_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
AppGuardSmtpRequest::headers() const {
  // @@protoc_insertion_point(field_map:appguard.AppGuardSmtpRequest.headers)
  return _internal_headers();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
AppGuardSmtpRequest::_internal_mutable_headers() {
  return _impl_.headers_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
AppGuardSmtpRequest::mutable_headers() {
  // @@protoc_insertion_point(field_mutable_map:appguard.AppGuardSmtpRequest.headers)
  return _internal_mutable_headers();
}

// optional string body = 2;
inline bool AppGuardSmtpRequest::_internal_has_body() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool AppGuardSmtpRequest::has_body() const {
  return _internal_has_body();
}
inline void AppGuardSmtpRequest::clear_body() {
  _impl_.body_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& AppGuardSmtpRequest::body() const {
  // @@protoc_insertion_point(field_get:appguard.AppGuardSmtpRequest.body)
  return _internal_body();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AppGuardSmtpRequest::set_body(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.body_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:appguard.AppGuardSmtpRequest.body)
}
inline std::string* AppGuardSmtpRequest::mutable_body() {
  std::string* _s = _internal_mutable_body();
  // @@protoc_insertion_point(field_mutable:appguard.AppGuardSmtpRequest.body)
  return _s;
}
inline const std::string& AppGuardSmtpRequest::_internal_body() const {
  return _impl_.body_.Get();
}
inline void AppGuardSmtpRequest::_internal_set_body(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.body_.Set(value, GetArenaForAllocation());
}
inline std::string* AppGuardSmtpRequest::_internal_mutable_body() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.body_.Mutable(GetArenaForAllocation());
}
inline std::string* AppGuardSmtpRequest::release_body() {
  // @@protoc_insertion_point(field_release:appguard.AppGuardSmtpRequest.body)
  if (!_internal_has_body()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.body_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.body_.IsDefault()) {
    _impl_.body_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void AppGuardSmtpRequest::set_allocated_body(std::string* body) {
  if (body != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.body_.SetAllocated(body, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.body_.IsDefault()) {
    _impl_.body_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:appguard.AppGuardSmtpRequest.body)
}

// .appguard.AppGuardTcpInfo tcp_info = 100;
inline bool AppGuardSmtpRequest::_internal_has_tcp_info() const {
  return this != internal_default_instance() && _impl_.tcp_info_ != nullptr;
}
inline bool AppGuardSmtpRequest::has_tcp_info() const {
  return _internal_has_tcp_info();
}
inline void AppGuardSmtpRequest::clear_tcp_info() {
  if (GetArenaForAllocation() == nullptr && _impl_.tcp_info_ != nullptr) {
    delete _impl_.tcp_info_;
  }
  _impl_.tcp_info_ = nullptr;
}
inline const ::appguard::AppGuardTcpInfo& AppGuardSmtpRequest::_internal_tcp_info() const {
  const ::appguard::AppGuardTcpInfo* p = _impl_.tcp_info_;
  return p != nullptr ? *p : reinterpret_cast<const ::appguard::AppGuardTcpInfo&>(
      ::appguard::_AppGuardTcpInfo_default_instance_);
}
inline const ::appguard::AppGuardTcpInfo& AppGuardSmtpRequest::tcp_info() const {
  // @@protoc_insertion_point(field_get:appguard.AppGuardSmtpRequest.tcp_info)
  return _internal_tcp_info();
}
inline void AppGuardSmtpRequest::unsafe_arena_set_allocated_tcp_info(
    ::appguard::AppGuardTcpInfo* tcp_info) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.tcp_info_);
  }
  _impl_.tcp_info_ = tcp_info;
  if (tcp_info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:appguard.AppGuardSmtpRequest.tcp_info)
}
inline ::appguard::AppGuardTcpInfo* AppGuardSmtpRequest::release_tcp_info() {
  
  ::appguard::AppGuardTcpInfo* temp = _impl_.tcp_info_;
  _impl_.tcp_info_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::appguard::AppGuardTcpInfo* AppGuardSmtpRequest::unsafe_arena_release_tcp_info() {
  // @@protoc_insertion_point(field_release:appguard.AppGuardSmtpRequest.tcp_info)
  
  ::appguard::AppGuardTcpInfo* temp = _impl_.tcp_info_;
  _impl_.tcp_info_ = nullptr;
  return temp;
}
inline ::appguard::AppGuardTcpInfo* AppGuardSmtpRequest::_internal_mutable_tcp_info() {
  
  if (_impl_.tcp_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::appguard::AppGuardTcpInfo>(GetArenaForAllocation());
    _impl_.tcp_info_ = p;
  }
  return _impl_.tcp_info_;
}
inline ::appguard::AppGuardTcpInfo* AppGuardSmtpRequest::mutable_tcp_info() {
  ::appguard::AppGuardTcpInfo* _msg = _internal_mutable_tcp_info();
  // @@protoc_insertion_point(field_mutable:appguard.AppGuardSmtpRequest.tcp_info)
  return _msg;
}
inline void AppGuardSmtpRequest::set_allocated_tcp_info(::appguard::AppGuardTcpInfo* tcp_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.tcp_info_;
  }
  if (tcp_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(tcp_info);
    if (message_arena != submessage_arena) {
      tcp_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tcp_info, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.tcp_info_ = tcp_info;
  // @@protoc_insertion_point(field_set_allocated:appguard.AppGuardSmtpRequest.tcp_info)
}

// -------------------------------------------------------------------

// AppGuardSmtpResponse

// optional uint32 code = 1;
inline bool AppGuardSmtpResponse::_internal_has_code() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool AppGuardSmtpResponse::has_code() const {
  return _internal_has_code();
}
inline void AppGuardSmtpResponse::clear_code() {
  _impl_.code_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline uint32_t AppGuardSmtpResponse::_internal_code() const {
  return _impl_.code_;
}
inline uint32_t AppGuardSmtpResponse::code() const {
  // @@protoc_insertion_point(field_get:appguard.AppGuardSmtpResponse.code)
  return _internal_code();
}
inline void AppGuardSmtpResponse::_internal_set_code(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.code_ = value;
}
inline void AppGuardSmtpResponse::set_code(uint32_t value) {
  _internal_set_code(value);
  // @@protoc_insertion_point(field_set:appguard.AppGuardSmtpResponse.code)
}

// .appguard.AppGuardTcpInfo tcp_info = 100;
inline bool AppGuardSmtpResponse::_internal_has_tcp_info() const {
  return this != internal_default_instance() && _impl_.tcp_info_ != nullptr;
}
inline bool AppGuardSmtpResponse::has_tcp_info() const {
  return _internal_has_tcp_info();
}
inline void AppGuardSmtpResponse::clear_tcp_info() {
  if (GetArenaForAllocation() == nullptr && _impl_.tcp_info_ != nullptr) {
    delete _impl_.tcp_info_;
  }
  _impl_.tcp_info_ = nullptr;
}
inline const ::appguard::AppGuardTcpInfo& AppGuardSmtpResponse::_internal_tcp_info() const {
  const ::appguard::AppGuardTcpInfo* p = _impl_.tcp_info_;
  return p != nullptr ? *p : reinterpret_cast<const ::appguard::AppGuardTcpInfo&>(
      ::appguard::_AppGuardTcpInfo_default_instance_);
}
inline const ::appguard::AppGuardTcpInfo& AppGuardSmtpResponse::tcp_info() const {
  // @@protoc_insertion_point(field_get:appguard.AppGuardSmtpResponse.tcp_info)
  return _internal_tcp_info();
}
inline void AppGuardSmtpResponse::unsafe_arena_set_allocated_tcp_info(
    ::appguard::AppGuardTcpInfo* tcp_info) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.tcp_info_);
  }
  _impl_.tcp_info_ = tcp_info;
  if (tcp_info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:appguard.AppGuardSmtpResponse.tcp_info)
}
inline ::appguard::AppGuardTcpInfo* AppGuardSmtpResponse::release_tcp_info() {
  
  ::appguard::AppGuardTcpInfo* temp = _impl_.tcp_info_;
  _impl_.tcp_info_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::appguard::AppGuardTcpInfo* AppGuardSmtpResponse::unsafe_arena_release_tcp_info() {
  // @@protoc_insertion_point(field_release:appguard.AppGuardSmtpResponse.tcp_info)
  
  ::appguard::AppGuardTcpInfo* temp = _impl_.tcp_info_;
  _impl_.tcp_info_ = nullptr;
  return temp;
}
inline ::appguard::AppGuardTcpInfo* AppGuardSmtpResponse::_internal_mutable_tcp_info() {
  
  if (_impl_.tcp_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::appguard::AppGuardTcpInfo>(GetArenaForAllocation());
    _impl_.tcp_info_ = p;
  }
  return _impl_.tcp_info_;
}
inline ::appguard::AppGuardTcpInfo* AppGuardSmtpResponse::mutable_tcp_info() {
  ::appguard::AppGuardTcpInfo* _msg = _internal_mutable_tcp_info();
  // @@protoc_insertion_point(field_mutable:appguard.AppGuardSmtpResponse.tcp_info)
  return _msg;
}
inline void AppGuardSmtpResponse::set_allocated_tcp_info(::appguard::AppGuardTcpInfo* tcp_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.tcp_info_;
  }
  if (tcp_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(tcp_info);
    if (message_arena != submessage_arena) {
      tcp_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tcp_info, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.tcp_info_ = tcp_info;
  // @@protoc_insertion_point(field_set_allocated:appguard.AppGuardSmtpResponse.tcp_info)
}

// -------------------------------------------------------------------

// AppGuardResponse

// .appguard.FirewallPolicy policy = 2;
inline void AppGuardResponse::clear_policy() {
  _impl_.policy_ = 0;
}
inline ::appguard::FirewallPolicy AppGuardResponse::_internal_policy() const {
  return static_cast< ::appguard::FirewallPolicy >(_impl_.policy_);
}
inline ::appguard::FirewallPolicy AppGuardResponse::policy() const {
  // @@protoc_insertion_point(field_get:appguard.AppGuardResponse.policy)
  return _internal_policy();
}
inline void AppGuardResponse::_internal_set_policy(::appguard::FirewallPolicy value) {
  
  _impl_.policy_ = value;
}
inline void AppGuardResponse::set_policy(::appguard::FirewallPolicy value) {
  _internal_set_policy(value);
  // @@protoc_insertion_point(field_set:appguard.AppGuardResponse.policy)
}

// -------------------------------------------------------------------

// AppGuardTcpResponse

// .appguard.AppGuardTcpInfo tcp_info = 1;
inline bool AppGuardTcpResponse::_internal_has_tcp_info() const {
  return this != internal_default_instance() && _impl_.tcp_info_ != nullptr;
}
inline bool AppGuardTcpResponse::has_tcp_info() const {
  return _internal_has_tcp_info();
}
inline void AppGuardTcpResponse::clear_tcp_info() {
  if (GetArenaForAllocation() == nullptr && _impl_.tcp_info_ != nullptr) {
    delete _impl_.tcp_info_;
  }
  _impl_.tcp_info_ = nullptr;
}
inline const ::appguard::AppGuardTcpInfo& AppGuardTcpResponse::_internal_tcp_info() const {
  const ::appguard::AppGuardTcpInfo* p = _impl_.tcp_info_;
  return p != nullptr ? *p : reinterpret_cast<const ::appguard::AppGuardTcpInfo&>(
      ::appguard::_AppGuardTcpInfo_default_instance_);
}
inline const ::appguard::AppGuardTcpInfo& AppGuardTcpResponse::tcp_info() const {
  // @@protoc_insertion_point(field_get:appguard.AppGuardTcpResponse.tcp_info)
  return _internal_tcp_info();
}
inline void AppGuardTcpResponse::unsafe_arena_set_allocated_tcp_info(
    ::appguard::AppGuardTcpInfo* tcp_info) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.tcp_info_);
  }
  _impl_.tcp_info_ = tcp_info;
  if (tcp_info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:appguard.AppGuardTcpResponse.tcp_info)
}
inline ::appguard::AppGuardTcpInfo* AppGuardTcpResponse::release_tcp_info() {
  
  ::appguard::AppGuardTcpInfo* temp = _impl_.tcp_info_;
  _impl_.tcp_info_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::appguard::AppGuardTcpInfo* AppGuardTcpResponse::unsafe_arena_release_tcp_info() {
  // @@protoc_insertion_point(field_release:appguard.AppGuardTcpResponse.tcp_info)
  
  ::appguard::AppGuardTcpInfo* temp = _impl_.tcp_info_;
  _impl_.tcp_info_ = nullptr;
  return temp;
}
inline ::appguard::AppGuardTcpInfo* AppGuardTcpResponse::_internal_mutable_tcp_info() {
  
  if (_impl_.tcp_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::appguard::AppGuardTcpInfo>(GetArenaForAllocation());
    _impl_.tcp_info_ = p;
  }
  return _impl_.tcp_info_;
}
inline ::appguard::AppGuardTcpInfo* AppGuardTcpResponse::mutable_tcp_info() {
  ::appguard::AppGuardTcpInfo* _msg = _internal_mutable_tcp_info();
  // @@protoc_insertion_point(field_mutable:appguard.AppGuardTcpResponse.tcp_info)
  return _msg;
}
inline void AppGuardTcpResponse::set_allocated_tcp_info(::appguard::AppGuardTcpInfo* tcp_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.tcp_info_;
  }
  if (tcp_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(tcp_info);
    if (message_arena != submessage_arena) {
      tcp_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tcp_info, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.tcp_info_ = tcp_info;
  // @@protoc_insertion_point(field_set_allocated:appguard.AppGuardTcpResponse.tcp_info)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace appguard

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::appguard::FirewallPolicy> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::appguard::FirewallPolicy>() {
  return ::appguard::FirewallPolicy_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_appguard_2eproto
